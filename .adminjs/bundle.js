(function (React, designSystem, require$$4, require$$1, adminjs) {
    'use strict';

    function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

    var React__default = /*#__PURE__*/_interopDefault(React);
    var require$$4__default = /*#__PURE__*/_interopDefault(require$$4);
    var require$$1__default = /*#__PURE__*/_interopDefault(require$$1);

    const Dashboard = props => {
      return /*#__PURE__*/React__default.default.createElement("div", null, "Customer Dashboard");
    };

    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }

    // utils is a library of generic helper functions non-specific to axios

    const {toString: toString$2} = Object.prototype;
    const {getPrototypeOf: getPrototypeOf$1} = Object;

    const kindOf = (cache => thing => {
        const str = toString$2.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(Object.create(null));

    const kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type
    };

    const typeOfTest = type => thing => typeof thing === type;

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     *
     * @returns {boolean} True if value is an Array, otherwise false
     */
    const {isArray: isArray$d} = Array;

    /**
     * Determine if a value is undefined
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    const isUndefined = typeOfTest('undefined');

    /**
     * Determine if a value is a Buffer
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer$5(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && isFunction$5(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    const isArrayBuffer = kindOfTest('ArrayBuffer');


    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      let result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a String, otherwise false
     */
    const isString = typeOfTest('string');

    /**
     * Determine if a value is a Function
     *
     * @param {*} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    const isFunction$5 = typeOfTest('function');

    /**
     * Determine if a value is a Number
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Number, otherwise false
     */
    const isNumber = typeOfTest('number');

    /**
     * Determine if a value is an Object
     *
     * @param {*} thing The value to test
     *
     * @returns {boolean} True if value is an Object, otherwise false
     */
    const isObject$a = (thing) => thing !== null && typeof thing === 'object';

    /**
     * Determine if a value is a Boolean
     *
     * @param {*} thing The value to test
     * @returns {boolean} True if value is a Boolean, otherwise false
     */
    const isBoolean = thing => thing === true || thing === false;

    /**
     * Determine if a value is a plain Object
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a plain Object, otherwise false
     */
    const isPlainObject$2 = (val) => {
      if (kindOf(val) !== 'object') {
        return false;
      }

      const prototype = getPrototypeOf$1(val);
      return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };

    /**
     * Determine if a value is a Date
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Date, otherwise false
     */
    const isDate$1 = kindOfTest('Date');

    /**
     * Determine if a value is a File
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a File, otherwise false
     */
    const isFile = kindOfTest('File');

    /**
     * Determine if a value is a Blob
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    const isBlob = kindOfTest('Blob');

    /**
     * Determine if a value is a FileList
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a File, otherwise false
     */
    const isFileList = kindOfTest('FileList');

    /**
     * Determine if a value is a Stream
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    const isStream = (val) => isObject$a(val) && isFunction$5(val.pipe);

    /**
     * Determine if a value is a FormData
     *
     * @param {*} thing The value to test
     *
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    const isFormData = (thing) => {
      let kind;
      return thing && (
        (typeof FormData === 'function' && thing instanceof FormData) || (
          isFunction$5(thing.append) && (
            (kind = kindOf(thing)) === 'formdata' ||
            // detect form-data instance
            (kind === 'object' && isFunction$5(thing.toString) && thing.toString() === '[object FormData]')
          )
        )
      )
    };

    /**
     * Determine if a value is a URLSearchParams object
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    const isURLSearchParams = kindOfTest('URLSearchParams');

    const [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     *
     * @returns {String} The String freed of excess whitespace
     */
    const trim = (str) => str.trim ?
      str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     *
     * @param {Boolean} [allOwnKeys = false]
     * @returns {any}
     */
    function forEach(obj, fn, {allOwnKeys = false} = {}) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      let i;
      let l;

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray$d(obj)) {
        // Iterate over array values
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;

        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }

    function findKey$1(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }

    const _global = (() => {
      /*eslint no-undef:0*/
      if (typeof globalThis !== "undefined") return globalThis;
      return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
    })();

    const isContextDefined = (context) => !isUndefined(context) && context !== _global;

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     *
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      const {caseless} = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey$1(result, key) || key;
        if (isPlainObject$2(result[targetKey]) && isPlainObject$2(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject$2(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray$d(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };

      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     *
     * @param {Boolean} [allOwnKeys]
     * @returns {Object} The resulting value of object a
     */
    const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction$5(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, {allOwnKeys});
      return a;
    };

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     *
     * @returns {string} content value without BOM
     */
    const stripBOM = (content) => {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    };

    /**
     * Inherit the prototype methods from one constructor into another
     * @param {function} constructor
     * @param {function} superConstructor
     * @param {object} [props]
     * @param {object} [descriptors]
     *
     * @returns {void}
     */
    const inherits$1 = (constructor, superConstructor, props, descriptors) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, 'super', {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };

    /**
     * Resolve object with deep prototype chain to a flat object
     * @param {Object} sourceObj source object
     * @param {Object} [destObj]
     * @param {Function|Boolean} [filter]
     * @param {Function} [propFilter]
     *
     * @returns {Object}
     */
    const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};

      destObj = destObj || {};
      // eslint-disable-next-line no-eq-null,eqeqeq
      if (sourceObj == null) return destObj;

      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf$1(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

      return destObj;
    };

    /**
     * Determines whether a string ends with the characters of a specified string
     *
     * @param {String} str
     * @param {String} searchString
     * @param {Number} [position= 0]
     *
     * @returns {boolean}
     */
    const endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === undefined || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };


    /**
     * Returns new array from array like object or null if failed
     *
     * @param {*} [thing]
     *
     * @returns {?Array}
     */
    const toArray$1 = (thing) => {
      if (!thing) return null;
      if (isArray$d(thing)) return thing;
      let i = thing.length;
      if (!isNumber(i)) return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };

    /**
     * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
     * thing passed in is an instance of Uint8Array
     *
     * @param {TypedArray}
     *
     * @returns {Array}
     */
    // eslint-disable-next-line func-names
    const isTypedArray$4 = (TypedArray => {
      // eslint-disable-next-line func-names
      return thing => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== 'undefined' && getPrototypeOf$1(Uint8Array));

    /**
     * For each entry in the object, call the function with the key and value.
     *
     * @param {Object<any, any>} obj - The object to iterate over.
     * @param {Function} fn - The function to call for each entry.
     *
     * @returns {void}
     */
    const forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];

      const iterator = generator.call(obj);

      let result;

      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };

    /**
     * It takes a regular expression and a string, and returns an array of all the matches
     *
     * @param {string} regExp - The regular expression to match against.
     * @param {string} str - The string to search.
     *
     * @returns {Array<boolean>}
     */
    const matchAll = (regExp, str) => {
      let matches;
      const arr = [];

      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }

      return arr;
    };

    /* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
    const isHTMLForm = kindOfTest('HTMLFormElement');

    const toCamelCase = str => {
      return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };

    /* Creating a function that will check if an object has a property. */
    const hasOwnProperty$e = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

    /**
     * Determine if a value is a RegExp object
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a RegExp object, otherwise false
     */
    const isRegExp = kindOfTest('RegExp');

    const reduceDescriptors = (obj, reducer) => {
      const descriptors = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};

      forEach(descriptors, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });

      Object.defineProperties(obj, reducedDescriptors);
    };

    /**
     * Makes all methods read-only
     * @param {Object} obj
     */

    const freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        // skip restricted props in strict mode
        if (isFunction$5(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
          return false;
        }

        const value = obj[name];

        if (!isFunction$5(value)) return;

        descriptor.enumerable = false;

        if ('writable' in descriptor) {
          descriptor.writable = false;
          return;
        }

        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error('Can not rewrite read-only method \'' + name + '\'');
          };
        }
      });
    };

    const toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};

      const define = (arr) => {
        arr.forEach(value => {
          obj[value] = true;
        });
      };

      isArray$d(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

      return obj;
    };

    const noop = () => {};

    const toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };

    const ALPHA = 'abcdefghijklmnopqrstuvwxyz';

    const DIGIT = '0123456789';

    const ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };

    const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = '';
      const {length} = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length|0];
      }

      return str;
    };

    /**
     * If the thing is a FormData object, return true, otherwise return false.
     *
     * @param {unknown} thing - The thing to check.
     *
     * @returns {boolean}
     */
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction$5(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
    }

    const toJSONObject = (obj) => {
      const stack = new Array(10);

      const visit = (source, i) => {

        if (isObject$a(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }

          if(!('toJSON' in source)) {
            stack[i] = source;
            const target = isArray$d(source) ? [] : {};

            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });

            stack[i] = undefined;

            return target;
          }
        }

        return source;
      };

      return visit(obj, 0);
    };

    const isAsyncFn = kindOfTest('AsyncFunction');

    const isThenable = (thing) =>
      thing && (isObject$a(thing) || isFunction$5(thing)) && isFunction$5(thing.then) && isFunction$5(thing.catch);

    // original code
    // https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

    const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }

      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({source, data}) => {
          if (source === _global && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);

        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        }
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === 'function',
      isFunction$5(_global.postMessage)
    );

    const asap = typeof queueMicrotask !== 'undefined' ?
      queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);

    // *********************

    var utils$2 = {
      isArray: isArray$d,
      isArrayBuffer,
      isBuffer: isBuffer$5,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject: isObject$a,
      isPlainObject: isPlainObject$2,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate: isDate$1,
      isFile,
      isBlob,
      isRegExp,
      isFunction: isFunction$5,
      isStream,
      isURLSearchParams,
      isTypedArray: isTypedArray$4,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits: inherits$1,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray: toArray$1,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty: hasOwnProperty$e,
      hasOwnProp: hasOwnProperty$e, // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey: findKey$1,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap
    };

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [config] The config.
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     *
     * @returns {Error} The created error.
     */
    function AxiosError(message, code, config, request, response) {
      Error.call(this);

      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = (new Error()).stack;
      }

      this.message = message;
      this.name = 'AxiosError';
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }

    utils$2.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$2.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });

    const prototype$1 = AxiosError.prototype;
    const descriptors = {};

    [
      'ERR_BAD_OPTION_VALUE',
      'ERR_BAD_OPTION',
      'ECONNABORTED',
      'ETIMEDOUT',
      'ERR_NETWORK',
      'ERR_FR_TOO_MANY_REDIRECTS',
      'ERR_DEPRECATED',
      'ERR_BAD_RESPONSE',
      'ERR_BAD_REQUEST',
      'ERR_CANCELED',
      'ERR_NOT_SUPPORT',
      'ERR_INVALID_URL'
    // eslint-disable-next-line func-names
    ].forEach(code => {
      descriptors[code] = {value: code};
    });

    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

    // eslint-disable-next-line func-names
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);

      utils$2.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, prop => {
        return prop !== 'isAxiosError';
      });

      AxiosError.call(axiosError, error.message, code, config, request, response);

      axiosError.cause = error;

      axiosError.name = error.name;

      customProps && Object.assign(axiosError, customProps);

      return axiosError;
    };

    // eslint-disable-next-line strict
    var httpAdapter = null;

    /**
     * Determines if the given thing is a array or js object.
     *
     * @param {string} thing - The object or array to be visited.
     *
     * @returns {boolean}
     */
    function isVisitable(thing) {
      return utils$2.isPlainObject(thing) || utils$2.isArray(thing);
    }

    /**
     * It removes the brackets from the end of a string
     *
     * @param {string} key - The key of the parameter.
     *
     * @returns {string} the key without the brackets.
     */
    function removeBrackets(key) {
      return utils$2.endsWith(key, '[]') ? key.slice(0, -2) : key;
    }

    /**
     * It takes a path, a key, and a boolean, and returns a string
     *
     * @param {string} path - The path to the current key.
     * @param {string} key - The key of the current object being iterated over.
     * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
     *
     * @returns {string} The path to the current key.
     */
    function renderKey(path, key, dots) {
      if (!path) return key;
      return path.concat(key).map(function each(token, i) {
        // eslint-disable-next-line no-param-reassign
        token = removeBrackets(token);
        return !dots && i ? '[' + token + ']' : token;
      }).join(dots ? '.' : '');
    }

    /**
     * If the array is an array and none of its elements are visitable, then it's a flat array.
     *
     * @param {Array<any>} arr - The array to check
     *
     * @returns {boolean}
     */
    function isFlatArray(arr) {
      return utils$2.isArray(arr) && !arr.some(isVisitable);
    }

    const predicates = utils$2.toFlatObject(utils$2, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });

    /**
     * Convert a data object to FormData
     *
     * @param {Object} obj
     * @param {?Object} [formData]
     * @param {?Object} [options]
     * @param {Function} [options.visitor]
     * @param {Boolean} [options.metaTokens = true]
     * @param {Boolean} [options.dots = false]
     * @param {?Boolean} [options.indexes = false]
     *
     * @returns {Object}
     **/

    /**
     * It converts an object into a FormData object
     *
     * @param {Object<any, any>} obj - The object to convert to form data.
     * @param {string} formData - The FormData object to append to.
     * @param {Object<string, any>} options
     *
     * @returns
     */
    function toFormData(obj, formData, options) {
      if (!utils$2.isObject(obj)) {
        throw new TypeError('target must be an object');
      }

      // eslint-disable-next-line no-param-reassign
      formData = formData || new (FormData)();

      // eslint-disable-next-line no-param-reassign
      options = utils$2.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        // eslint-disable-next-line no-eq-null,eqeqeq
        return !utils$2.isUndefined(source[option]);
      });

      const metaTokens = options.metaTokens;
      // eslint-disable-next-line no-use-before-define
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
      const useBlob = _Blob && utils$2.isSpecCompliantForm(formData);

      if (!utils$2.isFunction(visitor)) {
        throw new TypeError('visitor must be a function');
      }

      function convertValue(value) {
        if (value === null) return '';

        if (utils$2.isDate(value)) {
          return value.toISOString();
        }

        if (!useBlob && utils$2.isBlob(value)) {
          throw new AxiosError('Blob is not supported. Use a Buffer instead.');
        }

        if (utils$2.isArrayBuffer(value) || utils$2.isTypedArray(value)) {
          return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
        }

        return value;
      }

      /**
       * Default visitor.
       *
       * @param {*} value
       * @param {String|Number} key
       * @param {Array<String|Number>} path
       * @this {FormData}
       *
       * @returns {boolean} return true to visit the each prop of the value recursively
       */
      function defaultVisitor(value, key, path) {
        let arr = value;

        if (value && !path && typeof value === 'object') {
          if (utils$2.endsWith(key, '{}')) {
            // eslint-disable-next-line no-param-reassign
            key = metaTokens ? key : key.slice(0, -2);
            // eslint-disable-next-line no-param-reassign
            value = JSON.stringify(value);
          } else if (
            (utils$2.isArray(value) && isFlatArray(value)) ||
            ((utils$2.isFileList(value) || utils$2.endsWith(key, '[]')) && (arr = utils$2.toArray(value))
            )) {
            // eslint-disable-next-line no-param-reassign
            key = removeBrackets(key);

            arr.forEach(function each(el, index) {
              !(utils$2.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
                convertValue(el)
              );
            });
            return false;
          }
        }

        if (isVisitable(value)) {
          return true;
        }

        formData.append(renderKey(path, key, dots), convertValue(value));

        return false;
      }

      const stack = [];

      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });

      function build(value, path) {
        if (utils$2.isUndefined(value)) return;

        if (stack.indexOf(value) !== -1) {
          throw Error('Circular reference detected in ' + path.join('.'));
        }

        stack.push(value);

        utils$2.forEach(value, function each(el, key) {
          const result = !(utils$2.isUndefined(el) || el === null) && visitor.call(
            formData, el, utils$2.isString(key) ? key.trim() : key, path, exposedHelpers
          );

          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });

        stack.pop();
      }

      if (!utils$2.isObject(obj)) {
        throw new TypeError('data must be an object');
      }

      build(obj);

      return formData;
    }

    /**
     * It encodes a string by replacing all characters that are not in the unreserved set with
     * their percent-encoded equivalents
     *
     * @param {string} str - The string to encode.
     *
     * @returns {string} The encoded string.
     */
    function encode$1(str) {
      const charMap = {
        '!': '%21',
        "'": '%27',
        '(': '%28',
        ')': '%29',
        '~': '%7E',
        '%20': '+',
        '%00': '\x00'
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }

    /**
     * It takes a params object and converts it to a FormData object
     *
     * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
     * @param {Object<string, any>} options - The options object passed to the Axios constructor.
     *
     * @returns {void}
     */
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];

      params && toFormData(params, this, options);
    }

    const prototype = AxiosURLSearchParams.prototype;

    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };

    prototype.toString = function toString(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;

      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + '=' + _encode(pair[1]);
      }, '').join('&');
    };

    /**
     * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
     * URI encoded counterparts
     *
     * @param {string} val The value to be encoded.
     *
     * @returns {string} The encoded value.
     */
    function encode(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @param {?object} options
     *
     * @returns {string} The formatted url
     */
    function buildURL(url, params, options) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }
      
      const _encode = options && options.encode || encode;

      const serializeFn = options && options.serialize;

      let serializedParams;

      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$2.isURLSearchParams(params) ?
          params.toString() :
          new AxiosURLSearchParams(params, options).toString(_encode);
      }

      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");

        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    }

    class InterceptorManager {
      constructor() {
        this.handlers = [];
      }

      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }

      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }

      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }

      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$2.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    }

    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };

    var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

    var FormData$1 = typeof FormData !== 'undefined' ? FormData : null;

    var Blob$1 = typeof Blob !== 'undefined' ? Blob : null;

    var platform$1 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
    };

    const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

    const _navigator = typeof navigator === 'object' && navigator || undefined;

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     *
     * @returns {boolean}
     */
    const hasStandardBrowserEnv = hasBrowserEnv &&
      (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);

    /**
     * Determine if we're running in a standard browser webWorker environment
     *
     * Although the `isStandardBrowserEnv` method indicates that
     * `allows axios to run in a web worker`, the WebWorker will still be
     * filtered out due to its judgment standard
     * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
     * This leads to a problem when axios post `FormData` in webWorker
     */
    const hasStandardBrowserWebWorkerEnv = (() => {
      return (
        typeof WorkerGlobalScope !== 'undefined' &&
        // eslint-disable-next-line no-undef
        self instanceof WorkerGlobalScope &&
        typeof self.importScripts === 'function'
      );
    })();

    const origin = hasBrowserEnv && window.location.href || 'http://localhost';

    var utils$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        hasBrowserEnv: hasBrowserEnv,
        hasStandardBrowserEnv: hasStandardBrowserEnv,
        hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,
        navigator: _navigator,
        origin: origin
    });

    var platform = {
      ...utils$1,
      ...platform$1
    };

    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils$2.isBuffer(value)) {
            this.append(key, value.toString('base64'));
            return false;
          }

          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }

    /**
     * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
     *
     * @param {string} name - The name of the property to get.
     *
     * @returns An array of strings.
     */
    function parsePropPath(name) {
      // foo[x][y][z]
      // foo.x.y.z
      // foo-x-y-z
      // foo x y z
      return utils$2.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
        return match[0] === '[]' ? '' : match[1] || match[0];
      });
    }

    /**
     * Convert an array to an object.
     *
     * @param {Array<any>} arr - The array to convert to an object.
     *
     * @returns An object with the same keys and values as the array.
     */
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }

    /**
     * It takes a FormData object and returns a JavaScript object
     *
     * @param {string} formData The FormData object to convert to JSON.
     *
     * @returns {Object<string, any> | null} The converted object.
     */
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];

        if (name === '__proto__') return true;

        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils$2.isArray(target) ? target.length : name;

        if (isLast) {
          if (utils$2.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }

          return !isNumericKey;
        }

        if (!target[name] || !utils$2.isObject(target[name])) {
          target[name] = [];
        }

        const result = buildPath(path, value, target[name], index);

        if (result && utils$2.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }

        return !isNumericKey;
      }

      if (utils$2.isFormData(formData) && utils$2.isFunction(formData.entries)) {
        const obj = {};

        utils$2.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });

        return obj;
      }

      return null;
    }

    /**
     * It takes a string, tries to parse it, and if it fails, it returns the stringified version
     * of the input
     *
     * @param {any} rawValue - The value to be stringified.
     * @param {Function} parser - A function that parses a string into a JavaScript object.
     * @param {Function} encoder - A function that takes a value and returns a string.
     *
     * @returns {string} A stringified version of the rawValue.
     */
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$2.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$2.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (0, JSON.stringify)(rawValue);
    }

    const defaults$1 = {

      transitional: transitionalDefaults,

      adapter: ['xhr', 'http', 'fetch'],

      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || '';
        const hasJSONContentType = contentType.indexOf('application/json') > -1;
        const isObjectPayload = utils$2.isObject(data);

        if (isObjectPayload && utils$2.isHTMLForm(data)) {
          data = new FormData(data);
        }

        const isFormData = utils$2.isFormData(data);

        if (isFormData) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }

        if (utils$2.isArrayBuffer(data) ||
          utils$2.isBuffer(data) ||
          utils$2.isStream(data) ||
          utils$2.isFile(data) ||
          utils$2.isBlob(data) ||
          utils$2.isReadableStream(data)
        ) {
          return data;
        }
        if (utils$2.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$2.isURLSearchParams(data)) {
          headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
          return data.toString();
        }

        let isFileList;

        if (isObjectPayload) {
          if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }

          if ((isFileList = utils$2.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
            const _FormData = this.env && this.env.FormData;

            return toFormData(
              isFileList ? {'files[]': data} : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }

        if (isObjectPayload || hasJSONContentType ) {
          headers.setContentType('application/json', false);
          return stringifySafely(data);
        }

        return data;
      }],

      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults$1.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === 'json';

        if (utils$2.isResponse(data) || utils$2.isReadableStream(data)) {
          return data;
        }

        if (data && utils$2.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;

          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },

      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*',
          'Content-Type': undefined
        }
      }
    };

    utils$2.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
      defaults$1.headers[method] = {};
    });

    // RawAxiosHeaders whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    const ignoreDuplicateOf = utils$2.toObjectSet([
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ]);

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} rawHeaders Headers needing to be parsed
     *
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders = rawHeaders => {
      const parsed = {};
      let key;
      let val;
      let i;

      rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
        i = line.indexOf(':');
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();

        if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
          return;
        }

        if (key === 'set-cookie') {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
        }
      });

      return parsed;
    };

    const $internals = Symbol('internals');

    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }

    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }

      return utils$2.isArray(value) ? value.map(normalizeValue) : String(value);
    }

    function parseTokens(str) {
      const tokens = Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;

      while ((match = tokensRE.exec(str))) {
        tokens[match[1]] = match[2];
      }

      return tokens;
    }

    const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

    function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
      if (utils$2.isFunction(filter)) {
        return filter.call(this, value, header);
      }

      if (isHeaderNameFilter) {
        value = header;
      }

      if (!utils$2.isString(value)) return;

      if (utils$2.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }

      if (utils$2.isRegExp(filter)) {
        return filter.test(value);
      }
    }

    function formatHeader(header) {
      return header.trim()
        .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
          return char.toUpperCase() + str;
        });
    }

    function buildAccessors(obj, header) {
      const accessorName = utils$2.toCamelCase(' ' + header);

      ['get', 'set', 'has'].forEach(methodName => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }

    class AxiosHeaders {
      constructor(headers) {
        headers && this.set(headers);
      }

      set(header, valueOrRewrite, rewrite) {
        const self = this;

        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);

          if (!lHeader) {
            throw new Error('header name must be a non-empty string');
          }

          const key = utils$2.findKey(self, lHeader);

          if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
            self[key || _header] = normalizeValue(_value);
          }
        }

        const setHeaders = (headers, _rewrite) =>
          utils$2.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

        if (utils$2.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if(utils$2.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$2.isHeaders(header)) {
          for (const [key, value] of header.entries()) {
            setHeader(value, key, rewrite);
          }
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }

        return this;
      }

      get(header, parser) {
        header = normalizeHeader(header);

        if (header) {
          const key = utils$2.findKey(this, header);

          if (key) {
            const value = this[key];

            if (!parser) {
              return value;
            }

            if (parser === true) {
              return parseTokens(value);
            }

            if (utils$2.isFunction(parser)) {
              return parser.call(this, value, key);
            }

            if (utils$2.isRegExp(parser)) {
              return parser.exec(value);
            }

            throw new TypeError('parser must be boolean|regexp|function');
          }
        }
      }

      has(header, matcher) {
        header = normalizeHeader(header);

        if (header) {
          const key = utils$2.findKey(this, header);

          return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }

        return false;
      }

      delete(header, matcher) {
        const self = this;
        let deleted = false;

        function deleteHeader(_header) {
          _header = normalizeHeader(_header);

          if (_header) {
            const key = utils$2.findKey(self, _header);

            if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
              delete self[key];

              deleted = true;
            }
          }
        }

        if (utils$2.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }

        return deleted;
      }

      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;

        while (i--) {
          const key = keys[i];
          if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }

        return deleted;
      }

      normalize(format) {
        const self = this;
        const headers = {};

        utils$2.forEach(this, (value, header) => {
          const key = utils$2.findKey(headers, header);

          if (key) {
            self[key] = normalizeValue(value);
            delete self[header];
            return;
          }

          const normalized = format ? formatHeader(header) : String(header).trim();

          if (normalized !== header) {
            delete self[header];
          }

          self[normalized] = normalizeValue(value);

          headers[normalized] = true;
        });

        return this;
      }

      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }

      toJSON(asStrings) {
        const obj = Object.create(null);

        utils$2.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$2.isArray(value) ? value.join(', ') : value);
        });

        return obj;
      }

      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }

      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
      }

      get [Symbol.toStringTag]() {
        return 'AxiosHeaders';
      }

      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }

      static concat(first, ...targets) {
        const computed = new this(first);

        targets.forEach((target) => computed.set(target));

        return computed;
      }

      static accessor(header) {
        const internals = this[$internals] = (this[$internals] = {
          accessors: {}
        });

        const accessors = internals.accessors;
        const prototype = this.prototype;

        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);

          if (!accessors[lHeader]) {
            buildAccessors(prototype, _header);
            accessors[lHeader] = true;
          }
        }

        utils$2.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

        return this;
      }
    }

    AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

    // reserved names hotfix
    utils$2.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      }
    });

    utils$2.freezeMethods(AxiosHeaders);

    /**
     * Transform the data for a request or a response
     *
     * @param {Array|Function} fns A single function or Array of functions
     * @param {?Object} response The response object
     *
     * @returns {*} The resulting transformed data
     */
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders.from(context.headers);
      let data = context.data;

      utils$2.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
      });

      headers.normalize();

      return data;
    }

    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }

    /**
     * A `CanceledError` is an object that is thrown when an operation is canceled.
     *
     * @param {string=} message The message.
     * @param {Object=} config The config.
     * @param {Object=} request The request.
     *
     * @returns {CanceledError} The created error.
     */
    function CanceledError(message, config, request) {
      // eslint-disable-next-line no-eq-null,eqeqeq
      AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);
      this.name = 'CanceledError';
    }

    utils$2.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     *
     * @returns {object} The response.
     */
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          'Request failed with status code ' + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }

    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || '';
    }

    /**
     * Calculate data maxRate
     * @param {Number} [samplesCount= 10]
     * @param {Number} [min= 1000]
     * @returns {Function}
     */
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;

      min = min !== undefined ? min : 1000;

      return function push(chunkLength) {
        const now = Date.now();

        const startedAt = timestamps[tail];

        if (!firstSampleTS) {
          firstSampleTS = now;
        }

        bytes[head] = chunkLength;
        timestamps[head] = now;

        let i = tail;
        let bytesCount = 0;

        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }

        head = (head + 1) % samplesCount;

        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }

        if (now - firstSampleTS < min) {
          return;
        }

        const passed = startedAt && now - startedAt;

        return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
      };
    }

    /**
     * Throttle decorator
     * @param {Function} fn
     * @param {Number} freq
     * @return {Function}
     */
    function throttle(fn, freq) {
      let timestamp = 0;
      let threshold = 1000 / freq;
      let lastArgs;
      let timer;

      const invoke = (args, now = Date.now()) => {
        timestamp = now;
        lastArgs = null;
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        fn.apply(null, args);
      };

      const throttled = (...args) => {
        const now = Date.now();
        const passed = now - timestamp;
        if ( passed >= threshold) {
          invoke(args, now);
        } else {
          lastArgs = args;
          if (!timer) {
            timer = setTimeout(() => {
              timer = null;
              invoke(lastArgs);
            }, threshold - passed);
          }
        }
      };

      const flush = () => lastArgs && invoke(lastArgs);

      return [throttled, flush];
    }

    const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);

      return throttle(e => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : undefined;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;

        bytesNotified = loaded;

        const data = {
          loaded,
          total,
          progress: total ? (loaded / total) : undefined,
          bytes: progressBytes,
          rate: rate ? rate : undefined,
          estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? 'download' : 'upload']: true
        };

        listener(data);
      }, freq);
    };

    const progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;

      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };

    const asyncDecorator = (fn) => (...args) => utils$2.asap(() => fn(...args));

    var isURLSameOrigin = platform.hasStandardBrowserEnv ?

    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
      (function standardBrowserEnv() {
        const msie = platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent);
        const urlParsingNode = document.createElement('a');
        let originURL;

        /**
        * Parse a URL to discover its components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
        function resolveURL(url) {
          let href = url;

          if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute('href', href);
            href = urlParsingNode.href;
          }

          urlParsingNode.setAttribute('href', href);

          // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
              urlParsingNode.pathname :
              '/' + urlParsingNode.pathname
          };
        }

        originURL = resolveURL(window.location.href);

        /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
        return function isURLSameOrigin(requestURL) {
          const parsed = (utils$2.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
          return (parsed.protocol === originURL.protocol &&
              parsed.host === originURL.host);
        };
      })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      })();

    var cookies = platform.hasStandardBrowserEnv ?

      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + '=' + encodeURIComponent(value)];

          utils$2.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

          utils$2.isString(path) && cookie.push('path=' + path);

          utils$2.isString(domain) && cookie.push('domain=' + domain);

          secure === true && cookie.push('secure');

          document.cookie = cookie.join('; ');
        },

        read(name) {
          const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      }

      :

      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {},
        read() {
          return null;
        },
        remove() {}
      };

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     *
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     *
     * @returns {string} The combined URL
     */
    function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    }

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     *
     * @returns {string} The combined full path
     */
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }

    const headersToObject = (thing) => thing instanceof AxiosHeaders ? { ...thing } : thing;

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     *
     * @returns {Object} New object resulting from merging config2 to config1
     */
    function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      const config = {};

      function getMergedValue(target, source, caseless) {
        if (utils$2.isPlainObject(target) && utils$2.isPlainObject(source)) {
          return utils$2.merge.call({caseless}, target, source);
        } else if (utils$2.isPlainObject(source)) {
          return utils$2.merge({}, source);
        } else if (utils$2.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      // eslint-disable-next-line consistent-return
      function mergeDeepProperties(a, b, caseless) {
        if (!utils$2.isUndefined(b)) {
          return getMergedValue(a, b, caseless);
        } else if (!utils$2.isUndefined(a)) {
          return getMergedValue(undefined, a, caseless);
        }
      }

      // eslint-disable-next-line consistent-return
      function valueFromConfig2(a, b) {
        if (!utils$2.isUndefined(b)) {
          return getMergedValue(undefined, b);
        }
      }

      // eslint-disable-next-line consistent-return
      function defaultToConfig2(a, b) {
        if (!utils$2.isUndefined(b)) {
          return getMergedValue(undefined, b);
        } else if (!utils$2.isUndefined(a)) {
          return getMergedValue(undefined, a);
        }
      }

      // eslint-disable-next-line consistent-return
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(undefined, a);
        }
      }

      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
      };

      utils$2.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge(config1[prop], config2[prop], prop);
        (utils$2.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
      });

      return config;
    }

    var resolveConfig = (config) => {
      const newConfig = mergeConfig({}, config);

      let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

      newConfig.headers = headers = AxiosHeaders.from(headers);

      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);

      // HTTP basic authentication
      if (auth) {
        headers.set('Authorization', 'Basic ' +
          btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
        );
      }

      let contentType;

      if (utils$2.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(undefined); // Let the browser set it
        } else if ((contentType = headers.getContentType()) !== false) {
          // fix semicolon duplication issue for ReactNative FormData implementation
          const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
          headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
        }
      }

      // Add xsrf header
      // This is only done if running in a standard browser environment.
      // Specifically not if we're in a web worker, or react-native.

      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$2.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

        if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {
          // Add xsrf header
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);

          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }

      return newConfig;
    };

    const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

    var xhrAdapter = isXHRAdapterSupported && function (config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders.from(_config.headers).normalize();
        let {responseType, onUploadProgress, onDownloadProgress} = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;

        function done() {
          flushUpload && flushUpload(); // flush events
          flushDownload && flushDownload(); // flush events

          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);

          _config.signal && _config.signal.removeEventListener('abort', onCanceled);
        }

        let request = new XMLHttpRequest();

        request.open(_config.method.toUpperCase(), _config.url, true);

        // Set the request timeout in MS
        request.timeout = _config.timeout;

        function onloadend() {
          if (!request) {
            return;
          }
          // Prepare the response
          const responseHeaders = AxiosHeaders.from(
            'getAllResponseHeaders' in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
            request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };

          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);

          // Clean up request
          request = null;
        }

        if ('onloadend' in request) {
          // Use onloadend if available
          request.onloadend = onloadend;
        } else {
          // Listen for ready state to emulate onloadend
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
          };
        }

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request));

          // Clean up request
          request = null;
        };

        // Remove Content-Type if data is undefined
        requestData === undefined && requestHeaders.setContentType(null);

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils$2.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }

        // Add withCredentials to request if needed
        if (!utils$2.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }

        // Add responseType to request if needed
        if (responseType && responseType !== 'json') {
          request.responseType = _config.responseType;
        }

        // Handle progress if needed
        if (onDownloadProgress) {
          ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));
          request.addEventListener('progress', downloadThrottled);
        }

        // Not all browsers support upload events
        if (onUploadProgress && request.upload) {
          ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));

          request.upload.addEventListener('progress', uploadThrottled);

          request.upload.addEventListener('loadend', flushUpload);
        }

        if (_config.cancelToken || _config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = cancel => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };

          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
          }
        }

        const protocol = parseProtocol(_config.url);

        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
          return;
        }


        // Send the request
        request.send(requestData || null);
      });
    };

    const composeSignals = (signals, timeout) => {
      const {length} = (signals = signals ? signals.filter(Boolean) : []);

      if (timeout || length) {
        let controller = new AbortController();

        let aborted;

        const onabort = function (reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
          }
        };

        let timer = timeout && setTimeout(() => {
          timer = null;
          onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
        }, timeout);

        const unsubscribe = () => {
          if (signals) {
            timer && clearTimeout(timer);
            timer = null;
            signals.forEach(signal => {
              signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);
            });
            signals = null;
          }
        };

        signals.forEach((signal) => signal.addEventListener('abort', onabort));

        const {signal} = controller;

        signal.unsubscribe = () => utils$2.asap(unsubscribe);

        return signal;
      }
    };

    const streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;

      if (len < chunkSize) {
        yield chunk;
        return;
      }

      let pos = 0;
      let end;

      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };

    const readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };

    const readStream = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }

      const reader = stream.getReader();
      try {
        for (;;) {
          const {done, value} = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };

    const trackStream = (stream, chunkSize, onProgress, onFinish) => {
      const iterator = readBytes(stream, chunkSize);

      let bytes = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };

      return new ReadableStream({
        async pull(controller) {
          try {
            const {done, value} = await iterator.next();

            if (done) {
             _onFinish();
              controller.close();
              return;
            }

            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator.return();
        }
      }, {
        highWaterMark: 2
      })
    };

    const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
    const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';

    // used only inside the fetch adapter
    const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?
        ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
        async (str) => new Uint8Array(await new Response(str).arrayBuffer())
    );

    const test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false
      }
    };

    const supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;

      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: 'POST',
        get duplex() {
          duplexAccessed = true;
          return 'half';
        },
      }).headers.has('Content-Type');

      return duplexAccessed && !hasContentType;
    });

    const DEFAULT_CHUNK_SIZE = 64 * 1024;

    const supportsResponseStream = isReadableStreamSupported &&
      test(() => utils$2.isReadableStream(new Response('').body));


    const resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };

    isFetchSupported && (((res) => {
      ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
        !resolvers[type] && (resolvers[type] = utils$2.isFunction(res[type]) ? (res) => res[type]() :
          (_, config) => {
            throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
          });
      });
    })(new Response));

    const getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }

      if(utils$2.isBlob(body)) {
        return body.size;
      }

      if(utils$2.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: 'POST',
          body,
        });
        return (await _request.arrayBuffer()).byteLength;
      }

      if(utils$2.isArrayBufferView(body) || utils$2.isArrayBuffer(body)) {
        return body.byteLength;
      }

      if(utils$2.isURLSearchParams(body)) {
        body = body + '';
      }

      if(utils$2.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };

    const resolveBodyLength = async (headers, body) => {
      const length = utils$2.toFiniteNumber(headers.getContentLength());

      return length == null ? getBodyLength(body) : length;
    };

    var fetchAdapter = isFetchSupported && (async (config) => {
      let {
        url,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = 'same-origin',
        fetchOptions
      } = resolveConfig(config);

      responseType = responseType ? (responseType + '').toLowerCase() : 'text';

      let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);

      let request;

      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
          composedSignal.unsubscribe();
      });

      let requestContentLength;

      try {
        if (
          onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&
          (requestContentLength = await resolveBodyLength(headers, data)) !== 0
        ) {
          let _request = new Request(url, {
            method: 'POST',
            body: data,
            duplex: "half"
          });

          let contentTypeHeader;

          if (utils$2.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
            headers.setContentType(contentTypeHeader);
          }

          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );

            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }

        if (!utils$2.isString(withCredentials)) {
          withCredentials = withCredentials ? 'include' : 'omit';
        }

        // Cloudflare Workers throws when credentials are defined
        // see https://github.com/cloudflare/workerd/issues/902
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : undefined
        });

        let response = await fetch(request);

        const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');

        if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {
          const options = {};

          ['status', 'statusText', 'headers'].forEach(prop => {
            options[prop] = response[prop];
          });

          const responseContentLength = utils$2.toFiniteNumber(response.headers.get('content-length'));

          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];

          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }

        responseType = responseType || 'text';

        let responseData = await resolvers[utils$2.findKey(resolvers, responseType) || 'text'](response, config);

        !isStreamResponse && unsubscribe && unsubscribe();

        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        })
      } catch (err) {
        unsubscribe && unsubscribe();

        if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          )
        }

        throw AxiosError.from(err, err && err.code, config, request);
      }
    });

    const knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };

    utils$2.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, 'name', {value});
        } catch (e) {
          // eslint-disable-next-line no-empty
        }
        Object.defineProperty(fn, 'adapterName', {value});
      }
    });

    const renderReason = (reason) => `- ${reason}`;

    const isResolvedHandle = (adapter) => utils$2.isFunction(adapter) || adapter === null || adapter === false;

    var adapters = {
      getAdapter: (adapters) => {
        adapters = utils$2.isArray(adapters) ? adapters : [adapters];

        const {length} = adapters;
        let nameOrAdapter;
        let adapter;

        const rejectedReasons = {};

        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters[i];
          let id;

          adapter = nameOrAdapter;

          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

            if (adapter === undefined) {
              throw new AxiosError(`Unknown adapter '${id}'`);
            }
          }

          if (adapter) {
            break;
          }

          rejectedReasons[id || '#' + i] = adapter;
        }

        if (!adapter) {

          const reasons = Object.entries(rejectedReasons)
            .map(([id, state]) => `adapter ${id} ` +
              (state === false ? 'is not supported by the environment' : 'is not available in the build')
            );

          let s = length ?
            (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
            'as no adapter specified';

          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s,
            'ERR_NOT_SUPPORT'
          );
        }

        return adapter;
      },
      adapters: knownAdapters
    };

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     *
     * @param {Object} config The config that is to be used for the request
     *
     * @returns {void}
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }

      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      config.headers = AxiosHeaders.from(config.headers);

      // Transform request data
      config.data = transformData.call(
        config,
        config.transformRequest
      );

      if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
        config.headers.setContentType('application/x-www-form-urlencoded', false);
      }

      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );

        response.headers = AxiosHeaders.from(response.headers);

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders.from(reason.response.headers);
          }
        }

        return Promise.reject(reason);
      });
    }

    const VERSION = "1.7.7";

    const validators$1 = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
      validators$1[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    const deprecatedWarnings = {};

    /**
     * Transitional option validator
     *
     * @param {function|boolean?} validator - set to false if the transitional option has been removed
     * @param {string?} version - deprecated version / removed since version
     * @param {string?} message - some message with additional info
     *
     * @returns {function}
     */
    validators$1.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return (value, opt, opts) => {
        if (validator === false) {
          throw new AxiosError(
            formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
            AxiosError.ERR_DEPRECATED
          );
        }

        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     *
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     *
     * @returns {object}
     */

    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator = schema[opt];
        if (validator) {
          const value = options[opt];
          const result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }

    var validator = {
      assertOptions,
      validators: validators$1
    };

    const validators = validator.validators;

    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     *
     * @return {Axios} A new instance of Axios
     */
    class Axios {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager(),
          response: new InterceptorManager()
        };
      }

      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy;

            Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());

            // slice off the Error: ... line
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
            try {
              if (!err.stack) {
                err.stack = stack;
                // match without the 2 top stack lines
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
                err.stack += '\n' + stack;
              }
            } catch (e) {
              // ignore the case where "stack" is an un-writable property
            }
          }

          throw err;
        }
      }

      _request(configOrUrl, config) {
        /*eslint no-param-reassign:0*/
        // Allow for axios('example/url'[, config]) a la fetch API
        if (typeof configOrUrl === 'string') {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }

        config = mergeConfig(this.defaults, config);

        const {transitional, paramsSerializer, headers} = config;

        if (transitional !== undefined) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }

        if (paramsSerializer != null) {
          if (utils$2.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }

        // Set config.method
        config.method = (config.method || this.defaults.method || 'get').toLowerCase();

        // Flatten headers
        let contextHeaders = headers && utils$2.merge(
          headers.common,
          headers[config.method]
        );

        headers && utils$2.forEach(
          ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
          (method) => {
            delete headers[method];
          }
        );

        config.headers = AxiosHeaders.concat(contextHeaders, headers);

        // filter out skipped interceptors
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
            return;
          }

          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });

        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });

        let promise;
        let i = 0;
        let len;

        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), undefined];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;

          promise = Promise.resolve(config);

          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }

          return promise;
        }

        len = requestInterceptorChain.length;

        let newConfig = config;

        i = 0;

        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }

        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }

        i = 0;
        len = responseInterceptorChain.length;

        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }

        return promise;
      }

      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    }

    // Provide aliases for supported request methods
    utils$2.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });

    utils$2.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/

      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              'Content-Type': 'multipart/form-data'
            } : {},
            url,
            data
          }));
        };
      }

      Axios.prototype[method] = generateHTTPMethod();

      Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
    });

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @param {Function} executor The executor function.
     *
     * @returns {CancelToken}
     */
    class CancelToken {
      constructor(executor) {
        if (typeof executor !== 'function') {
          throw new TypeError('executor must be a function.');
        }

        let resolvePromise;

        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });

        const token = this;

        // eslint-disable-next-line func-names
        this.promise.then(cancel => {
          if (!token._listeners) return;

          let i = token._listeners.length;

          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });

        // eslint-disable-next-line func-names
        this.promise.then = onfulfilled => {
          let _resolve;
          // eslint-disable-next-line func-names
          const promise = new Promise(resolve => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);

          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };

          return promise;
        };

        executor(function cancel(message, config, request) {
          if (token.reason) {
            // Cancellation has already been requested
            return;
          }

          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }

      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }

      /**
       * Subscribe to the cancel signal
       */

      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }

        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }

      /**
       * Unsubscribe from the cancel signal
       */

      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }

      toAbortSignal() {
        const controller = new AbortController();

        const abort = (err) => {
          controller.abort(err);
        };

        this.subscribe(abort);

        controller.signal.unsubscribe = () => this.unsubscribe(abort);

        return controller.signal;
      }

      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    }

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     *
     * @returns {Function}
     */
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     *
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    function isAxiosError(payload) {
      return utils$2.isObject(payload) && (payload.isAxiosError === true);
    }

    const HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511,
    };

    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     *
     * @returns {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      const context = new Axios(defaultConfig);
      const instance = bind(Axios.prototype.request, context);

      // Copy axios.prototype to instance
      utils$2.extend(instance, Axios.prototype, context, {allOwnKeys: true});

      // Copy context to instance
      utils$2.extend(instance, context, null, {allOwnKeys: true});

      // Factory for creating new instances
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };

      return instance;
    }

    // Create the default instance to be exported
    const axios = createInstance(defaults$1);

    // Expose Axios class to allow class inheritance
    axios.Axios = Axios;

    // Expose Cancel & CancelToken
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;

    // Expose AxiosError class
    axios.AxiosError = AxiosError;

    // alias for CanceledError for backward compatibility
    axios.Cancel = axios.CanceledError;

    // Expose all/spread
    axios.all = function all(promises) {
      return Promise.all(promises);
    };

    axios.spread = spread;

    // Expose isAxiosError
    axios.isAxiosError = isAxiosError;

    // Expose mergeConfig
    axios.mergeConfig = mergeConfig;

    axios.AxiosHeaders = AxiosHeaders;

    axios.formToJSON = thing => formDataToJSON(utils$2.isHTMLForm(thing) ? new FormData(thing) : thing);

    axios.getAdapter = adapters.getAdapter;

    axios.HttpStatusCode = HttpStatusCode;

    axios.default = axios;

    const VideoUploadEditComponent = props => {
      const {
        record,
        onChange
      } = props;
      const [selectedFile, setSelectedFile] = React.useState(null);
      const handleFileChange = event => {
        const file = event.target.files[0];
        setSelectedFile(file);
        onChange('file', file);
      };
      const handleSubmit = async event => {
        event.preventDefault();
        if (!selectedFile) {
          alert('Please select a video file to upload.');
          return;
        }
        const formData = new FormData();
        formData.append('video', selectedFile);
        formData.append('fileId', record.id);
        try {
          const response = await axios.post('/uploadVideo', formData, {
            headers: {
              'Content-Type': 'multipart/form-data'
            }
          });
          const {
            s3Key,
            bucket,
            mime
          } = response.data;
          onChange('s3Key', s3Key);
          onChange('bucket', bucket);
          onChange('mime', mime);
          alert('Video uploaded successfully');
        } catch (error) {
          alert('Error uploading video');
        }
      };
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        as: "form",
        onSubmit: handleSubmit
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Video"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
        type: "file",
        accept: "video/*",
        onChange: handleFileChange
      }), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
        type: "button",
        onClick: handleSubmit
      }, "Upload"));
    };

    const OrganisationDetail = () => {
      return /*#__PURE__*/React__default.default.createElement("div", null, "Organizational Detial");
    };

    const ExportActivities$1 = () => {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
        onClick: () => {
          location.href = '/department/exportActivies';
        }
      }, "Export Xlsx");
    };

    const DepartmentMove = ({
      record,
      records
    }) => {
      const [selectOrganisation, setSelectOrganisation] = React.useState();
      const [organisationList, setOrganisationList] = React.useState([]);
      React.useEffect(() => {
        axios.get('/organisation/getAllList').then(res => {
          setOrganisationList(res.data);
        });
      }, []);
      return /*#__PURE__*/React__default.default.createElement("div", null, /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
        placeholder: "Select Organisation",
        value: selectOrganisation,
        onChange: item => setSelectOrganisation(item),
        options: organisationList.map(item => ({
          label: `[${item.ShortName}]${item.LongName}`,
          value: item.ID
        }))
      }), /*#__PURE__*/React__default.default.createElement("div", {
        style: {
          marginTop: 20
        }
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
        size: "lg",
        color: "secondary",
        variant: "contained",
        onClick: async () => {
          try {
            const ids = [];
            if (record) {
              ids.push(record.id);
            } else if (records) {
              ids.push(...records.map(item => item.id));
            }
            await axios.post('/department/moveOrganisation', {
              ids,
              organisationId: selectOrganisation.value
            });
            alert('Move success');
            history.back();
          } catch {
            alert('Move failure');
          }
        }
      }, "Move")));
    };

    const ExportActivities = () => (/*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      onClick: () => {
        location.href = '/user/exportActivies';
      }
    }, "Export Xlsx"));

    const UserDetail = props => {
      const [exerciseLogList, setExerciseLogList] = React.useState([]);
      const getData = async () => {
        const {
          data: mDetail
        } = await axios.get(`/user/detail/${props.record.id}`);
        setExerciseLogList(mDetail.ExerciseLogs);
      };
      React.useEffect(() => {
        getData();
      }, []);
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement("div", null, /*#__PURE__*/React__default.default.createElement("div", {
        style: {
          alignItems: 'center',
          marginTop: 20,
          marginBottom: 20,
          display: 'flex',
          justifyContent: 'space-between',
          margin: '20px 0'
        }
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
        color: "secondary",
        variant: "contained",
        onClick: () => {
          axios.get(`/user/sendResetPasswordEmail/${props.record.id}`).then(() => {
            alert('A password reset link has been sent to the user');
          });
        }
      }, "Reset Password"), /*#__PURE__*/React__default.default.createElement(designSystem.Header.H1, {
        style: {
          margin: 0
        }
      }, "Exercise Log"), /*#__PURE__*/React__default.default.createElement("div", {
        style: {
          display: 'flex',
          alignItems: 'center'
        }
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
        color: "secondary",
        variant: "contained",
        onClick: () => {
          location.href = `/user/exportActivies?ID=${props.record.id}`;
        }
      }, "Export Activities"), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
        variant: "text",
        onClick: () => location.href = '/admin/resources/exercise_log'
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Icon, {
        icon: "Filter",
        color: "#000"
      })))), /*#__PURE__*/React__default.default.createElement(designSystem.Table, {
        style: {
          textAlign: 'center'
        }
      }, /*#__PURE__*/React__default.default.createElement(designSystem.TableHead, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "ID"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "Title"))), /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, exerciseLogList.map((item, i) => (/*#__PURE__*/React__default.default.createElement(designSystem.TableRow, {
        key: i
      })))))));
    };

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    var lib = {};

    var interopRequireDefault = {exports: {}};

    (function (module) {
    	function _interopRequireDefault(e) {
    	  return e && e.__esModule ? e : {
    	    "default": e
    	  };
    	}
    	module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (interopRequireDefault));

    var interopRequireDefaultExports = interopRequireDefault.exports;

    var EventWrapper = {};

    var NoopWrapper$1 = {};

    Object.defineProperty(NoopWrapper$1, "__esModule", {
      value: true
    });
    NoopWrapper$1.default = void 0;
    function NoopWrapper(props) {
      return props.children;
    }
    NoopWrapper$1.default = NoopWrapper;

    var _interopRequireDefault$L = interopRequireDefaultExports.default;
    Object.defineProperty(EventWrapper, "__esModule", {
      value: true
    });
    EventWrapper.default = void 0;
    var _NoopWrapper$3 = _interopRequireDefault$L(NoopWrapper$1);
    EventWrapper.default = _NoopWrapper$3.default;

    var BackgroundWrapper = {};

    var _interopRequireDefault$K = interopRequireDefaultExports.default;
    Object.defineProperty(BackgroundWrapper, "__esModule", {
      value: true
    });
    BackgroundWrapper.default = void 0;
    var _NoopWrapper$2 = _interopRequireDefault$K(NoopWrapper$1);
    BackgroundWrapper.default = _NoopWrapper$2.default;

    var Calendar$1 = {};

    var objectSpread2 = {exports: {}};

    var defineProperty$3 = {exports: {}};

    var toPropertyKey = {exports: {}};

    var _typeof$1 = {exports: {}};

    (function (module) {
    	function _typeof(o) {
    	  "@babel/helpers - typeof";

    	  return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    	    return typeof o;
    	  } : function (o) {
    	    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    	  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
    	}
    	module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (_typeof$1));

    var _typeofExports = _typeof$1.exports;

    var toPrimitive = {exports: {}};

    (function (module) {
    	var _typeof = _typeofExports["default"];
    	function toPrimitive(t, r) {
    	  if ("object" != _typeof(t) || !t) return t;
    	  var e = t[Symbol.toPrimitive];
    	  if (void 0 !== e) {
    	    var i = e.call(t, r || "default");
    	    if ("object" != _typeof(i)) return i;
    	    throw new TypeError("@@toPrimitive must return a primitive value.");
    	  }
    	  return ("string" === r ? String : Number)(t);
    	}
    	module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (toPrimitive));

    var toPrimitiveExports = toPrimitive.exports;

    (function (module) {
    	var _typeof = _typeofExports["default"];
    	var toPrimitive = toPrimitiveExports;
    	function toPropertyKey(t) {
    	  var i = toPrimitive(t, "string");
    	  return "symbol" == _typeof(i) ? i : i + "";
    	}
    	module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (toPropertyKey));

    var toPropertyKeyExports = toPropertyKey.exports;

    (function (module) {
    	var toPropertyKey = toPropertyKeyExports;
    	function _defineProperty(e, r, t) {
    	  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    	    value: t,
    	    enumerable: !0,
    	    configurable: !0,
    	    writable: !0
    	  }) : e[r] = t, e;
    	}
    	module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (defineProperty$3));

    var definePropertyExports = defineProperty$3.exports;

    (function (module) {
    	var defineProperty = definePropertyExports;
    	function ownKeys(e, r) {
    	  var t = Object.keys(e);
    	  if (Object.getOwnPropertySymbols) {
    	    var o = Object.getOwnPropertySymbols(e);
    	    r && (o = o.filter(function (r) {
    	      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    	    })), t.push.apply(t, o);
    	  }
    	  return t;
    	}
    	function _objectSpread2(e) {
    	  for (var r = 1; r < arguments.length; r++) {
    	    var t = null != arguments[r] ? arguments[r] : {};
    	    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
    	      defineProperty(e, r, t[r]);
    	    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
    	      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    	    });
    	  }
    	  return e;
    	}
    	module.exports = _objectSpread2, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (objectSpread2));

    var objectSpread2Exports = objectSpread2.exports;

    var objectWithoutProperties = {exports: {}};

    var objectWithoutPropertiesLoose = {exports: {}};

    (function (module) {
    	function _objectWithoutPropertiesLoose(r, e) {
    	  if (null == r) return {};
    	  var t = {};
    	  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    	    if (e.includes(n)) continue;
    	    t[n] = r[n];
    	  }
    	  return t;
    	}
    	module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (objectWithoutPropertiesLoose));

    var objectWithoutPropertiesLooseExports = objectWithoutPropertiesLoose.exports;

    (function (module) {
    	var objectWithoutPropertiesLoose = objectWithoutPropertiesLooseExports;
    	function _objectWithoutProperties(e, t) {
    	  if (null == e) return {};
    	  var o,
    	    r,
    	    i = objectWithoutPropertiesLoose(e, t);
    	  if (Object.getOwnPropertySymbols) {
    	    var s = Object.getOwnPropertySymbols(e);
    	    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    	  }
    	  return i;
    	}
    	module.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (objectWithoutProperties));

    var objectWithoutPropertiesExports = objectWithoutProperties.exports;

    var classCallCheck = {exports: {}};

    (function (module) {
    	function _classCallCheck(a, n) {
    	  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
    	}
    	module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (classCallCheck));

    var classCallCheckExports = classCallCheck.exports;

    var createClass = {exports: {}};

    (function (module) {
    	var toPropertyKey = toPropertyKeyExports;
    	function _defineProperties(e, r) {
    	  for (var t = 0; t < r.length; t++) {
    	    var o = r[t];
    	    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);
    	  }
    	}
    	function _createClass(e, r, t) {
    	  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    	    writable: !1
    	  }), e;
    	}
    	module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (createClass));

    var createClassExports = createClass.exports;

    var callSuper = {exports: {}};

    var getPrototypeOf = {exports: {}};

    (function (module) {
    	function _getPrototypeOf(t) {
    	  return module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    	    return t.__proto__ || Object.getPrototypeOf(t);
    	  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _getPrototypeOf(t);
    	}
    	module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (getPrototypeOf));

    var getPrototypeOfExports = getPrototypeOf.exports;

    var isNativeReflectConstruct = {exports: {}};

    (function (module) {
    	function _isNativeReflectConstruct() {
    	  try {
    	    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    	  } catch (t) {}
    	  return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct() {
    	    return !!t;
    	  }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
    	}
    	module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (isNativeReflectConstruct));

    var isNativeReflectConstructExports = isNativeReflectConstruct.exports;

    var possibleConstructorReturn = {exports: {}};

    var assertThisInitialized = {exports: {}};

    (function (module) {
    	function _assertThisInitialized(e) {
    	  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    	  return e;
    	}
    	module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (assertThisInitialized));

    var assertThisInitializedExports = assertThisInitialized.exports;

    (function (module) {
    	var _typeof = _typeofExports["default"];
    	var assertThisInitialized = assertThisInitializedExports;
    	function _possibleConstructorReturn(t, e) {
    	  if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
    	  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    	  return assertThisInitialized(t);
    	}
    	module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (possibleConstructorReturn));

    var possibleConstructorReturnExports = possibleConstructorReturn.exports;

    (function (module) {
    	var getPrototypeOf = getPrototypeOfExports;
    	var isNativeReflectConstruct = isNativeReflectConstructExports;
    	var possibleConstructorReturn = possibleConstructorReturnExports;
    	function _callSuper(t, o, e) {
    	  return o = getPrototypeOf(o), possibleConstructorReturn(t, isNativeReflectConstruct() ? Reflect.construct(o, e || [], getPrototypeOf(t).constructor) : o.apply(t, e));
    	}
    	module.exports = _callSuper, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (callSuper));

    var callSuperExports = callSuper.exports;

    var inherits = {exports: {}};

    var setPrototypeOf = {exports: {}};

    (function (module) {
    	function _setPrototypeOf(t, e) {
    	  return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    	    return t.__proto__ = e, t;
    	  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _setPrototypeOf(t, e);
    	}
    	module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (setPrototypeOf));

    var setPrototypeOfExports = setPrototypeOf.exports;

    (function (module) {
    	var setPrototypeOf = setPrototypeOfExports;
    	function _inherits(t, e) {
    	  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    	  t.prototype = Object.create(e && e.prototype, {
    	    constructor: {
    	      value: t,
    	      writable: !0,
    	      configurable: !0
    	    }
    	  }), Object.defineProperty(t, "prototype", {
    	    writable: !1
    	  }), e && setPrototypeOf(t, e);
    	}
    	module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (inherits));

    var inheritsExports = inherits.exports;

    var slicedToArray = {exports: {}};

    var arrayWithHoles = {exports: {}};

    (function (module) {
    	function _arrayWithHoles(r) {
    	  if (Array.isArray(r)) return r;
    	}
    	module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (arrayWithHoles));

    var arrayWithHolesExports = arrayWithHoles.exports;

    var iterableToArrayLimit = {exports: {}};

    (function (module) {
    	function _iterableToArrayLimit(r, l) {
    	  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    	  if (null != t) {
    	    var e,
    	      n,
    	      i,
    	      u,
    	      a = [],
    	      f = !0,
    	      o = !1;
    	    try {
    	      if (i = (t = t.call(r)).next, 0 === l) {
    	        if (Object(t) !== t) return;
    	        f = !1;
    	      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    	    } catch (r) {
    	      o = !0, n = r;
    	    } finally {
    	      try {
    	        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
    	      } finally {
    	        if (o) throw n;
    	      }
    	    }
    	    return a;
    	  }
    	}
    	module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (iterableToArrayLimit));

    var iterableToArrayLimitExports = iterableToArrayLimit.exports;

    var unsupportedIterableToArray = {exports: {}};

    var arrayLikeToArray = {exports: {}};

    (function (module) {
    	function _arrayLikeToArray(r, a) {
    	  (null == a || a > r.length) && (a = r.length);
    	  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    	  return n;
    	}
    	module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (arrayLikeToArray));

    var arrayLikeToArrayExports = arrayLikeToArray.exports;

    (function (module) {
    	var arrayLikeToArray = arrayLikeToArrayExports;
    	function _unsupportedIterableToArray(r, a) {
    	  if (r) {
    	    if ("string" == typeof r) return arrayLikeToArray(r, a);
    	    var t = {}.toString.call(r).slice(8, -1);
    	    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;
    	  }
    	}
    	module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (unsupportedIterableToArray));

    var unsupportedIterableToArrayExports = unsupportedIterableToArray.exports;

    var nonIterableRest = {exports: {}};

    (function (module) {
    	function _nonIterableRest() {
    	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    	}
    	module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (nonIterableRest));

    var nonIterableRestExports = nonIterableRest.exports;

    (function (module) {
    	var arrayWithHoles = arrayWithHolesExports;
    	var iterableToArrayLimit = iterableToArrayLimitExports;
    	var unsupportedIterableToArray = unsupportedIterableToArrayExports;
    	var nonIterableRest = nonIterableRestExports;
    	function _slicedToArray(r, e) {
    	  return arrayWithHoles(r) || iterableToArrayLimit(r, e) || unsupportedIterableToArray(r, e) || nonIterableRest();
    	}
    	module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (slicedToArray));

    var slicedToArrayExports = slicedToArray.exports;

    var cjs$1 = {};

    var interopRequireWildcard = {exports: {}};

    (function (module) {
    	var _typeof = _typeofExports["default"];
    	function _getRequireWildcardCache(e) {
    	  if ("function" != typeof WeakMap) return null;
    	  var r = new WeakMap(),
    	    t = new WeakMap();
    	  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    	    return e ? t : r;
    	  })(e);
    	}
    	function _interopRequireWildcard(e, r) {
    	  if (!r && e && e.__esModule) return e;
    	  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    	    "default": e
    	  };
    	  var t = _getRequireWildcardCache(r);
    	  if (t && t.has(e)) return t.get(e);
    	  var n = {
    	      __proto__: null
    	    },
    	    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    	  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    	    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    	    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    	  }
    	  return n["default"] = e, t && t.set(e, n), n;
    	}
    	module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (interopRequireWildcard));

    var interopRequireWildcardExports = interopRequireWildcard.exports;

    var hook = {};

    var _extends = {exports: {}};

    var hasRequired_extends;

    function require_extends () {
    	if (hasRequired_extends) return _extends.exports;
    	hasRequired_extends = 1;
    	(function (module) {
    		function _extends() {
    		  return module.exports = _extends = Object.assign ? Object.assign.bind() : function (n) {
    		    for (var e = 1; e < arguments.length; e++) {
    		      var t = arguments[e];
    		      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    		    }
    		    return n;
    		  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _extends.apply(null, arguments);
    		}
    		module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    	} (_extends));
    	return _extends.exports;
    }

    var utils = {};

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */

    var invariant = function(condition, format, a, b, c, d, e, f) {
      {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      }

      if (!condition) {
        var error;
        if (format === undefined) {
          error = new Error(
            'Minified exception occurred; use the non-minified dev environment ' +
            'for the full error message and additional helpful warnings.'
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() { return args[argIndex++]; })
          );
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
      }
    };

    var browser = invariant;

    var hasRequiredUtils;

    function requireUtils () {
    	if (hasRequiredUtils) return utils;
    	hasRequiredUtils = 1;

    	var _interopRequireDefault = interopRequireDefaultExports;

    	utils.__esModule = true;
    	utils.uncontrolledPropTypes = uncontrolledPropTypes;
    	utils.isProp = isProp;
    	utils.defaultKey = defaultKey;
    	utils.canAcceptRef = canAcceptRef;

    	var _invariant = _interopRequireDefault(browser);

    	var noop = function noop() {};

    	function readOnlyPropType(handler, name) {
    	  return function (props, propName) {
    	    if (props[propName] !== undefined) {
    	      if (!props[handler]) {
    	        return new Error("You have provided a `" + propName + "` prop to `" + name + "` " + ("without an `" + handler + "` handler prop. This will render a read-only field. ") + ("If the field should be mutable use `" + defaultKey(propName) + "`. ") + ("Otherwise, set `" + handler + "`."));
    	      }
    	    }
    	  };
    	}

    	function uncontrolledPropTypes(controlledValues, displayName) {
    	  var propTypes = {};
    	  Object.keys(controlledValues).forEach(function (prop) {
    	    // add default propTypes for folks that use runtime checks
    	    propTypes[defaultKey(prop)] = noop;

    	    {
    	      var handler = controlledValues[prop];
    	      !(typeof handler === 'string' && handler.trim().length) ? (0, _invariant.default)(false, 'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable', displayName, prop)  : void 0;
    	      propTypes[prop] = readOnlyPropType(handler, displayName);
    	    }
    	  });
    	  return propTypes;
    	}

    	function isProp(props, prop) {
    	  return props[prop] !== undefined;
    	}

    	function defaultKey(key) {
    	  return 'default' + key.charAt(0).toUpperCase() + key.substr(1);
    	}
    	/**
    	 * Copyright (c) 2013-present, Facebook, Inc.
    	 * All rights reserved.
    	 *
    	 * This source code is licensed under the BSD-style license found in the
    	 * LICENSE file in the root directory of this source tree. An additional grant
    	 * of patent rights can be found in the PATENTS file in the same directory.
    	 */


    	function canAcceptRef(component) {
    	  return !!component && (typeof component !== 'function' || component.prototype && component.prototype.isReactComponent);
    	}
    	return utils;
    }

    var hasRequiredHook;

    function requireHook () {
    	if (hasRequiredHook) return hook;
    	hasRequiredHook = 1;

    	var _interopRequireWildcard = interopRequireWildcardExports;

    	var _interopRequireDefault = interopRequireDefaultExports;

    	hook.__esModule = true;
    	hook.useUncontrolledProp = useUncontrolledProp;
    	hook.default = useUncontrolled;

    	var _extends3 = _interopRequireDefault(require_extends());

    	var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLooseExports);

    	var _react = React__default.default;

    	var Utils = _interopRequireWildcard(requireUtils());

    	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }

    	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (String )(input); }

    	function useUncontrolledProp(propValue, defaultValue, handler) {
    	  var wasPropRef = (0, _react.useRef)(propValue !== undefined);

    	  var _useState = (0, _react.useState)(defaultValue),
    	      stateValue = _useState[0],
    	      setState = _useState[1];

    	  var isProp = propValue !== undefined;
    	  var wasProp = wasPropRef.current;
    	  wasPropRef.current = isProp;
    	  /**
    	   * If a prop switches from controlled to Uncontrolled
    	   * reset its value to the defaultValue
    	   */

    	  if (!isProp && wasProp && stateValue !== defaultValue) {
    	    setState(defaultValue);
    	  }

    	  return [isProp ? propValue : stateValue, (0, _react.useCallback)(function (value) {
    	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    	      args[_key - 1] = arguments[_key];
    	    }

    	    if (handler) handler.apply(void 0, [value].concat(args));
    	    setState(value);
    	  }, [handler])];
    	}

    	function useUncontrolled(props, config) {
    	  return Object.keys(config).reduce(function (result, fieldName) {
    	    var _extends2;

    	    var _ref = result,
    	        defaultValue = _ref[Utils.defaultKey(fieldName)],
    	        propsValue = _ref[fieldName],
    	        rest = (0, _objectWithoutPropertiesLoose2.default)(_ref, [Utils.defaultKey(fieldName), fieldName].map(_toPropertyKey));

    	    var handlerName = config[fieldName];

    	    var _useUncontrolledProp = useUncontrolledProp(propsValue, defaultValue, props[handlerName]),
    	        value = _useUncontrolledProp[0],
    	        handler = _useUncontrolledProp[1];

    	    return (0, _extends3.default)({}, rest, (_extends2 = {}, _extends2[fieldName] = value, _extends2[handlerName] = handler, _extends2));
    	  }, props);
    	}
    	return hook;
    }

    var uncontrollable = {exports: {}};

    var inheritsLoose = {exports: {}};

    var hasRequiredInheritsLoose;

    function requireInheritsLoose () {
    	if (hasRequiredInheritsLoose) return inheritsLoose.exports;
    	hasRequiredInheritsLoose = 1;
    	(function (module) {
    		var setPrototypeOf = setPrototypeOfExports;
    		function _inheritsLoose(t, o) {
    		  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, setPrototypeOf(t, o);
    		}
    		module.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    	} (inheritsLoose));
    	return inheritsLoose.exports;
    }

    var reactLifecyclesCompat_cjs = {};

    var hasRequiredReactLifecyclesCompat_cjs;

    function requireReactLifecyclesCompat_cjs () {
    	if (hasRequiredReactLifecyclesCompat_cjs) return reactLifecyclesCompat_cjs;
    	hasRequiredReactLifecyclesCompat_cjs = 1;

    	Object.defineProperty(reactLifecyclesCompat_cjs, '__esModule', { value: true });

    	/**
    	 * Copyright (c) 2013-present, Facebook, Inc.
    	 *
    	 * This source code is licensed under the MIT license found in the
    	 * LICENSE file in the root directory of this source tree.
    	 */

    	function componentWillMount() {
    	  // Call this.constructor.gDSFP to support sub-classes.
    	  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
    	  if (state !== null && state !== undefined) {
    	    this.setState(state);
    	  }
    	}

    	function componentWillReceiveProps(nextProps) {
    	  // Call this.constructor.gDSFP to support sub-classes.
    	  // Use the setState() updater to ensure state isn't stale in certain edge cases.
    	  function updater(prevState) {
    	    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    	    return state !== null && state !== undefined ? state : null;
    	  }
    	  // Binding "this" is important for shallow renderer support.
    	  this.setState(updater.bind(this));
    	}

    	function componentWillUpdate(nextProps, nextState) {
    	  try {
    	    var prevProps = this.props;
    	    var prevState = this.state;
    	    this.props = nextProps;
    	    this.state = nextState;
    	    this.__reactInternalSnapshotFlag = true;
    	    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
    	      prevProps,
    	      prevState
    	    );
    	  } finally {
    	    this.props = prevProps;
    	    this.state = prevState;
    	  }
    	}

    	// React may warn about cWM/cWRP/cWU methods being deprecated.
    	// Add a flag to suppress these warnings for this special case.
    	componentWillMount.__suppressDeprecationWarning = true;
    	componentWillReceiveProps.__suppressDeprecationWarning = true;
    	componentWillUpdate.__suppressDeprecationWarning = true;

    	function polyfill(Component) {
    	  var prototype = Component.prototype;

    	  if (!prototype || !prototype.isReactComponent) {
    	    throw new Error('Can only polyfill class components');
    	  }

    	  if (
    	    typeof Component.getDerivedStateFromProps !== 'function' &&
    	    typeof prototype.getSnapshotBeforeUpdate !== 'function'
    	  ) {
    	    return Component;
    	  }

    	  // If new component APIs are defined, "unsafe" lifecycles won't be called.
    	  // Error if any of these lifecycles are present,
    	  // Because they would work differently between older and newer (16.3+) versions of React.
    	  var foundWillMountName = null;
    	  var foundWillReceivePropsName = null;
    	  var foundWillUpdateName = null;
    	  if (typeof prototype.componentWillMount === 'function') {
    	    foundWillMountName = 'componentWillMount';
    	  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    	    foundWillMountName = 'UNSAFE_componentWillMount';
    	  }
    	  if (typeof prototype.componentWillReceiveProps === 'function') {
    	    foundWillReceivePropsName = 'componentWillReceiveProps';
    	  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    	    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
    	  }
    	  if (typeof prototype.componentWillUpdate === 'function') {
    	    foundWillUpdateName = 'componentWillUpdate';
    	  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    	    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
    	  }
    	  if (
    	    foundWillMountName !== null ||
    	    foundWillReceivePropsName !== null ||
    	    foundWillUpdateName !== null
    	  ) {
    	    var componentName = Component.displayName || Component.name;
    	    var newApiName =
    	      typeof Component.getDerivedStateFromProps === 'function'
    	        ? 'getDerivedStateFromProps()'
    	        : 'getSnapshotBeforeUpdate()';

    	    throw Error(
    	      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
    	        componentName +
    	        ' uses ' +
    	        newApiName +
    	        ' but also contains the following legacy lifecycles:' +
    	        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
    	        (foundWillReceivePropsName !== null
    	          ? '\n  ' + foundWillReceivePropsName
    	          : '') +
    	        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
    	        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
    	        'https://fb.me/react-async-component-lifecycle-hooks'
    	    );
    	  }

    	  // React <= 16.2 does not support static getDerivedStateFromProps.
    	  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
    	  // Newer versions of React will ignore these lifecycles if gDSFP exists.
    	  if (typeof Component.getDerivedStateFromProps === 'function') {
    	    prototype.componentWillMount = componentWillMount;
    	    prototype.componentWillReceiveProps = componentWillReceiveProps;
    	  }

    	  // React <= 16.2 does not support getSnapshotBeforeUpdate.
    	  // As a workaround, use cWU to invoke the new lifecycle.
    	  // Newer versions of React will ignore that lifecycle if gSBU exists.
    	  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    	    if (typeof prototype.componentDidUpdate !== 'function') {
    	      throw new Error(
    	        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
    	      );
    	    }

    	    prototype.componentWillUpdate = componentWillUpdate;

    	    var componentDidUpdate = prototype.componentDidUpdate;

    	    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
    	      prevProps,
    	      prevState,
    	      maybeSnapshot
    	    ) {
    	      // 16.3+ will not execute our will-update method;
    	      // It will pass a snapshot value to did-update though.
    	      // Older versions will require our polyfilled will-update value.
    	      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
    	      // Because for <= 15.x versions this might be a "prevContext" object.
    	      // We also can't just check "__reactInternalSnapshot",
    	      // Because get-snapshot might return a falsy value.
    	      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
    	      var snapshot = this.__reactInternalSnapshotFlag
    	        ? this.__reactInternalSnapshot
    	        : maybeSnapshot;

    	      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    	    };
    	  }

    	  return Component;
    	}

    	reactLifecyclesCompat_cjs.polyfill = polyfill;
    	return reactLifecyclesCompat_cjs;
    }

    var hasRequiredUncontrollable;

    function requireUncontrollable () {
    	if (hasRequiredUncontrollable) return uncontrollable.exports;
    	hasRequiredUncontrollable = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		var _interopRequireWildcard = interopRequireWildcardExports;

    		exports.__esModule = true;
    		exports.default = uncontrollable;

    		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLooseExports);

    		var _extends3 = _interopRequireDefault(require_extends());

    		var _inheritsLoose2 = _interopRequireDefault(requireInheritsLoose());

    		var _react = _interopRequireDefault(React__default.default);

    		var _reactLifecyclesCompat = requireReactLifecyclesCompat_cjs();

    		var _invariant = _interopRequireDefault(browser);

    		var Utils = _interopRequireWildcard(requireUtils());

    		var _jsxFileName = "/Users/jquense/src/uncontrollable/src/uncontrollable.js";

    		function uncontrollable(Component, controlledValues, methods) {
    		  if (methods === void 0) {
    		    methods = [];
    		  }

    		  var displayName = Component.displayName || Component.name || 'Component';
    		  var canAcceptRef = Utils.canAcceptRef(Component);
    		  var controlledProps = Object.keys(controlledValues);
    		  var PROPS_TO_OMIT = controlledProps.map(Utils.defaultKey);
    		  !(canAcceptRef || !methods.length) ? (0, _invariant.default)(false, '[uncontrollable] stateless function components cannot pass through methods ' + 'because they have no associated instances. Check component: ' + displayName + ', ' + 'attempting to pass through methods: ' + methods.join(', '))  : void 0;

    		  var UncontrolledComponent =
    		  /*#__PURE__*/
    		  function (_React$Component) {
    		    (0, _inheritsLoose2.default)(UncontrolledComponent, _React$Component);

    		    function UncontrolledComponent() {
    		      var _this;

    		      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		        args[_key] = arguments[_key];
    		      }

    		      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    		      _this.handlers = Object.create(null);
    		      controlledProps.forEach(function (propName) {
    		        var handlerName = controlledValues[propName];

    		        var handleChange = function handleChange(value) {
    		          if (_this.props[handlerName]) {
    		            var _this$props;

    		            _this._notifying = true;

    		            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    		              args[_key2 - 1] = arguments[_key2];
    		            }

    		            (_this$props = _this.props)[handlerName].apply(_this$props, [value].concat(args));

    		            _this._notifying = false;
    		          }

    		          if (!_this.unmounted) _this.setState(function (_ref) {
    		            var _extends2;

    		            var values = _ref.values;
    		            return {
    		              values: (0, _extends3.default)(Object.create(null), values, (_extends2 = {}, _extends2[propName] = value, _extends2))
    		            };
    		          });
    		        };

    		        _this.handlers[handlerName] = handleChange;
    		      });
    		      if (methods.length) _this.attachRef = function (ref) {
    		        _this.inner = ref;
    		      };
    		      var values = Object.create(null);
    		      controlledProps.forEach(function (key) {
    		        values[key] = _this.props[Utils.defaultKey(key)];
    		      });
    		      _this.state = {
    		        values: values,
    		        prevProps: {}
    		      };
    		      return _this;
    		    }

    		    var _proto = UncontrolledComponent.prototype;

    		    _proto.shouldComponentUpdate = function shouldComponentUpdate() {
    		      //let setState trigger the update
    		      return !this._notifying;
    		    };

    		    UncontrolledComponent.getDerivedStateFromProps = function getDerivedStateFromProps(props, _ref2) {
    		      var values = _ref2.values,
    		          prevProps = _ref2.prevProps;
    		      var nextState = {
    		        values: (0, _extends3.default)(Object.create(null), values),
    		        prevProps: {}
    		      };
    		      controlledProps.forEach(function (key) {
    		        /**
    		         * If a prop switches from controlled to Uncontrolled
    		         * reset its value to the defaultValue
    		         */
    		        nextState.prevProps[key] = props[key];

    		        if (!Utils.isProp(props, key) && Utils.isProp(prevProps, key)) {
    		          nextState.values[key] = props[Utils.defaultKey(key)];
    		        }
    		      });
    		      return nextState;
    		    };

    		    _proto.componentWillUnmount = function componentWillUnmount() {
    		      this.unmounted = true;
    		    };

    		    _proto.render = function render() {
    		      var _this2 = this;

    		      var _this$props2 = this.props,
    		          innerRef = _this$props2.innerRef,
    		          props = (0, _objectWithoutPropertiesLoose2.default)(_this$props2, ["innerRef"]);
    		      PROPS_TO_OMIT.forEach(function (prop) {
    		        delete props[prop];
    		      });
    		      var newProps = {};
    		      controlledProps.forEach(function (propName) {
    		        var propValue = _this2.props[propName];
    		        newProps[propName] = propValue !== undefined ? propValue : _this2.state.values[propName];
    		      });
    		      return _react.default.createElement(Component, (0, _extends3.default)({}, props, newProps, this.handlers, {
    		        ref: innerRef || this.attachRef
    		      }));
    		    };

    		    return UncontrolledComponent;
    		  }(_react.default.Component);

    		  (0, _reactLifecyclesCompat.polyfill)(UncontrolledComponent);
    		  UncontrolledComponent.displayName = "Uncontrolled(" + displayName + ")";
    		  UncontrolledComponent.propTypes = (0, _extends3.default)({
    		    innerRef: function innerRef() {}
    		  }, Utils.uncontrolledPropTypes(controlledValues, displayName));
    		  methods.forEach(function (method) {
    		    UncontrolledComponent.prototype[method] = function $proxiedMethod() {
    		      var _this$inner;

    		      return (_this$inner = this.inner)[method].apply(_this$inner, arguments);
    		    };
    		  });
    		  var WrappedComponent = UncontrolledComponent;

    		  if (_react.default.forwardRef) {
    		    WrappedComponent = _react.default.forwardRef(function (props, ref) {
    		      return _react.default.createElement(UncontrolledComponent, (0, _extends3.default)({}, props, {
    		        innerRef: ref,
    		        __source: {
    		          fileName: _jsxFileName,
    		          lineNumber: 128
    		        },
    		        __self: this
    		      }));
    		    });
    		    WrappedComponent.propTypes = UncontrolledComponent.propTypes;
    		  }

    		  WrappedComponent.ControlledComponent = Component;
    		  /**
    		   * useful when wrapping a Component and you want to control
    		   * everything
    		   */

    		  WrappedComponent.deferControlTo = function (newComponent, additions, nextMethods) {
    		    if (additions === void 0) {
    		      additions = {};
    		    }

    		    return uncontrollable(newComponent, (0, _extends3.default)({}, controlledValues, additions), nextMethods);
    		  };

    		  return WrappedComponent;
    		}

    		module.exports = exports["default"]; 
    	} (uncontrollable, uncontrollable.exports));
    	return uncontrollable.exports;
    }

    var _interopRequireDefault$J = interopRequireDefaultExports;

    var _interopRequireWildcard$d = interopRequireWildcardExports;

    cjs$1.__esModule = true;
    cjs$1.useUncontrolledProp = cjs$1.uncontrollable = cjs$1.useUncontrolled = void 0;

    var _hook = _interopRequireWildcard$d(requireHook());

    cjs$1.useUncontrolled = _hook.default;
    cjs$1.useUncontrolledProp = _hook.useUncontrolledProp;

    var _uncontrollable$1 = _interopRequireDefault$J(requireUncontrollable());

    cjs$1.uncontrollable = _uncontrollable$1.default;

    var clsx = {exports: {}};

    function e(r){var o,t,f="";if("string"==typeof r||"number"==typeof r)f+=r;else if("object"==typeof r)if(Array.isArray(r))for(o=0;o<r.length;o++)r[o]&&(t=e(r[o]))&&(f&&(f+=" "),f+=t);else for(o in r)r[o]&&(f&&(f+=" "),f+=o);return f}function r(){for(var r,o,t=0,f="";t<arguments.length;)(r=arguments[t++])&&(o=e(r))&&(f&&(f+=" "),f+=o);return f}clsx.exports=r,clsx.exports.clsx=r;

    var clsxExports = clsx.exports;

    var propTypes = {};

    var constants = {};

    Object.defineProperty(constants, "__esModule", {
      value: true
    });
    constants.views = constants.navigate = void 0;
    constants.navigate = {
      PREVIOUS: 'PREV',
      NEXT: 'NEXT',
      TODAY: 'TODAY',
      DATE: 'DATE'
    };
    constants.views = {
      MONTH: 'month',
      WEEK: 'week',
      WORK_WEEK: 'work_week',
      DAY: 'day',
      AGENDA: 'agenda'
    };

    var _interopRequireDefault$I = interopRequireDefaultExports.default;
    Object.defineProperty(propTypes, "__esModule", {
      value: true
    });
    propTypes.views = propTypes.dateRangeFormat = propTypes.dateFormat = propTypes.accessor = propTypes.DayLayoutAlgorithmPropType = void 0;
    var _propTypes$4 = _interopRequireDefault$I(require$$4__default.default);
    var _constants$9 = constants;
    var viewNames$1 = Object.keys(_constants$9.views).map(function (k) {
      return _constants$9.views[k];
    });
    propTypes.accessor = _propTypes$4.default.oneOfType([_propTypes$4.default.string, _propTypes$4.default.func]);
    propTypes.dateFormat = _propTypes$4.default.any;
    propTypes.dateRangeFormat = _propTypes$4.default.func;

    /**
     * accepts either an array of builtin view names:
     *
     * ```
     * views={['month', 'day', 'agenda']}
     * ```
     *
     * or an object hash of the view name and the component (or boolean for builtin)
     *
     * ```
     * views={{
     *   month: true,
     *   week: false,
     *   workweek: WorkWeekViewComponent,
     * }}
     * ```
     */

    propTypes.views = _propTypes$4.default.oneOfType([_propTypes$4.default.arrayOf(_propTypes$4.default.oneOf(viewNames$1)), _propTypes$4.default.objectOf(function (prop, key) {
      var isBuiltinView = viewNames$1.indexOf(key) !== -1 && typeof prop[key] === 'boolean';
      if (isBuiltinView) {
        return null;
      } else {
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }
        return _propTypes$4.default.elementType.apply(_propTypes$4.default, [prop, key].concat(args));
      }
    })]);
    propTypes.DayLayoutAlgorithmPropType = _propTypes$4.default.oneOfType([_propTypes$4.default.oneOf(['overlap', 'no-overlap']), _propTypes$4.default.func]);

    var helpers = {};

    Object.defineProperty(helpers, "__esModule", {
      value: true
    });
    helpers.instanceId = instanceId;
    helpers.isFirstFocusedRender = isFirstFocusedRender;
    helpers.notify = notify;
    var idCount = 0;
    function uniqueId(prefix) {
      return '' + ((prefix) + ++idCount);
    }
    function notify(handler, args) {
      handler && handler.apply(null, [].concat(args));
    }
    function instanceId(component) {
      var suffix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      component.__id || (component.__id = uniqueId('rw_'));
      return (component.props.id || component.__id) + suffix;
    }
    function isFirstFocusedRender(component) {
      return component._firstFocus || component.state.focused && (component._firstFocus = true);
    }

    var localizer$1 = {};

    var dates$3 = {};

    var index_cjs = {};

    Object.defineProperty(index_cjs, '__esModule', { value: true });

    var MILI    = 'milliseconds'
      , SECONDS = 'seconds'
      , MINUTES = 'minutes'
      , HOURS   = 'hours'
      , DAY     = 'day'
      , WEEK    = 'week'
      , MONTH   = 'month'
      , YEAR    = 'year'
      , DECADE  = 'decade'
      , CENTURY = 'century';

    var multiplierMilli = {
      'milliseconds': 1,
      'seconds': 1000,
      'minutes': 60 * 1000,
      'hours': 60 * 60 * 1000,
      'day': 24 * 60 * 60 * 1000,
      'week': 7 * 24 * 60 * 60 * 1000 
    };

    var multiplierMonth = {
      'month': 1,
      'year': 12,
      'decade': 10 * 12,
      'century': 100 * 12
    };

    function daysOf(year) {
      return [31, daysInFeb(year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    }

    function daysInFeb(year) {
      return (
          year % 4 === 0 
          && year % 100 !== 0
        ) || year % 400 === 0
          ? 29
          : 28
    }

    function add(d, num, unit) {
      d = new Date(d);

      switch (unit){
        case MILI:
        case SECONDS:
        case MINUTES:
        case HOURS:
        case DAY:
        case WEEK:
          return addMillis(d, num * multiplierMilli[unit])
        case MONTH:
        case YEAR:
        case DECADE:
        case CENTURY:
          return addMonths(d, num * multiplierMonth[unit])
      }

      throw new TypeError('Invalid units: "' + unit + '"')
    }

    function addMillis(d, num) {
      var nextDate = new Date(+(d) + num);

      return solveDST(d, nextDate)
    }

    function addMonths(d, num) {
      var year = d.getFullYear()
        , month = d.getMonth()
        , day = d.getDate()
        , totalMonths = year * 12 + month + num
        , nextYear = Math.trunc(totalMonths / 12)
        , nextMonth = totalMonths % 12
        , nextDay = Math.min(day, daysOf(nextYear)[nextMonth]);

      var nextDate = new Date(d);
      nextDate.setFullYear(nextYear);

      // To avoid a bug when sets the Feb month
      // with a date > 28 or date > 29 (leap year)
      nextDate.setDate(1);

      nextDate.setMonth(nextMonth);
      nextDate.setDate(nextDay);

      return nextDate
    }

    function solveDST(currentDate, nextDate) {
      var currentOffset = currentDate.getTimezoneOffset()
        , nextOffset = nextDate.getTimezoneOffset();

      // if is DST, add the difference in minutes
      // else the difference is zero
      var diffMinutes = (nextOffset - currentOffset);

      return new Date(+(nextDate) + diffMinutes * multiplierMilli['minutes'])
    }

    function subtract(d, num, unit) {
      return add(d, -num, unit)
    }

    function startOf(d, unit, firstOfWeek) {
      d = new Date(d);

      switch (unit) {
        case CENTURY:
        case DECADE:
        case YEAR:
            d = month(d, 0);
        case MONTH:
            d = date(d, 1);
        case WEEK:
        case DAY:
            d = hours(d, 0);
        case HOURS:
            d = minutes(d, 0);
        case MINUTES:
            d = seconds(d, 0);
        case SECONDS:
            d = milliseconds(d, 0);
      }

      if (unit === DECADE)
        d = subtract(d, year(d) % 10, 'year');

      if (unit === CENTURY)
        d = subtract(d, year(d) % 100, 'year');

      if (unit === WEEK)
        d = weekday(d, 0, firstOfWeek);

      return d
    }

    function endOf(d, unit, firstOfWeek){
      d = new Date(d);
      d = startOf(d, unit, firstOfWeek);
      switch (unit) {
        case CENTURY:
        case DECADE:
        case YEAR:
        case MONTH:
        case WEEK:
          d = add(d, 1, unit);
          d = subtract(d, 1, DAY);
          d.setHours(23, 59, 59, 999);
          break;
        case DAY:
          d.setHours(23, 59, 59, 999);
          break;
        case HOURS:
        case MINUTES:
        case SECONDS:
          d = add(d, 1, unit);
          d = subtract(d, 1, MILI);
      }
      return d
    }

    var eq$6 =  createComparer(function(a, b){ return a === b });
    var neq = createComparer(function(a, b){ return a !== b });
    var gt =  createComparer(function(a, b){ return a > b });
    var gte = createComparer(function(a, b){ return a >= b });
    var lt =  createComparer(function(a, b){ return a < b });
    var lte = createComparer(function(a, b){ return a <= b });

    function min(){
      return new Date(Math.min.apply(Math, arguments))
    }

    function max(){
      return new Date(Math.max.apply(Math, arguments))
    }

    function inRange$1(day, min, max, unit){
      unit = unit || 'day';

      return (!min || gte(day, min, unit))
          && (!max || lte(day, max, unit))
    }

    var milliseconds = createAccessor('Milliseconds');
    var seconds =      createAccessor('Seconds');
    var minutes =      createAccessor('Minutes');
    var hours =        createAccessor('Hours');
    var day =          createAccessor('Day');
    var date =         createAccessor('Date');
    var month =        createAccessor('Month');
    var year =         createAccessor('FullYear');

    function decade(d, val) {
      return val === undefined
        ? year(startOf(d, DECADE))
        : add(d, val + 10, YEAR);
    }

    function century(d, val) {
      return val === undefined
        ? year(startOf(d, CENTURY))
        : add(d, val + 100, YEAR);
    }

    function weekday(d, val, firstDay) {
        var w = (day(d) + 7 - (firstDay || 0) ) % 7;

        return val === undefined
          ? w
          : add(d, val - w, DAY);
    }

    function diff(date1, date2, unit, asFloat) {
      var dividend, divisor, result;

      switch (unit) {
        case MILI:
        case SECONDS:
        case MINUTES:
        case HOURS:
        case DAY:
        case WEEK:
          dividend = date2.getTime() - date1.getTime(); break;
        case MONTH:
        case YEAR:
        case DECADE:
        case CENTURY:
          dividend = (year(date2) - year(date1)) * 12 + month(date2) - month(date1); break;
        default:
          throw new TypeError('Invalid units: "' + unit + '"');
      }

      switch (unit) {
        case MILI:
            divisor = 1; break;
        case SECONDS:
            divisor = 1000; break;
        case MINUTES:
            divisor = 1000 * 60; break;
        case HOURS:
            divisor = 1000 * 60 * 60; break;
        case DAY:
            divisor = 1000 * 60 * 60 * 24; break;
        case WEEK:
            divisor = 1000 * 60 * 60 * 24 * 7; break;
        case MONTH:
            divisor = 1; break;
        case YEAR:
            divisor = 12; break;
        case DECADE:
            divisor = 120; break;
        case CENTURY:
            divisor = 1200; break;
        default:
          throw new TypeError('Invalid units: "' + unit + '"');
      }

      result = dividend / divisor;

      return asFloat ? result : Math.round(result);
    }

    function createAccessor(method){
      var hourLength = (function(method) {  
        switch(method) {
          case 'Milliseconds':
            return 3600000;
          case 'Seconds':
            return 3600;
          case 'Minutes':
            return 60;
          case 'Hours':
            return 1;
          default:
            return null;
        }
      })(method);
      
      return function(d, val){
        if (val === undefined)
          return d['get' + method]()

        var dateOut = new Date(d);
        dateOut['set' + method](val);
        
        if(hourLength && dateOut['get'+method]() != val && (method === 'Hours' || val >=hourLength && (dateOut.getHours()-d.getHours()<Math.floor(val/hourLength))) ){
          //Skip DST hour, if it occurs
          dateOut['set'+method](val+hourLength);
        }
        
        return dateOut
      }
    }

    function createComparer(operator) {
      return function (a, b, unit) {
        return operator(+startOf(a, unit), +startOf(b, unit))
      };
    }

    index_cjs.add = add;
    index_cjs.century = century;
    index_cjs.date = date;
    index_cjs.day = day;
    index_cjs.decade = decade;
    index_cjs.diff = diff;
    index_cjs.endOf = endOf;
    index_cjs.eq = eq$6;
    index_cjs.gt = gt;
    index_cjs.gte = gte;
    index_cjs.hours = hours;
    index_cjs.inRange = inRange$1;
    index_cjs.lt = lt;
    index_cjs.lte = lte;
    index_cjs.max = max;
    index_cjs.milliseconds = milliseconds;
    index_cjs.min = min;
    index_cjs.minutes = minutes;
    index_cjs.month = month;
    index_cjs.neq = neq;
    index_cjs.seconds = seconds;
    index_cjs.startOf = startOf;
    index_cjs.subtract = subtract;
    index_cjs.weekday = weekday;
    index_cjs.year = year;

    (function (exports) {

    	var _interopRequireWildcard = interopRequireWildcardExports.default;
    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	Object.defineProperty(exports, "add", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.add;
    	  }
    	});
    	exports.ceil = ceil;
    	exports.diff = diff;
    	exports.duration = duration;
    	Object.defineProperty(exports, "endOf", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.endOf;
    	  }
    	});
    	Object.defineProperty(exports, "eq", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.eq;
    	  }
    	});
    	exports.eqTime = eqTime;
    	exports.firstVisibleDay = firstVisibleDay;
    	Object.defineProperty(exports, "gt", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.gt;
    	  }
    	});
    	Object.defineProperty(exports, "gte", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.gte;
    	  }
    	});
    	Object.defineProperty(exports, "hours", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.hours;
    	  }
    	});
    	Object.defineProperty(exports, "inRange", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.inRange;
    	  }
    	});
    	exports.isJustDate = isJustDate;
    	exports.lastVisibleDay = lastVisibleDay;
    	Object.defineProperty(exports, "lt", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.lt;
    	  }
    	});
    	Object.defineProperty(exports, "lte", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.lte;
    	  }
    	});
    	Object.defineProperty(exports, "max", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.max;
    	  }
    	});
    	exports.merge = merge;
    	Object.defineProperty(exports, "milliseconds", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.milliseconds;
    	  }
    	});
    	Object.defineProperty(exports, "min", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.min;
    	  }
    	});
    	Object.defineProperty(exports, "minutes", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.minutes;
    	  }
    	});
    	Object.defineProperty(exports, "month", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.month;
    	  }
    	});
    	exports.monthsInYear = monthsInYear;
    	Object.defineProperty(exports, "neq", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.neq;
    	  }
    	});
    	exports.range = range;
    	Object.defineProperty(exports, "seconds", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.seconds;
    	  }
    	});
    	Object.defineProperty(exports, "startOf", {
    	  enumerable: true,
    	  get: function get() {
    	    return dates.startOf;
    	  }
    	});
    	exports.today = today;
    	exports.tomorrow = tomorrow;
    	exports.total = total;
    	exports.visibleDays = visibleDays;
    	exports.week = week;
    	exports.yesterday = yesterday;
    	var dates = _interopRequireWildcard(index_cjs);
    	/* eslint no-fallthrough: off */

    	var MILLI = {
    	  seconds: 1000,
    	  minutes: 1000 * 60,
    	  hours: 1000 * 60 * 60,
    	  day: 1000 * 60 * 60 * 24
    	};
    	var MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    	function monthsInYear(year) {
    	  var date = new Date(year, 0, 1);
    	  return MONTHS.map(function (i) {
    	    return dates.month(date, i);
    	  });
    	}
    	function firstVisibleDay(date, localizer) {
    	  var firstOfMonth = dates.startOf(date, 'month');
    	  return dates.startOf(firstOfMonth, 'week', localizer.startOfWeek());
    	}
    	function lastVisibleDay(date, localizer) {
    	  var endOfMonth = dates.endOf(date, 'month');
    	  return dates.endOf(endOfMonth, 'week', localizer.startOfWeek());
    	}
    	function visibleDays(date, localizer) {
    	  var current = firstVisibleDay(date, localizer),
    	    last = lastVisibleDay(date, localizer),
    	    days = [];
    	  while (dates.lte(current, last, 'day')) {
    	    days.push(current);
    	    current = dates.add(current, 1, 'day');
    	  }
    	  return days;
    	}
    	function ceil(date, unit) {
    	  var floor = dates.startOf(date, unit);
    	  return dates.eq(floor, date) ? floor : dates.add(floor, 1, unit);
    	}
    	function range(start, end) {
    	  var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';
    	  var current = start,
    	    days = [];
    	  while (dates.lte(current, end, unit)) {
    	    days.push(current);
    	    current = dates.add(current, 1, unit);
    	  }
    	  return days;
    	}
    	function merge(date, time) {
    	  if (time == null && date == null) return null;
    	  if (time == null) time = new Date();
    	  if (date == null) date = new Date();
    	  date = dates.startOf(date, 'day');
    	  date = dates.hours(date, dates.hours(time));
    	  date = dates.minutes(date, dates.minutes(time));
    	  date = dates.seconds(date, dates.seconds(time));
    	  return dates.milliseconds(date, dates.milliseconds(time));
    	}
    	function eqTime(dateA, dateB) {
    	  return dates.hours(dateA) === dates.hours(dateB) && dates.minutes(dateA) === dates.minutes(dateB) && dates.seconds(dateA) === dates.seconds(dateB);
    	}
    	function isJustDate(date) {
    	  return dates.hours(date) === 0 && dates.minutes(date) === 0 && dates.seconds(date) === 0 && dates.milliseconds(date) === 0;
    	}
    	function duration(start, end, unit, firstOfWeek) {
    	  if (unit === 'day') unit = 'date';
    	  return Math.abs(
    	  // eslint-disable-next-line import/namespace
    	  dates[unit](start, undefined, firstOfWeek) -
    	  // eslint-disable-next-line import/namespace
    	  dates[unit](end, undefined, firstOfWeek));
    	}
    	function diff(dateA, dateB, unit) {
    	  if (!unit || unit === 'milliseconds') return Math.abs(+dateA - +dateB);

    	  // the .round() handles an edge case
    	  // with DST where the total won't be exact
    	  // since one day in the range may be shorter/longer by an hour
    	  return Math.round(Math.abs(+dates.startOf(dateA, unit) / MILLI[unit] - +dates.startOf(dateB, unit) / MILLI[unit]));
    	}
    	function total(date, unit) {
    	  var ms = date.getTime(),
    	    div = 1;
    	  switch (unit) {
    	    case 'week':
    	      div *= 7;
    	    case 'day':
    	      div *= 24;
    	    case 'hours':
    	      div *= 60;
    	    case 'minutes':
    	      div *= 60;
    	    case 'seconds':
    	      div *= 1000;
    	  }
    	  return ms / div;
    	}
    	function week(date) {
    	  var d = new Date(date);
    	  d.setHours(0, 0, 0);
    	  d.setDate(d.getDate() + 4 - (d.getDay() || 7));
    	  return Math.ceil(((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7);
    	}
    	function today() {
    	  return dates.startOf(new Date(), 'day');
    	}
    	function yesterday() {
    	  return dates.add(dates.startOf(new Date(), 'day'), -1, 'day');
    	}
    	function tomorrow() {
    	  return dates.add(dates.startOf(new Date(), 'day'), 1, 'day');
    	} 
    } (dates$3));

    var _interopRequireDefault$H = interopRequireDefaultExports.default;
    Object.defineProperty(localizer$1, "__esModule", {
      value: true
    });
    localizer$1.DateLocalizer = void 0;
    localizer$1.mergeWithDefaults = mergeWithDefaults;
    var _objectSpread2$9 = _interopRequireDefault$H(objectSpread2Exports);
    var _createClass2$h = _interopRequireDefault$H(createClassExports);
    var _classCallCheck2$h = _interopRequireDefault$H(classCallCheckExports);
    var _propTypes$3 = _interopRequireDefault$H(require$$4__default.default);
    var _invariant$1 = _interopRequireDefault$H(browser);
    var _dates = dates$3;
    var localePropType = _propTypes$3.default.oneOfType([_propTypes$3.default.string, _propTypes$3.default.func]);
    function _format(localizer, formatter, value, format, culture) {
      var result = typeof format === 'function' ? format(value, culture, localizer) : formatter.call(localizer, value, format, culture);
      (0, _invariant$1.default)(result == null || typeof result === 'string', '`localizer format(..)` must return a string, null, or undefined');
      return result;
    }

    /**
     * This date conversion was moved out of TimeSlots.js, to
     * allow for localizer override
     * @param {Date} dt - The date to start from
     * @param {Number} minutesFromMidnight
     * @param {Number} offset
     * @returns {Date}
     */
    function getSlotDate(dt, minutesFromMidnight, offset) {
      return new Date(dt.getFullYear(), dt.getMonth(), dt.getDate(), 0, minutesFromMidnight + offset, 0, 0);
    }
    function getDstOffset(start, end) {
      return start.getTimezoneOffset() - end.getTimezoneOffset();
    }

    // if the start is on a DST-changing day but *after* the moment of DST
    // transition we need to add those extra minutes to our minutesFromMidnight
    function getTotalMin(start, end) {
      return (0, _dates.diff)(start, end, 'minutes') + getDstOffset(start, end);
    }
    function getMinutesFromMidnight(start) {
      var daystart = (0, _dates.startOf)(start, 'day');
      return (0, _dates.diff)(daystart, start, 'minutes') + getDstOffset(daystart, start);
    }

    // These two are used by DateSlotMetrics
    function continuesPrior(start, first) {
      return (0, _dates.lt)(start, first, 'day');
    }
    function continuesAfter(start, end, last) {
      var singleDayDuration = (0, _dates.eq)(start, end, 'minutes');
      return singleDayDuration ? (0, _dates.gte)(end, last, 'minutes') : (0, _dates.gt)(end, last, 'minutes');
    }
    function daySpan(start, end) {
      return (0, _dates.duration)(start, end, 'day');
    }

    // These two are used by eventLevels
    function sortEvents$1(_ref) {
      var _ref$evtA = _ref.evtA,
        aStart = _ref$evtA.start,
        aEnd = _ref$evtA.end,
        aAllDay = _ref$evtA.allDay,
        _ref$evtB = _ref.evtB,
        bStart = _ref$evtB.start,
        bEnd = _ref$evtB.end,
        bAllDay = _ref$evtB.allDay;
      var startSort = +(0, _dates.startOf)(aStart, 'day') - +(0, _dates.startOf)(bStart, 'day');
      var durA = daySpan(aStart, aEnd);
      var durB = daySpan(bStart, bEnd);
      return startSort ||
      // sort by start Day first
      durB - durA ||
      // events spanning multiple days go first
      !!bAllDay - !!aAllDay ||
      // then allDay single day events
      +aStart - +bStart ||
      // then sort by start time
      +aEnd - +bEnd // then sort by end time
      ;
    }
    function inEventRange(_ref2) {
      var _ref2$event = _ref2.event,
        start = _ref2$event.start,
        end = _ref2$event.end,
        _ref2$range = _ref2.range,
        rangeStart = _ref2$range.start,
        rangeEnd = _ref2$range.end;
      var eStart = (0, _dates.startOf)(start, 'day');
      var startsBeforeEnd = (0, _dates.lte)(eStart, rangeEnd, 'day');
      // when the event is zero duration we need to handle a bit differently
      var sameMin = (0, _dates.neq)(eStart, end, 'minutes');
      var endsAfterStart = sameMin ? (0, _dates.gt)(end, rangeStart, 'minutes') : (0, _dates.gte)(end, rangeStart, 'minutes');
      return startsBeforeEnd && endsAfterStart;
    }

    // other localizers treats 'day' and 'date' equality very differently, so we
    // abstract the change the 'localizer.eq(date1, date2, 'day') into this
    // new method, where they can be treated correctly by the localizer overrides
    function isSameDate(date1, date2) {
      return (0, _dates.eq)(date1, date2, 'day');
    }
    function startAndEndAreDateOnly(start, end) {
      return (0, _dates.isJustDate)(start) && (0, _dates.isJustDate)(end);
    }
    localizer$1.DateLocalizer = /*#__PURE__*/(0, _createClass2$h.default)(function DateLocalizer(spec) {
      var _this = this;
      (0, _classCallCheck2$h.default)(this, DateLocalizer);
      (0, _invariant$1.default)(typeof spec.format === 'function', 'date localizer `format(..)` must be a function');
      (0, _invariant$1.default)(typeof spec.firstOfWeek === 'function', 'date localizer `firstOfWeek(..)` must be a function');
      this.propType = spec.propType || localePropType;
      this.formats = spec.formats;
      this.format = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _format.apply(void 0, [_this, spec.format].concat(args));
      };
      // These date arithmetic methods can be overriden by the localizer
      this.startOfWeek = spec.firstOfWeek;
      this.merge = spec.merge || _dates.merge;
      this.inRange = spec.inRange || _dates.inRange;
      this.lt = spec.lt || _dates.lt;
      this.lte = spec.lte || _dates.lte;
      this.gt = spec.gt || _dates.gt;
      this.gte = spec.gte || _dates.gte;
      this.eq = spec.eq || _dates.eq;
      this.neq = spec.neq || _dates.neq;
      this.startOf = spec.startOf || _dates.startOf;
      this.endOf = spec.endOf || _dates.endOf;
      this.add = spec.add || _dates.add;
      this.range = spec.range || _dates.range;
      this.diff = spec.diff || _dates.diff;
      this.ceil = spec.ceil || _dates.ceil;
      this.min = spec.min || _dates.min;
      this.max = spec.max || _dates.max;
      this.minutes = spec.minutes || _dates.minutes;
      this.daySpan = spec.daySpan || daySpan;
      this.firstVisibleDay = spec.firstVisibleDay || _dates.firstVisibleDay;
      this.lastVisibleDay = spec.lastVisibleDay || _dates.lastVisibleDay;
      this.visibleDays = spec.visibleDays || _dates.visibleDays;
      this.getSlotDate = spec.getSlotDate || getSlotDate;
      this.getTimezoneOffset = spec.getTimezoneOffset || function (value) {
        return value.getTimezoneOffset();
      };
      this.getDstOffset = spec.getDstOffset || getDstOffset;
      this.getTotalMin = spec.getTotalMin || getTotalMin;
      this.getMinutesFromMidnight = spec.getMinutesFromMidnight || getMinutesFromMidnight;
      this.continuesPrior = spec.continuesPrior || continuesPrior;
      this.continuesAfter = spec.continuesAfter || continuesAfter;
      this.sortEvents = spec.sortEvents || sortEvents$1;
      this.inEventRange = spec.inEventRange || inEventRange;
      this.isSameDate = spec.isSameDate || isSameDate;
      this.startAndEndAreDateOnly = spec.startAndEndAreDateOnly || startAndEndAreDateOnly;
      this.segmentOffset = spec.browserTZOffset ? spec.browserTZOffset() : 0;
    });
    function mergeWithDefaults(localizer, culture, formatOverrides, messages) {
      var formats = (0, _objectSpread2$9.default)((0, _objectSpread2$9.default)({}, localizer.formats), formatOverrides);
      return (0, _objectSpread2$9.default)((0, _objectSpread2$9.default)({}, localizer), {}, {
        messages: messages,
        startOfWeek: function startOfWeek() {
          return localizer.startOfWeek(culture);
        },
        format: function format(value, _format2) {
          return localizer.format(value, formats[_format2] || _format2, culture);
        }
      });
    }

    var messages$1 = {};

    var _interopRequireDefault$G = interopRequireDefaultExports.default;
    Object.defineProperty(messages$1, "__esModule", {
      value: true
    });
    messages$1.default = messages;
    var _objectSpread2$8 = _interopRequireDefault$G(objectSpread2Exports);
    var defaultMessages = {
      date: 'Date',
      time: 'Time',
      event: 'Event',
      allDay: 'All Day',
      week: 'Week',
      work_week: 'Work Week',
      day: 'Day',
      month: 'Month',
      previous: 'Back',
      next: 'Next',
      yesterday: 'Yesterday',
      tomorrow: 'Tomorrow',
      today: 'Today',
      agenda: 'Agenda',
      noEventsInRange: 'There are no events in this range.',
      showMore: function showMore(total) {
        return "+".concat(total, " more");
      }
    };
    function messages(msgs) {
      return (0, _objectSpread2$8.default)((0, _objectSpread2$8.default)({}, defaultMessages), msgs);
    }

    var move = {};

    var Views = {};

    var Month = {};

    var toConsumableArray = {exports: {}};

    var arrayWithoutHoles = {exports: {}};

    (function (module) {
    	var arrayLikeToArray = arrayLikeToArrayExports;
    	function _arrayWithoutHoles(r) {
    	  if (Array.isArray(r)) return arrayLikeToArray(r);
    	}
    	module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (arrayWithoutHoles));

    var arrayWithoutHolesExports = arrayWithoutHoles.exports;

    var iterableToArray = {exports: {}};

    (function (module) {
    	function _iterableToArray(r) {
    	  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
    	}
    	module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (iterableToArray));

    var iterableToArrayExports = iterableToArray.exports;

    var nonIterableSpread = {exports: {}};

    (function (module) {
    	function _nonIterableSpread() {
    	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    	}
    	module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (nonIterableSpread));

    var nonIterableSpreadExports = nonIterableSpread.exports;

    (function (module) {
    	var arrayWithoutHoles = arrayWithoutHolesExports;
    	var iterableToArray = iterableToArrayExports;
    	var unsupportedIterableToArray = unsupportedIterableToArrayExports;
    	var nonIterableSpread = nonIterableSpreadExports;
    	function _toConsumableArray(r) {
    	  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();
    	}
    	module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (toConsumableArray));

    var toConsumableArrayExports = toConsumableArray.exports;

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */

    function baseSlice$2(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    var _baseSlice = baseSlice$2;

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */

    function eq$5(value, other) {
      return value === other || (value !== value && other !== other);
    }

    var eq_1 = eq$5;

    /** Detect free variable `global` from Node.js. */

    var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    var _freeGlobal = freeGlobal$1;

    var freeGlobal = _freeGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root$8 = freeGlobal || freeSelf || Function('return this')();

    var _root = root$8;

    var root$7 = _root;

    /** Built-in value references. */
    var Symbol$7 = root$7.Symbol;

    var _Symbol = Symbol$7;

    var Symbol$6 = _Symbol;

    /** Used for built-in method references. */
    var objectProto$g = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$d = objectProto$g.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$1 = objectProto$g.toString;

    /** Built-in value references. */
    var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : undefined;

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag$1(value) {
      var isOwn = hasOwnProperty$d.call(value, symToStringTag$1),
          tag = value[symToStringTag$1];

      try {
        value[symToStringTag$1] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString$1.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }

    var _getRawTag = getRawTag$1;

    /** Used for built-in method references. */

    var objectProto$f = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto$f.toString;

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString$1(value) {
      return nativeObjectToString.call(value);
    }

    var _objectToString = objectToString$1;

    var Symbol$5 = _Symbol,
        getRawTag = _getRawTag,
        objectToString = _objectToString;

    /** `Object#toString` result references. */
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';

    /** Built-in value references. */
    var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : undefined;

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag$6(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    var _baseGetTag = baseGetTag$6;

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */

    function isObject$9(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    var isObject_1 = isObject$9;

    var baseGetTag$5 = _baseGetTag,
        isObject$8 = isObject_1;

    /** `Object#toString` result references. */
    var asyncTag = '[object AsyncFunction]',
        funcTag$2 = '[object Function]',
        genTag$1 = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction$4(value) {
      if (!isObject$8(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag$5(value);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }

    var isFunction_1 = isFunction$4;

    /** Used as references for various `Number` constants. */

    var MAX_SAFE_INTEGER$1 = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength$3(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
    }

    var isLength_1 = isLength$3;

    var isFunction$3 = isFunction_1,
        isLength$2 = isLength_1;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike$5(value) {
      return value != null && isLength$2(value.length) && !isFunction$3(value);
    }

    var isArrayLike_1 = isArrayLike$5;

    /** Used as references for various `Number` constants. */

    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex$3(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    var _isIndex = isIndex$3;

    var eq$4 = eq_1,
        isArrayLike$4 = isArrayLike_1,
        isIndex$2 = _isIndex,
        isObject$7 = isObject_1;

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall$4(value, index, object) {
      if (!isObject$7(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike$4(object) && isIndex$2(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq$4(object[index], value);
      }
      return false;
    }

    var _isIterateeCall = isIterateeCall$4;

    /** Used to match a single whitespace character. */

    var reWhitespace = /\s/;

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */
    function trimmedEndIndex$1(string) {
      var index = string.length;

      while (index-- && reWhitespace.test(string.charAt(index))) {}
      return index;
    }

    var _trimmedEndIndex = trimmedEndIndex$1;

    var trimmedEndIndex = _trimmedEndIndex;

    /** Used to match leading whitespace. */
    var reTrimStart = /^\s+/;

    /**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */
    function baseTrim$1(string) {
      return string
        ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
        : string;
    }

    var _baseTrim = baseTrim$1;

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */

    function isObjectLike$8(value) {
      return value != null && typeof value == 'object';
    }

    var isObjectLike_1 = isObjectLike$8;

    var baseGetTag$4 = _baseGetTag,
        isObjectLike$7 = isObjectLike_1;

    /** `Object#toString` result references. */
    var symbolTag$3 = '[object Symbol]';

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol$5(value) {
      return typeof value == 'symbol' ||
        (isObjectLike$7(value) && baseGetTag$4(value) == symbolTag$3);
    }

    var isSymbol_1 = isSymbol$5;

    var baseTrim = _baseTrim,
        isObject$6 = isObject_1,
        isSymbol$4 = isSymbol_1;

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber$1(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol$4(value)) {
        return NAN;
      }
      if (isObject$6(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject$6(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    var toNumber_1 = toNumber$1;

    var toNumber = toNumber_1;

    /** Used as references for various `Number` constants. */
    var INFINITY$2 = 1 / 0,
        MAX_INTEGER = 1.7976931348623157e+308;

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite$2(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY$2 || value === -INFINITY$2) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    var toFinite_1 = toFinite$2;

    var toFinite$1 = toFinite_1;

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger$3(value) {
      var result = toFinite$1(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    var toInteger_1 = toInteger$3;

    var baseSlice$1 = _baseSlice,
        isIterateeCall$3 = _isIterateeCall,
        toInteger$2 = toInteger_1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil$1 = Math.ceil,
        nativeMax$3 = Math.max;

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall$3(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax$3(toInteger$2(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil$1(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice$1(array, index, (index += size));
      }
      return result;
    }

    var chunk_1 = chunk;

    var position = {exports: {}};

    var css = {exports: {}};

    var getComputedStyle = {exports: {}};

    var ownerWindow = {exports: {}};

    var ownerDocument$1 = {exports: {}};

    var hasRequiredOwnerDocument$1;

    function requireOwnerDocument$1 () {
    	if (hasRequiredOwnerDocument$1) return ownerDocument$1.exports;
    	hasRequiredOwnerDocument$1 = 1;
    	(function (module, exports) {

    		exports.__esModule = true;
    		exports.default = ownerDocument;

    		/**
    		 * Returns the owner document of a given element.
    		 * 
    		 * @param node the element
    		 */
    		function ownerDocument(node) {
    		  return node && node.ownerDocument || document;
    		}

    		module.exports = exports["default"]; 
    	} (ownerDocument$1, ownerDocument$1.exports));
    	return ownerDocument$1.exports;
    }

    var hasRequiredOwnerWindow;

    function requireOwnerWindow () {
    	if (hasRequiredOwnerWindow) return ownerWindow.exports;
    	hasRequiredOwnerWindow = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.default = ownerWindow;

    		var _ownerDocument = _interopRequireDefault(requireOwnerDocument$1());

    		/**
    		 * Returns the owner window of a given element.
    		 * 
    		 * @param node the element
    		 */
    		function ownerWindow(node) {
    		  var doc = (0, _ownerDocument.default)(node);
    		  return doc && doc.defaultView || window;
    		}

    		module.exports = exports["default"]; 
    	} (ownerWindow, ownerWindow.exports));
    	return ownerWindow.exports;
    }

    var hasRequiredGetComputedStyle;

    function requireGetComputedStyle () {
    	if (hasRequiredGetComputedStyle) return getComputedStyle.exports;
    	hasRequiredGetComputedStyle = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.default = getComputedStyle;

    		var _ownerWindow = _interopRequireDefault(requireOwnerWindow());

    		/**
    		 * Returns one or all computed style properties of an element.
    		 * 
    		 * @param node the element
    		 * @param psuedoElement the style property
    		 */
    		function getComputedStyle(node, psuedoElement) {
    		  return (0, _ownerWindow.default)(node).getComputedStyle(node, psuedoElement);
    		}

    		module.exports = exports["default"]; 
    	} (getComputedStyle, getComputedStyle.exports));
    	return getComputedStyle.exports;
    }

    var hyphenateStyle = {exports: {}};

    var hyphenate = {exports: {}};

    var hasRequiredHyphenate;

    function requireHyphenate () {
    	if (hasRequiredHyphenate) return hyphenate.exports;
    	hasRequiredHyphenate = 1;
    	(function (module, exports) {

    		exports.__esModule = true;
    		exports.default = hyphenate;
    		var rUpper = /([A-Z])/g;

    		function hyphenate(string) {
    		  return string.replace(rUpper, '-$1').toLowerCase();
    		}

    		module.exports = exports["default"]; 
    	} (hyphenate, hyphenate.exports));
    	return hyphenate.exports;
    }

    var hasRequiredHyphenateStyle;

    function requireHyphenateStyle () {
    	if (hasRequiredHyphenateStyle) return hyphenateStyle.exports;
    	hasRequiredHyphenateStyle = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.default = hyphenateStyleName;

    		var _hyphenate = _interopRequireDefault(requireHyphenate());

    		/**
    		 * Copyright 2013-2014, Facebook, Inc.
    		 * All rights reserved.
    		 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
    		 */
    		var msPattern = /^ms-/;

    		function hyphenateStyleName(string) {
    		  return (0, _hyphenate.default)(string).replace(msPattern, '-ms-');
    		}

    		module.exports = exports["default"]; 
    	} (hyphenateStyle, hyphenateStyle.exports));
    	return hyphenateStyle.exports;
    }

    var isTransform = {exports: {}};

    var hasRequiredIsTransform;

    function requireIsTransform () {
    	if (hasRequiredIsTransform) return isTransform.exports;
    	hasRequiredIsTransform = 1;
    	(function (module, exports) {

    		exports.__esModule = true;
    		exports.default = isTransform;
    		var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;

    		function isTransform(value) {
    		  return !!(value && supportedTransforms.test(value));
    		}

    		module.exports = exports["default"]; 
    	} (isTransform, isTransform.exports));
    	return isTransform.exports;
    }

    var hasRequiredCss;

    function requireCss () {
    	if (hasRequiredCss) return css.exports;
    	hasRequiredCss = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.default = void 0;

    		var _getComputedStyle = _interopRequireDefault(requireGetComputedStyle());

    		var _hyphenateStyle = _interopRequireDefault(requireHyphenateStyle());

    		var _isTransform = _interopRequireDefault(requireIsTransform());

    		function style(node, property) {
    		  var css = '';
    		  var transforms = '';

    		  if (typeof property === 'string') {
    		    return node.style.getPropertyValue((0, _hyphenateStyle.default)(property)) || (0, _getComputedStyle.default)(node).getPropertyValue((0, _hyphenateStyle.default)(property));
    		  }

    		  Object.keys(property).forEach(function (key) {
    		    var value = property[key];

    		    if (!value && value !== 0) {
    		      node.style.removeProperty((0, _hyphenateStyle.default)(key));
    		    } else if ((0, _isTransform.default)(key)) {
    		      transforms += key + "(" + value + ") ";
    		    } else {
    		      css += (0, _hyphenateStyle.default)(key) + ": " + value + ";";
    		    }
    		  });

    		  if (transforms) {
    		    css += "transform: " + transforms + ";";
    		  }

    		  node.style.cssText += ";" + css;
    		}

    		var _default = style;
    		exports.default = _default;
    		module.exports = exports["default"]; 
    	} (css, css.exports));
    	return css.exports;
    }

    var offset = {exports: {}};

    var contains = {exports: {}};

    var hasRequiredContains;

    function requireContains () {
    	if (hasRequiredContains) return contains.exports;
    	hasRequiredContains = 1;
    	(function (module, exports) {

    		exports.__esModule = true;
    		exports.default = contains;

    		/* eslint-disable no-bitwise, no-cond-assign */

    		/**
    		 * Checks if an element contains another given element.
    		 * 
    		 * @param context the context element
    		 * @param node the element to check
    		 */
    		function contains(context, node) {
    		  // HTML DOM and SVG DOM may have different support levels,
    		  // so we need to check on context instead of a document root element.
    		  if (context.contains) return context.contains(node);
    		  if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);
    		}

    		module.exports = exports["default"]; 
    	} (contains, contains.exports));
    	return contains.exports;
    }

    var scrollLeft = {exports: {}};

    var getScrollAccessor = {exports: {}};

    var isWindow = {exports: {}};

    var isDocument = {exports: {}};

    var hasRequiredIsDocument;

    function requireIsDocument () {
    	if (hasRequiredIsDocument) return isDocument.exports;
    	hasRequiredIsDocument = 1;
    	(function (module, exports) {

    		exports.__esModule = true;
    		exports.default = isDocument;

    		function isDocument(element) {
    		  return 'nodeType' in element && element.nodeType === document.DOCUMENT_NODE;
    		}

    		module.exports = exports["default"]; 
    	} (isDocument, isDocument.exports));
    	return isDocument.exports;
    }

    var hasRequiredIsWindow;

    function requireIsWindow () {
    	if (hasRequiredIsWindow) return isWindow.exports;
    	hasRequiredIsWindow = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.default = isWindow;

    		var _isDocument = _interopRequireDefault(requireIsDocument());

    		function isWindow(node) {
    		  if ('window' in node && node.window === node) return node;
    		  if ((0, _isDocument.default)(node)) return node.defaultView || false;
    		  return false;
    		}

    		module.exports = exports["default"]; 
    	} (isWindow, isWindow.exports));
    	return isWindow.exports;
    }

    var hasRequiredGetScrollAccessor;

    function requireGetScrollAccessor () {
    	if (hasRequiredGetScrollAccessor) return getScrollAccessor.exports;
    	hasRequiredGetScrollAccessor = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.default = getscrollAccessor;

    		var _isWindow = _interopRequireDefault(requireIsWindow());

    		function getscrollAccessor(offset) {
    		  var prop = offset === 'pageXOffset' ? 'scrollLeft' : 'scrollTop';

    		  function scrollAccessor(node, val) {
    		    var win = (0, _isWindow.default)(node);

    		    if (val === undefined) {
    		      return win ? win[offset] : node[prop];
    		    }

    		    if (win) {
    		      win.scrollTo(win[offset], val);
    		    } else {
    		      node[prop] = val;
    		    }
    		  }

    		  return scrollAccessor;
    		}

    		module.exports = exports["default"]; 
    	} (getScrollAccessor, getScrollAccessor.exports));
    	return getScrollAccessor.exports;
    }

    var hasRequiredScrollLeft;

    function requireScrollLeft () {
    	if (hasRequiredScrollLeft) return scrollLeft.exports;
    	hasRequiredScrollLeft = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.default = void 0;

    		var _getScrollAccessor = _interopRequireDefault(requireGetScrollAccessor());

    		/**
    		 * Gets or sets the scroll left position of a given element.
    		 * 
    		 * @param node the element
    		 * @param val the position to set
    		 */
    		var _default = (0, _getScrollAccessor.default)('pageXOffset');

    		exports.default = _default;
    		module.exports = exports["default"]; 
    	} (scrollLeft, scrollLeft.exports));
    	return scrollLeft.exports;
    }

    var scrollTop = {exports: {}};

    var hasRequiredScrollTop;

    function requireScrollTop () {
    	if (hasRequiredScrollTop) return scrollTop.exports;
    	hasRequiredScrollTop = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.default = void 0;

    		var _getScrollAccessor = _interopRequireDefault(requireGetScrollAccessor());

    		/**
    		 * Gets or sets the scroll top position of a given element.
    		 * 
    		 * @param node the element
    		 * @param val the position to set
    		 */
    		var _default = (0, _getScrollAccessor.default)('pageYOffset');

    		exports.default = _default;
    		module.exports = exports["default"]; 
    	} (scrollTop, scrollTop.exports));
    	return scrollTop.exports;
    }

    var hasRequiredOffset;

    function requireOffset () {
    	if (hasRequiredOffset) return offset.exports;
    	hasRequiredOffset = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.default = offset;

    		var _contains = _interopRequireDefault(requireContains());

    		var _ownerDocument = _interopRequireDefault(requireOwnerDocument$1());

    		var _scrollLeft = _interopRequireDefault(requireScrollLeft());

    		var _scrollTop = _interopRequireDefault(requireScrollTop());

    		/**
    		 * Returns the offset of a given element, including top and left positions, width and height.
    		 * 
    		 * @param node the element
    		 */
    		function offset(node) {
    		  var doc = (0, _ownerDocument.default)(node);
    		  var box = {
    		    top: 0,
    		    left: 0,
    		    height: 0,
    		    width: 0
    		  };
    		  var docElem = doc && doc.documentElement; // Make sure it's not a disconnected DOM node

    		  if (!docElem || !(0, _contains.default)(docElem, node)) return box;
    		  if (node.getBoundingClientRect !== undefined) box = node.getBoundingClientRect();
    		  box = {
    		    top: box.top + (0, _scrollTop.default)(docElem) - (docElem.clientTop || 0),
    		    left: box.left + (0, _scrollLeft.default)(docElem) - (docElem.clientLeft || 0),
    		    width: box.width,
    		    height: box.height
    		  };
    		  return box;
    		}

    		module.exports = exports["default"]; 
    	} (offset, offset.exports));
    	return offset.exports;
    }

    var offsetParent = {exports: {}};

    var hasRequiredOffsetParent;

    function requireOffsetParent () {
    	if (hasRequiredOffsetParent) return offsetParent.exports;
    	hasRequiredOffsetParent = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.default = offsetParent;

    		var _css = _interopRequireDefault(requireCss());

    		var _ownerDocument = _interopRequireDefault(requireOwnerDocument$1());

    		var isHTMLElement = function isHTMLElement(e) {
    		  return !!e && 'offsetParent' in e;
    		};

    		function offsetParent(node) {
    		  var doc = (0, _ownerDocument.default)(node);
    		  var parent = node && node.offsetParent;

    		  while (isHTMLElement(parent) && parent.nodeName !== 'HTML' && (0, _css.default)(parent, 'position') === 'static') {
    		    parent = parent.offsetParent;
    		  }

    		  return parent || doc.documentElement;
    		}

    		module.exports = exports["default"]; 
    	} (offsetParent, offsetParent.exports));
    	return offsetParent.exports;
    }

    (function (module, exports) {

    	var _interopRequireDefault = interopRequireDefaultExports;

    	exports.__esModule = true;
    	exports.default = position;

    	var _extends2 = _interopRequireDefault(require_extends());

    	var _css = _interopRequireDefault(requireCss());

    	var _offset = _interopRequireDefault(requireOffset());

    	var _offsetParent = _interopRequireDefault(requireOffsetParent());

    	var _scrollLeft = _interopRequireDefault(requireScrollLeft());

    	var _scrollTop = _interopRequireDefault(requireScrollTop());

    	var nodeName = function nodeName(node) {
    	  return node.nodeName && node.nodeName.toLowerCase();
    	};
    	/**
    	 * Returns the relative position of a given element.
    	 * 
    	 * @param node the element
    	 * @param offsetParent the offset parent
    	 */


    	function position(node, offsetParent) {
    	  var parentOffset = {
    	    top: 0,
    	    left: 0
    	  };
    	  var offset; // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
    	  // because it is its only offset parent

    	  if ((0, _css.default)(node, 'position') === 'fixed') {
    	    offset = node.getBoundingClientRect();
    	  } else {
    	    var parent = offsetParent || (0, _offsetParent.default)(node);
    	    offset = (0, _offset.default)(node);
    	    if (nodeName(parent) !== 'html') parentOffset = (0, _offset.default)(parent);
    	    var borderTop = String((0, _css.default)(parent, 'borderTopWidth') || 0);
    	    parentOffset.top += parseInt(borderTop, 10) - (0, _scrollTop.default)(parent) || 0;
    	    var borderLeft = String((0, _css.default)(parent, 'borderLeftWidth') || 0);
    	    parentOffset.left += parseInt(borderLeft, 10) - (0, _scrollLeft.default)(parent) || 0;
    	  }

    	  var marginTop = String((0, _css.default)(node, 'marginTop') || 0);
    	  var marginLeft = String((0, _css.default)(node, 'marginLeft') || 0); // Subtract parent offsets and node margins

    	  return (0, _extends2.default)({}, offset, {
    	    top: offset.top - parentOffset.top - (parseInt(marginTop, 10) || 0),
    	    left: offset.left - parentOffset.left - (parseInt(marginLeft, 10) || 0)
    	  });
    	}

    	module.exports = exports["default"]; 
    } (position, position.exports));

    var positionExports = position.exports;

    var animationFrame$2 = {};

    var canUseDOM = {exports: {}};

    var hasRequiredCanUseDOM;

    function requireCanUseDOM () {
    	if (hasRequiredCanUseDOM) return canUseDOM.exports;
    	hasRequiredCanUseDOM = 1;
    	(function (module, exports) {

    		exports.__esModule = true;
    		exports.default = void 0;

    		var _default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

    		exports.default = _default;
    		module.exports = exports["default"]; 
    	} (canUseDOM, canUseDOM.exports));
    	return canUseDOM.exports;
    }

    var _interopRequireDefault$F = interopRequireDefaultExports;

    animationFrame$2.__esModule = true;
    animationFrame$2.request = animationFrame$2.cancel = void 0;

    var _canUseDOM = _interopRequireDefault$F(requireCanUseDOM());

    /* https://github.com/component/raf */
    var prev = new Date().getTime();

    function fallback(fn) {
      var curr = new Date().getTime();
      var ms = Math.max(0, 16 - (curr - prev));
      var handle = setTimeout(fn, ms);
      prev = curr;
      return handle;
    }

    var vendors = ['', 'webkit', 'moz', 'o', 'ms'];
    var cancelMethod = 'clearTimeout';
    var rafImpl = fallback; // eslint-disable-next-line import/no-mutable-exports

    var getKey$1 = function getKey(vendor, k) {
      return vendor + (!vendor ? k : k[0].toUpperCase() + k.substr(1)) + "AnimationFrame";
    };

    if (_canUseDOM.default) {
      vendors.some(function (vendor) {
        var rafMethod = getKey$1(vendor, 'request');

        if (rafMethod in window) {
          cancelMethod = getKey$1(vendor, 'cancel'); // @ts-ignore

          rafImpl = function rafImpl(cb) {
            return window[rafMethod](cb);
          };
        }

        return !!rafImpl;
      });
    }

    var cancel = function cancel(id) {
      // @ts-ignore
      if (typeof window[cancelMethod] === 'function') window[cancelMethod](id);
    };

    animationFrame$2.cancel = cancel;
    var request = rafImpl;
    animationFrame$2.request = request;

    var PopOverlay$1 = {};

    var cjs = {};

    var Dropdown = {exports: {}};

    var matches = {exports: {}};

    var hasRequiredMatches;

    function requireMatches () {
    	if (hasRequiredMatches) return matches.exports;
    	hasRequiredMatches = 1;
    	(function (module, exports) {

    		exports.__esModule = true;
    		exports.default = matches;
    		var matchesImpl;
    		/**
    		 * Checks if a given element matches a selector.
    		 * 
    		 * @param node the element
    		 * @param selector the selector
    		 */

    		function matches(node, selector) {
    		  if (!matchesImpl) {
    		    var body = document.body;
    		    var nativeMatch = body.matches || body.matchesSelector || body.webkitMatchesSelector || body.mozMatchesSelector || body.msMatchesSelector;

    		    matchesImpl = function matchesImpl(n, s) {
    		      return nativeMatch.call(n, s);
    		    };
    		  }

    		  return matchesImpl(node, selector);
    		}

    		module.exports = exports["default"]; 
    	} (matches, matches.exports));
    	return matches.exports;
    }

    var querySelectorAll = {exports: {}};

    (function (module, exports) {

    	exports.__esModule = true;
    	exports.default = qsa;
    	var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
    	/**
    	 * Runs `querySelectorAll` on a given element.
    	 * 
    	 * @param element the element
    	 * @param selector the selector
    	 */

    	function qsa(element, selector) {
    	  return toArray(element.querySelectorAll(selector));
    	}

    	module.exports = exports["default"]; 
    } (querySelectorAll, querySelectorAll.exports));

    var querySelectorAllExports = querySelectorAll.exports;

    var addEventListener$1 = {};

    var hasRequiredAddEventListener;

    function requireAddEventListener () {
    	if (hasRequiredAddEventListener) return addEventListener$1;
    	hasRequiredAddEventListener = 1;

    	var _interopRequireDefault = interopRequireDefaultExports;

    	addEventListener$1.__esModule = true;
    	addEventListener$1.default = addEventListener$1.onceSupported = addEventListener$1.optionsSupported = void 0;

    	var _canUseDOM = _interopRequireDefault(requireCanUseDOM());

    	/* eslint-disable no-return-assign */
    	var optionsSupported = false;
    	addEventListener$1.optionsSupported = optionsSupported;
    	var onceSupported = false;
    	addEventListener$1.onceSupported = onceSupported;

    	try {
    	  var options = {
    	    get passive() {
    	      return addEventListener$1.optionsSupported = optionsSupported = true;
    	    },

    	    get once() {
    	      // eslint-disable-next-line no-multi-assign
    	      return addEventListener$1.onceSupported = onceSupported = addEventListener$1.optionsSupported = optionsSupported = true;
    	    }

    	  };

    	  if (_canUseDOM.default) {
    	    window.addEventListener('test', options, options);
    	    window.removeEventListener('test', options, true);
    	  }
    	} catch (e) {
    	  /* */
    	}

    	/**
    	 * An `addEventListener` ponyfill, supports the `once` option
    	 * 
    	 * @param node the element
    	 * @param eventName the event name
    	 * @param handle the handler
    	 * @param options event options
    	 */
    	function addEventListener(node, eventName, handler, options) {
    	  if (options && typeof options !== 'boolean' && !onceSupported) {
    	    var once = options.once,
    	        capture = options.capture;
    	    var wrappedHandler = handler;

    	    if (!onceSupported && once) {
    	      wrappedHandler = handler.__once || function onceHandler(event) {
    	        this.removeEventListener(eventName, onceHandler, capture);
    	        handler.call(this, event);
    	      };

    	      handler.__once = wrappedHandler;
    	    }

    	    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);
    	  }

    	  node.addEventListener(eventName, handler, options);
    	}

    	var _default = addEventListener;
    	addEventListener$1.default = _default;
    	return addEventListener$1;
    }

    var usePrevious = {};

    var hasRequiredUsePrevious;

    function requireUsePrevious () {
    	if (hasRequiredUsePrevious) return usePrevious;
    	hasRequiredUsePrevious = 1;

    	usePrevious.__esModule = true;
    	usePrevious.default = usePrevious$1;
    	var _react = React__default.default;
    	/**
    	 * Store the last of some value. Tracked via a `Ref` only updating it
    	 * after the component renders.
    	 *
    	 * Helpful if you need to compare a prop value to it's previous value during render.
    	 *
    	 * ```ts
    	 * function Component(props) {
    	 *   const lastProps = usePrevious(props)
    	 *
    	 *   if (lastProps.foo !== props.foo)
    	 *     resetValueFromProps(props.foo)
    	 * }
    	 * ```
    	 *
    	 * @param value the value to track
    	 */
    	function usePrevious$1(value) {
    	  const ref = (0, _react.useRef)(null);
    	  (0, _react.useEffect)(() => {
    	    ref.current = value;
    	  });
    	  return ref.current;
    	}
    	return usePrevious;
    }

    var useForceUpdate = {};

    var hasRequiredUseForceUpdate;

    function requireUseForceUpdate () {
    	if (hasRequiredUseForceUpdate) return useForceUpdate;
    	hasRequiredUseForceUpdate = 1;

    	useForceUpdate.__esModule = true;
    	useForceUpdate.default = useForceUpdate$1;
    	var _react = React__default.default;
    	/**
    	 * Returns a function that triggers a component update. the hook equivalent to
    	 * `this.forceUpdate()` in a class component. In most cases using a state value directly
    	 * is preferable but may be required in some advanced usages of refs for interop or
    	 * when direct DOM manipulation is required.
    	 *
    	 * ```ts
    	 * const forceUpdate = useForceUpdate();
    	 *
    	 * const updateOnClick = useCallback(() => {
    	 *  forceUpdate()
    	 * }, [forceUpdate])
    	 *
    	 * return <button type="button" onClick={updateOnClick}>Hi there</button>
    	 * ```
    	 */
    	function useForceUpdate$1() {
    	  // The toggling state value is designed to defeat React optimizations for skipping
    	  // updates when they are strictly equal to the last state value
    	  const [, dispatch] = (0, _react.useReducer)(state => !state, false);
    	  return dispatch;
    	}
    	return useForceUpdate;
    }

    var useGlobalListener = {};

    var useEventListener = {};

    var useEventCallback = {};

    var useCommittedRef = {};

    var hasRequiredUseCommittedRef;

    function requireUseCommittedRef () {
    	if (hasRequiredUseCommittedRef) return useCommittedRef;
    	hasRequiredUseCommittedRef = 1;

    	useCommittedRef.__esModule = true;
    	useCommittedRef.default = void 0;
    	var _react = React__default.default;
    	/**
    	 * Creates a `Ref` whose value is updated in an effect, ensuring the most recent
    	 * value is the one rendered with. Generally only required for Concurrent mode usage
    	 * where previous work in `render()` may be discarded before being used.
    	 *
    	 * This is safe to access in an event handler.
    	 *
    	 * @param value The `Ref` value
    	 */
    	function useCommittedRef$1(value) {
    	  const ref = (0, _react.useRef)(value);
    	  (0, _react.useEffect)(() => {
    	    ref.current = value;
    	  }, [value]);
    	  return ref;
    	}
    	var _default = useCommittedRef$1;
    	useCommittedRef.default = _default;
    	return useCommittedRef;
    }

    var hasRequiredUseEventCallback;

    function requireUseEventCallback () {
    	if (hasRequiredUseEventCallback) return useEventCallback;
    	hasRequiredUseEventCallback = 1;

    	useEventCallback.__esModule = true;
    	useEventCallback.default = useEventCallback$1;
    	var _react = React__default.default;
    	var _useCommittedRef = _interopRequireDefault(requireUseCommittedRef());
    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    	function useEventCallback$1(fn) {
    	  const ref = (0, _useCommittedRef.default)(fn);
    	  return (0, _react.useCallback)(function (...args) {
    	    return ref.current && ref.current(...args);
    	  }, [ref]);
    	}
    	return useEventCallback;
    }

    var hasRequiredUseEventListener;

    function requireUseEventListener () {
    	if (hasRequiredUseEventListener) return useEventListener;
    	hasRequiredUseEventListener = 1;

    	useEventListener.__esModule = true;
    	useEventListener.default = useEventListener$1;
    	var _react = React__default.default;
    	var _useEventCallback = _interopRequireDefault(requireUseEventCallback());
    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    	/**
    	 * Attaches an event handler outside directly to specified DOM element
    	 * bypassing the react synthetic event system.
    	 *
    	 * @param element The target to listen for events on
    	 * @param event The DOM event name
    	 * @param handler An event handler
    	 * @param capture Whether or not to listen during the capture event phase
    	 */
    	function useEventListener$1(eventTarget, event, listener, capture = false) {
    	  const handler = (0, _useEventCallback.default)(listener);
    	  (0, _react.useEffect)(() => {
    	    const target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;
    	    target.addEventListener(event, handler, capture);
    	    return () => target.removeEventListener(event, handler, capture);
    	  }, [eventTarget]);
    	}
    	return useEventListener;
    }

    var hasRequiredUseGlobalListener;

    function requireUseGlobalListener () {
    	if (hasRequiredUseGlobalListener) return useGlobalListener;
    	hasRequiredUseGlobalListener = 1;

    	useGlobalListener.__esModule = true;
    	useGlobalListener.default = useGlobalListener$1;
    	var _useEventListener = _interopRequireDefault(requireUseEventListener());
    	var _react = React__default.default;
    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    	/**
    	 * Attaches an event handler outside directly to the `document`,
    	 * bypassing the react synthetic event system.
    	 *
    	 * ```ts
    	 * useGlobalListener('keydown', (event) => {
    	 *  console.log(event.key)
    	 * })
    	 * ```
    	 *
    	 * @param event The DOM event name
    	 * @param handler An event handler
    	 * @param capture Whether or not to listen during the capture event phase
    	 */
    	function useGlobalListener$1(event, handler, capture = false) {
    	  const documentTarget = (0, _react.useCallback)(() => document, []);
    	  return (0, _useEventListener.default)(documentTarget, event, handler, capture);
    	}
    	return useGlobalListener;
    }

    var DropdownContext = {exports: {}};

    var hasRequiredDropdownContext;

    function requireDropdownContext () {
    	if (hasRequiredDropdownContext) return DropdownContext.exports;
    	hasRequiredDropdownContext = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports["default"] = void 0;

    		var _react = _interopRequireDefault(React__default.default);

    		var DropdownContext = /*#__PURE__*/_react["default"].createContext(null);

    		var _default = DropdownContext;
    		exports["default"] = _default;
    		module.exports = exports.default; 
    	} (DropdownContext, DropdownContext.exports));
    	return DropdownContext.exports;
    }

    var DropdownMenu = {};

    var useCallbackRef = {};

    var hasRequiredUseCallbackRef;

    function requireUseCallbackRef () {
    	if (hasRequiredUseCallbackRef) return useCallbackRef;
    	hasRequiredUseCallbackRef = 1;

    	useCallbackRef.__esModule = true;
    	useCallbackRef.default = useCallbackRef$1;
    	var _react = React__default.default;
    	/**
    	 * A convenience hook around `useState` designed to be paired with
    	 * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.
    	 * Callback refs are useful over `useRef()` when you need to respond to the ref being set
    	 * instead of lazily accessing it in an effect.
    	 *
    	 * ```ts
    	 * const [element, attachRef] = useCallbackRef<HTMLDivElement>()
    	 *
    	 * useEffect(() => {
    	 *   if (!element) return
    	 *
    	 *   const calendar = new FullCalendar.Calendar(element)
    	 *
    	 *   return () => {
    	 *     calendar.destroy()
    	 *   }
    	 * }, [element])
    	 *
    	 * return <div ref={attachRef} />
    	 * ```
    	 *
    	 * @category refs
    	 */
    	function useCallbackRef$1() {
    	  return (0, _react.useState)(null);
    	}
    	return useCallbackRef;
    }

    var usePopper = {exports: {}};

    var useSafeState = {};

    var useMounted = {};

    var hasRequiredUseMounted;

    function requireUseMounted () {
    	if (hasRequiredUseMounted) return useMounted;
    	hasRequiredUseMounted = 1;

    	useMounted.__esModule = true;
    	useMounted.default = useMounted$1;
    	var _react = React__default.default;
    	/**
    	 * Track whether a component is current mounted. Generally less preferable than
    	 * properlly canceling effects so they don't run after a component is unmounted,
    	 * but helpful in cases where that isn't feasible, such as a `Promise` resolution.
    	 *
    	 * @returns a function that returns the current isMounted state of the component
    	 *
    	 * ```ts
    	 * const [data, setData] = useState(null)
    	 * const isMounted = useMounted()
    	 *
    	 * useEffect(() => {
    	 *   fetchdata().then((newData) => {
    	 *      if (isMounted()) {
    	 *        setData(newData);
    	 *      }
    	 *   })
    	 * })
    	 * ```
    	 */
    	function useMounted$1() {
    	  const mounted = (0, _react.useRef)(true);
    	  const isMounted = (0, _react.useRef)(() => mounted.current);
    	  (0, _react.useEffect)(() => {
    	    mounted.current = true;
    	    return () => {
    	      mounted.current = false;
    	    };
    	  }, []);
    	  return isMounted.current;
    	}
    	return useMounted;
    }

    var hasRequiredUseSafeState;

    function requireUseSafeState () {
    	if (hasRequiredUseSafeState) return useSafeState;
    	hasRequiredUseSafeState = 1;

    	useSafeState.__esModule = true;
    	useSafeState.default = void 0;
    	var _react = React__default.default;
    	var _useMounted = _interopRequireDefault(requireUseMounted());
    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    	/**
    	 * `useSafeState` takes the return value of a `useState` hook and wraps the
    	 * setter to prevent updates onces the component has unmounted. Can used
    	 * with `useMergeState` and `useStateAsync` as well
    	 *
    	 * @param state The return value of a useStateHook
    	 *
    	 * ```ts
    	 * const [show, setShow] = useSafeState(useState(true));
    	 * ```
    	 */

    	function useSafeState$1(state) {
    	  const isMounted = (0, _useMounted.default)();
    	  return [state[0], (0, _react.useCallback)(nextState => {
    	    if (!isMounted()) return;
    	    return state[1](nextState);
    	  }, [isMounted, state[1]])];
    	}
    	var _default = useSafeState$1;
    	useSafeState.default = _default;
    	return useSafeState;
    }

    var popper = {};

    var hasRequiredPopper;

    function requirePopper () {
    	if (hasRequiredPopper) return popper;
    	hasRequiredPopper = 1;

    	Object.defineProperty(popper, '__esModule', { value: true });

    	var top = 'top';
    	var bottom = 'bottom';
    	var right = 'right';
    	var left = 'left';
    	var auto = 'auto';
    	var basePlacements = [top, bottom, right, left];
    	var start = 'start';
    	var end = 'end';
    	var clippingParents = 'clippingParents';
    	var viewport = 'viewport';
    	var popper$1 = 'popper';
    	var reference = 'reference';
    	var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    	  return acc.concat([placement + "-" + start, placement + "-" + end]);
    	}, []);
    	var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    	  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    	}, []); // modifiers that need to read the DOM

    	var beforeRead = 'beforeRead';
    	var read = 'read';
    	var afterRead = 'afterRead'; // pure-logic modifiers

    	var beforeMain = 'beforeMain';
    	var main = 'main';
    	var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

    	var beforeWrite = 'beforeWrite';
    	var write = 'write';
    	var afterWrite = 'afterWrite';
    	var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

    	function getBasePlacement(placement) {
    	  return placement.split('-')[0];
    	}

    	function getWindow(node) {
    	  if (node == null) {
    	    return window;
    	  }

    	  if (node.toString() !== '[object Window]') {
    	    var ownerDocument = node.ownerDocument;
    	    return ownerDocument ? ownerDocument.defaultView || window : window;
    	  }

    	  return node;
    	}

    	function isElement(node) {
    	  var OwnElement = getWindow(node).Element;
    	  return node instanceof OwnElement || node instanceof Element;
    	}

    	function isHTMLElement(node) {
    	  var OwnElement = getWindow(node).HTMLElement;
    	  return node instanceof OwnElement || node instanceof HTMLElement;
    	}

    	function isShadowRoot(node) {
    	  // IE 11 has no ShadowRoot
    	  if (typeof ShadowRoot === 'undefined') {
    	    return false;
    	  }

    	  var OwnElement = getWindow(node).ShadowRoot;
    	  return node instanceof OwnElement || node instanceof ShadowRoot;
    	}

    	var max = Math.max;
    	var min = Math.min;
    	var round = Math.round;

    	function getUAString() {
    	  var uaData = navigator.userAgentData;

    	  if (uaData != null && uaData.brands) {
    	    return uaData.brands.map(function (item) {
    	      return item.brand + "/" + item.version;
    	    }).join(' ');
    	  }

    	  return navigator.userAgent;
    	}

    	function isLayoutViewport() {
    	  return !/^((?!chrome|android).)*safari/i.test(getUAString());
    	}

    	function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    	  if (includeScale === void 0) {
    	    includeScale = false;
    	  }

    	  if (isFixedStrategy === void 0) {
    	    isFixedStrategy = false;
    	  }

    	  var clientRect = element.getBoundingClientRect();
    	  var scaleX = 1;
    	  var scaleY = 1;

    	  if (includeScale && isHTMLElement(element)) {
    	    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    	    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    	  }

    	  var _ref = isElement(element) ? getWindow(element) : window,
    	      visualViewport = _ref.visualViewport;

    	  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    	  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    	  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    	  var width = clientRect.width / scaleX;
    	  var height = clientRect.height / scaleY;
    	  return {
    	    width: width,
    	    height: height,
    	    top: y,
    	    right: x + width,
    	    bottom: y + height,
    	    left: x,
    	    x: x,
    	    y: y
    	  };
    	}

    	// means it doesn't take into account transforms.

    	function getLayoutRect(element) {
    	  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    	  // Fixes https://github.com/popperjs/popper-core/issues/1223

    	  var width = element.offsetWidth;
    	  var height = element.offsetHeight;

    	  if (Math.abs(clientRect.width - width) <= 1) {
    	    width = clientRect.width;
    	  }

    	  if (Math.abs(clientRect.height - height) <= 1) {
    	    height = clientRect.height;
    	  }

    	  return {
    	    x: element.offsetLeft,
    	    y: element.offsetTop,
    	    width: width,
    	    height: height
    	  };
    	}

    	function contains(parent, child) {
    	  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    	  if (parent.contains(child)) {
    	    return true;
    	  } // then fallback to custom implementation with Shadow DOM support
    	  else if (rootNode && isShadowRoot(rootNode)) {
    	      var next = child;

    	      do {
    	        if (next && parent.isSameNode(next)) {
    	          return true;
    	        } // $FlowFixMe[prop-missing]: need a better way to handle this...


    	        next = next.parentNode || next.host;
    	      } while (next);
    	    } // Give up, the result is false


    	  return false;
    	}

    	function getNodeName(element) {
    	  return element ? (element.nodeName || '').toLowerCase() : null;
    	}

    	function getComputedStyle(element) {
    	  return getWindow(element).getComputedStyle(element);
    	}

    	function isTableElement(element) {
    	  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
    	}

    	function getDocumentElement(element) {
    	  // $FlowFixMe[incompatible-return]: assume body is always available
    	  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    	  element.document) || window.document).documentElement;
    	}

    	function getParentNode(element) {
    	  if (getNodeName(element) === 'html') {
    	    return element;
    	  }

    	  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    	    // $FlowFixMe[incompatible-return]
    	    // $FlowFixMe[prop-missing]
    	    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    	    element.parentNode || ( // DOM Element detected
    	    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    	    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    	    getDocumentElement(element) // fallback

    	  );
    	}

    	function getTrueOffsetParent(element) {
    	  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    	  getComputedStyle(element).position === 'fixed') {
    	    return null;
    	  }

    	  return element.offsetParent;
    	} // `.offsetParent` reports `null` for fixed elements, while absolute elements
    	// return the containing block


    	function getContainingBlock(element) {
    	  var isFirefox = /firefox/i.test(getUAString());
    	  var isIE = /Trident/i.test(getUAString());

    	  if (isIE && isHTMLElement(element)) {
    	    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    	    var elementCss = getComputedStyle(element);

    	    if (elementCss.position === 'fixed') {
    	      return null;
    	    }
    	  }

    	  var currentNode = getParentNode(element);

    	  if (isShadowRoot(currentNode)) {
    	    currentNode = currentNode.host;
    	  }

    	  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
    	    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    	    // create a containing block.
    	    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    	    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
    	      return currentNode;
    	    } else {
    	      currentNode = currentNode.parentNode;
    	    }
    	  }

    	  return null;
    	} // Gets the closest ancestor positioned element. Handles some edge cases,
    	// such as table ancestors and cross browser bugs.


    	function getOffsetParent(element) {
    	  var window = getWindow(element);
    	  var offsetParent = getTrueOffsetParent(element);

    	  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
    	    offsetParent = getTrueOffsetParent(offsetParent);
    	  }

    	  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
    	    return window;
    	  }

    	  return offsetParent || getContainingBlock(element) || window;
    	}

    	function getMainAxisFromPlacement(placement) {
    	  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
    	}

    	function within(min$1, value, max$1) {
    	  return max(min$1, min(value, max$1));
    	}
    	function withinMaxClamp(min, value, max) {
    	  var v = within(min, value, max);
    	  return v > max ? max : v;
    	}

    	function getFreshSideObject() {
    	  return {
    	    top: 0,
    	    right: 0,
    	    bottom: 0,
    	    left: 0
    	  };
    	}

    	function mergePaddingObject(paddingObject) {
    	  return Object.assign({}, getFreshSideObject(), paddingObject);
    	}

    	function expandToHashMap(value, keys) {
    	  return keys.reduce(function (hashMap, key) {
    	    hashMap[key] = value;
    	    return hashMap;
    	  }, {});
    	}

    	var toPaddingObject = function toPaddingObject(padding, state) {
    	  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    	    placement: state.placement
    	  })) : padding;
    	  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    	};

    	function arrow(_ref) {
    	  var _state$modifiersData$;

    	  var state = _ref.state,
    	      name = _ref.name,
    	      options = _ref.options;
    	  var arrowElement = state.elements.arrow;
    	  var popperOffsets = state.modifiersData.popperOffsets;
    	  var basePlacement = getBasePlacement(state.placement);
    	  var axis = getMainAxisFromPlacement(basePlacement);
    	  var isVertical = [left, right].indexOf(basePlacement) >= 0;
    	  var len = isVertical ? 'height' : 'width';

    	  if (!arrowElement || !popperOffsets) {
    	    return;
    	  }

    	  var paddingObject = toPaddingObject(options.padding, state);
    	  var arrowRect = getLayoutRect(arrowElement);
    	  var minProp = axis === 'y' ? top : left;
    	  var maxProp = axis === 'y' ? bottom : right;
    	  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    	  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    	  var arrowOffsetParent = getOffsetParent(arrowElement);
    	  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    	  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    	  // outside of the popper bounds

    	  var min = paddingObject[minProp];
    	  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    	  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    	  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    	  var axisProp = axis;
    	  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
    	}

    	function effect$1(_ref2) {
    	  var state = _ref2.state,
    	      options = _ref2.options;
    	  var _options$element = options.element,
    	      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    	  if (arrowElement == null) {
    	    return;
    	  } // CSS selector


    	  if (typeof arrowElement === 'string') {
    	    arrowElement = state.elements.popper.querySelector(arrowElement);

    	    if (!arrowElement) {
    	      return;
    	    }
    	  }

    	  {
    	    if (!isHTMLElement(arrowElement)) {
    	      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
    	    }
    	  }

    	  if (!contains(state.elements.popper, arrowElement)) {
    	    {
    	      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    	    }

    	    return;
    	  }

    	  state.elements.arrow = arrowElement;
    	} // eslint-disable-next-line import/no-unused-modules


    	var arrow$1 = {
    	  name: 'arrow',
    	  enabled: true,
    	  phase: 'main',
    	  fn: arrow,
    	  effect: effect$1,
    	  requires: ['popperOffsets'],
    	  requiresIfExists: ['preventOverflow']
    	};

    	function getVariation(placement) {
    	  return placement.split('-')[1];
    	}

    	var unsetSides = {
    	  top: 'auto',
    	  right: 'auto',
    	  bottom: 'auto',
    	  left: 'auto'
    	}; // Round the offsets to the nearest suitable subpixel based on the DPR.
    	// Zooming can change the DPR, but it seems to report a value that will
    	// cleanly divide the values into the appropriate subpixels.

    	function roundOffsetsByDPR(_ref) {
    	  var x = _ref.x,
    	      y = _ref.y;
    	  var win = window;
    	  var dpr = win.devicePixelRatio || 1;
    	  return {
    	    x: round(x * dpr) / dpr || 0,
    	    y: round(y * dpr) / dpr || 0
    	  };
    	}

    	function mapToStyles(_ref2) {
    	  var _Object$assign2;

    	  var popper = _ref2.popper,
    	      popperRect = _ref2.popperRect,
    	      placement = _ref2.placement,
    	      variation = _ref2.variation,
    	      offsets = _ref2.offsets,
    	      position = _ref2.position,
    	      gpuAcceleration = _ref2.gpuAcceleration,
    	      adaptive = _ref2.adaptive,
    	      roundOffsets = _ref2.roundOffsets,
    	      isFixed = _ref2.isFixed;
    	  var _offsets$x = offsets.x,
    	      x = _offsets$x === void 0 ? 0 : _offsets$x,
    	      _offsets$y = offsets.y,
    	      y = _offsets$y === void 0 ? 0 : _offsets$y;

    	  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
    	    x: x,
    	    y: y
    	  }) : {
    	    x: x,
    	    y: y
    	  };

    	  x = _ref3.x;
    	  y = _ref3.y;
    	  var hasX = offsets.hasOwnProperty('x');
    	  var hasY = offsets.hasOwnProperty('y');
    	  var sideX = left;
    	  var sideY = top;
    	  var win = window;

    	  if (adaptive) {
    	    var offsetParent = getOffsetParent(popper);
    	    var heightProp = 'clientHeight';
    	    var widthProp = 'clientWidth';

    	    if (offsetParent === getWindow(popper)) {
    	      offsetParent = getDocumentElement(popper);

    	      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
    	        heightProp = 'scrollHeight';
    	        widthProp = 'scrollWidth';
    	      }
    	    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    	    offsetParent = offsetParent;

    	    if (placement === top || (placement === left || placement === right) && variation === end) {
    	      sideY = bottom;
    	      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
    	      offsetParent[heightProp];
    	      y -= offsetY - popperRect.height;
    	      y *= gpuAcceleration ? 1 : -1;
    	    }

    	    if (placement === left || (placement === top || placement === bottom) && variation === end) {
    	      sideX = right;
    	      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
    	      offsetParent[widthProp];
    	      x -= offsetX - popperRect.width;
    	      x *= gpuAcceleration ? 1 : -1;
    	    }
    	  }

    	  var commonStyles = Object.assign({
    	    position: position
    	  }, adaptive && unsetSides);

    	  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    	    x: x,
    	    y: y
    	  }) : {
    	    x: x,
    	    y: y
    	  };

    	  x = _ref4.x;
    	  y = _ref4.y;

    	  if (gpuAcceleration) {
    	    var _Object$assign;

    	    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    	  }

    	  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
    	}

    	function computeStyles(_ref5) {
    	  var state = _ref5.state,
    	      options = _ref5.options;
    	  var _options$gpuAccelerat = options.gpuAcceleration,
    	      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
    	      _options$adaptive = options.adaptive,
    	      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
    	      _options$roundOffsets = options.roundOffsets,
    	      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

    	  {
    	    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

    	    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
    	      return transitionProperty.indexOf(property) >= 0;
    	    })) {
    	      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
    	    }
    	  }

    	  var commonStyles = {
    	    placement: getBasePlacement(state.placement),
    	    variation: getVariation(state.placement),
    	    popper: state.elements.popper,
    	    popperRect: state.rects.popper,
    	    gpuAcceleration: gpuAcceleration,
    	    isFixed: state.options.strategy === 'fixed'
    	  };

    	  if (state.modifiersData.popperOffsets != null) {
    	    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
    	      offsets: state.modifiersData.popperOffsets,
    	      position: state.options.strategy,
    	      adaptive: adaptive,
    	      roundOffsets: roundOffsets
    	    })));
    	  }

    	  if (state.modifiersData.arrow != null) {
    	    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
    	      offsets: state.modifiersData.arrow,
    	      position: 'absolute',
    	      adaptive: false,
    	      roundOffsets: roundOffsets
    	    })));
    	  }

    	  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    	    'data-popper-placement': state.placement
    	  });
    	} // eslint-disable-next-line import/no-unused-modules


    	var computeStyles$1 = {
    	  name: 'computeStyles',
    	  enabled: true,
    	  phase: 'beforeWrite',
    	  fn: computeStyles,
    	  data: {}
    	};

    	var passive = {
    	  passive: true
    	};

    	function effect(_ref) {
    	  var state = _ref.state,
    	      instance = _ref.instance,
    	      options = _ref.options;
    	  var _options$scroll = options.scroll,
    	      scroll = _options$scroll === void 0 ? true : _options$scroll,
    	      _options$resize = options.resize,
    	      resize = _options$resize === void 0 ? true : _options$resize;
    	  var window = getWindow(state.elements.popper);
    	  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    	  if (scroll) {
    	    scrollParents.forEach(function (scrollParent) {
    	      scrollParent.addEventListener('scroll', instance.update, passive);
    	    });
    	  }

    	  if (resize) {
    	    window.addEventListener('resize', instance.update, passive);
    	  }

    	  return function () {
    	    if (scroll) {
    	      scrollParents.forEach(function (scrollParent) {
    	        scrollParent.removeEventListener('scroll', instance.update, passive);
    	      });
    	    }

    	    if (resize) {
    	      window.removeEventListener('resize', instance.update, passive);
    	    }
    	  };
    	} // eslint-disable-next-line import/no-unused-modules


    	var eventListeners = {
    	  name: 'eventListeners',
    	  enabled: true,
    	  phase: 'write',
    	  fn: function fn() {},
    	  effect: effect,
    	  data: {}
    	};

    	var hash$1 = {
    	  left: 'right',
    	  right: 'left',
    	  bottom: 'top',
    	  top: 'bottom'
    	};
    	function getOppositePlacement(placement) {
    	  return placement.replace(/left|right|bottom|top/g, function (matched) {
    	    return hash$1[matched];
    	  });
    	}

    	var hash = {
    	  start: 'end',
    	  end: 'start'
    	};
    	function getOppositeVariationPlacement(placement) {
    	  return placement.replace(/start|end/g, function (matched) {
    	    return hash[matched];
    	  });
    	}

    	function getWindowScroll(node) {
    	  var win = getWindow(node);
    	  var scrollLeft = win.pageXOffset;
    	  var scrollTop = win.pageYOffset;
    	  return {
    	    scrollLeft: scrollLeft,
    	    scrollTop: scrollTop
    	  };
    	}

    	function getWindowScrollBarX(element) {
    	  // If <html> has a CSS width greater than the viewport, then this will be
    	  // incorrect for RTL.
    	  // Popper 1 is broken in this case and never had a bug report so let's assume
    	  // it's not an issue. I don't think anyone ever specifies width on <html>
    	  // anyway.
    	  // Browsers where the left scrollbar doesn't cause an issue report `0` for
    	  // this (e.g. Edge 2019, IE11, Safari)
    	  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    	}

    	function getViewportRect(element, strategy) {
    	  var win = getWindow(element);
    	  var html = getDocumentElement(element);
    	  var visualViewport = win.visualViewport;
    	  var width = html.clientWidth;
    	  var height = html.clientHeight;
    	  var x = 0;
    	  var y = 0;

    	  if (visualViewport) {
    	    width = visualViewport.width;
    	    height = visualViewport.height;
    	    var layoutViewport = isLayoutViewport();

    	    if (layoutViewport || !layoutViewport && strategy === 'fixed') {
    	      x = visualViewport.offsetLeft;
    	      y = visualViewport.offsetTop;
    	    }
    	  }

    	  return {
    	    width: width,
    	    height: height,
    	    x: x + getWindowScrollBarX(element),
    	    y: y
    	  };
    	}

    	// of the `<html>` and `<body>` rect bounds if horizontally scrollable

    	function getDocumentRect(element) {
    	  var _element$ownerDocumen;

    	  var html = getDocumentElement(element);
    	  var winScroll = getWindowScroll(element);
    	  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    	  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    	  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    	  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    	  var y = -winScroll.scrollTop;

    	  if (getComputedStyle(body || html).direction === 'rtl') {
    	    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    	  }

    	  return {
    	    width: width,
    	    height: height,
    	    x: x,
    	    y: y
    	  };
    	}

    	function isScrollParent(element) {
    	  // Firefox wants us to check `-x` and `-y` variations as well
    	  var _getComputedStyle = getComputedStyle(element),
    	      overflow = _getComputedStyle.overflow,
    	      overflowX = _getComputedStyle.overflowX,
    	      overflowY = _getComputedStyle.overflowY;

    	  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    	}

    	function getScrollParent(node) {
    	  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
    	    // $FlowFixMe[incompatible-return]: assume body is always available
    	    return node.ownerDocument.body;
    	  }

    	  if (isHTMLElement(node) && isScrollParent(node)) {
    	    return node;
    	  }

    	  return getScrollParent(getParentNode(node));
    	}

    	/*
    	given a DOM element, return the list of all scroll parents, up the list of ancesors
    	until we get to the top window object. This list is what we attach scroll listeners
    	to, because if any of these parent elements scroll, we'll need to re-calculate the
    	reference element's position.
    	*/

    	function listScrollParents(element, list) {
    	  var _element$ownerDocumen;

    	  if (list === void 0) {
    	    list = [];
    	  }

    	  var scrollParent = getScrollParent(element);
    	  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    	  var win = getWindow(scrollParent);
    	  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    	  var updatedList = list.concat(target);
    	  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    	  updatedList.concat(listScrollParents(getParentNode(target)));
    	}

    	function rectToClientRect(rect) {
    	  return Object.assign({}, rect, {
    	    left: rect.x,
    	    top: rect.y,
    	    right: rect.x + rect.width,
    	    bottom: rect.y + rect.height
    	  });
    	}

    	function getInnerBoundingClientRect(element, strategy) {
    	  var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    	  rect.top = rect.top + element.clientTop;
    	  rect.left = rect.left + element.clientLeft;
    	  rect.bottom = rect.top + element.clientHeight;
    	  rect.right = rect.left + element.clientWidth;
    	  rect.width = element.clientWidth;
    	  rect.height = element.clientHeight;
    	  rect.x = rect.left;
    	  rect.y = rect.top;
    	  return rect;
    	}

    	function getClientRectFromMixedType(element, clippingParent, strategy) {
    	  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    	} // A "clipping parent" is an overflowable container with the characteristic of
    	// clipping (or hiding) overflowing elements with a position different from
    	// `initial`


    	function getClippingParents(element) {
    	  var clippingParents = listScrollParents(getParentNode(element));
    	  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
    	  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    	  if (!isElement(clipperElement)) {
    	    return [];
    	  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    	  return clippingParents.filter(function (clippingParent) {
    	    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    	  });
    	} // Gets the maximum area that the element is visible in due to any number of
    	// clipping parents


    	function getClippingRect(element, boundary, rootBoundary, strategy) {
    	  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    	  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    	  var firstClippingParent = clippingParents[0];
    	  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    	    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    	    accRect.top = max(rect.top, accRect.top);
    	    accRect.right = min(rect.right, accRect.right);
    	    accRect.bottom = min(rect.bottom, accRect.bottom);
    	    accRect.left = max(rect.left, accRect.left);
    	    return accRect;
    	  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    	  clippingRect.width = clippingRect.right - clippingRect.left;
    	  clippingRect.height = clippingRect.bottom - clippingRect.top;
    	  clippingRect.x = clippingRect.left;
    	  clippingRect.y = clippingRect.top;
    	  return clippingRect;
    	}

    	function computeOffsets(_ref) {
    	  var reference = _ref.reference,
    	      element = _ref.element,
    	      placement = _ref.placement;
    	  var basePlacement = placement ? getBasePlacement(placement) : null;
    	  var variation = placement ? getVariation(placement) : null;
    	  var commonX = reference.x + reference.width / 2 - element.width / 2;
    	  var commonY = reference.y + reference.height / 2 - element.height / 2;
    	  var offsets;

    	  switch (basePlacement) {
    	    case top:
    	      offsets = {
    	        x: commonX,
    	        y: reference.y - element.height
    	      };
    	      break;

    	    case bottom:
    	      offsets = {
    	        x: commonX,
    	        y: reference.y + reference.height
    	      };
    	      break;

    	    case right:
    	      offsets = {
    	        x: reference.x + reference.width,
    	        y: commonY
    	      };
    	      break;

    	    case left:
    	      offsets = {
    	        x: reference.x - element.width,
    	        y: commonY
    	      };
    	      break;

    	    default:
    	      offsets = {
    	        x: reference.x,
    	        y: reference.y
    	      };
    	  }

    	  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    	  if (mainAxis != null) {
    	    var len = mainAxis === 'y' ? 'height' : 'width';

    	    switch (variation) {
    	      case start:
    	        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
    	        break;

    	      case end:
    	        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
    	        break;
    	    }
    	  }

    	  return offsets;
    	}

    	function detectOverflow(state, options) {
    	  if (options === void 0) {
    	    options = {};
    	  }

    	  var _options = options,
    	      _options$placement = _options.placement,
    	      placement = _options$placement === void 0 ? state.placement : _options$placement,
    	      _options$strategy = _options.strategy,
    	      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
    	      _options$boundary = _options.boundary,
    	      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
    	      _options$rootBoundary = _options.rootBoundary,
    	      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
    	      _options$elementConte = _options.elementContext,
    	      elementContext = _options$elementConte === void 0 ? popper$1 : _options$elementConte,
    	      _options$altBoundary = _options.altBoundary,
    	      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
    	      _options$padding = _options.padding,
    	      padding = _options$padding === void 0 ? 0 : _options$padding;
    	  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    	  var altContext = elementContext === popper$1 ? reference : popper$1;
    	  var popperRect = state.rects.popper;
    	  var element = state.elements[altBoundary ? altContext : elementContext];
    	  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    	  var referenceClientRect = getBoundingClientRect(state.elements.reference);
    	  var popperOffsets = computeOffsets({
    	    reference: referenceClientRect,
    	    element: popperRect,
    	    strategy: 'absolute',
    	    placement: placement
    	  });
    	  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    	  var elementClientRect = elementContext === popper$1 ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    	  // 0 or negative = within the clipping rect

    	  var overflowOffsets = {
    	    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    	    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    	    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    	    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    	  };
    	  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    	  if (elementContext === popper$1 && offsetData) {
    	    var offset = offsetData[placement];
    	    Object.keys(overflowOffsets).forEach(function (key) {
    	      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
    	      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
    	      overflowOffsets[key] += offset[axis] * multiply;
    	    });
    	  }

    	  return overflowOffsets;
    	}

    	function computeAutoPlacement(state, options) {
    	  if (options === void 0) {
    	    options = {};
    	  }

    	  var _options = options,
    	      placement = _options.placement,
    	      boundary = _options.boundary,
    	      rootBoundary = _options.rootBoundary,
    	      padding = _options.padding,
    	      flipVariations = _options.flipVariations,
    	      _options$allowedAutoP = _options.allowedAutoPlacements,
    	      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    	  var variation = getVariation(placement);
    	  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
    	    return getVariation(placement) === variation;
    	  }) : basePlacements;
    	  var allowedPlacements = placements$1.filter(function (placement) {
    	    return allowedAutoPlacements.indexOf(placement) >= 0;
    	  });

    	  if (allowedPlacements.length === 0) {
    	    allowedPlacements = placements$1;

    	    {
    	      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
    	    }
    	  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    	  var overflows = allowedPlacements.reduce(function (acc, placement) {
    	    acc[placement] = detectOverflow(state, {
    	      placement: placement,
    	      boundary: boundary,
    	      rootBoundary: rootBoundary,
    	      padding: padding
    	    })[getBasePlacement(placement)];
    	    return acc;
    	  }, {});
    	  return Object.keys(overflows).sort(function (a, b) {
    	    return overflows[a] - overflows[b];
    	  });
    	}

    	function getExpandedFallbackPlacements(placement) {
    	  if (getBasePlacement(placement) === auto) {
    	    return [];
    	  }

    	  var oppositePlacement = getOppositePlacement(placement);
    	  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    	}

    	function flip(_ref) {
    	  var state = _ref.state,
    	      options = _ref.options,
    	      name = _ref.name;

    	  if (state.modifiersData[name]._skip) {
    	    return;
    	  }

    	  var _options$mainAxis = options.mainAxis,
    	      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
    	      _options$altAxis = options.altAxis,
    	      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
    	      specifiedFallbackPlacements = options.fallbackPlacements,
    	      padding = options.padding,
    	      boundary = options.boundary,
    	      rootBoundary = options.rootBoundary,
    	      altBoundary = options.altBoundary,
    	      _options$flipVariatio = options.flipVariations,
    	      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
    	      allowedAutoPlacements = options.allowedAutoPlacements;
    	  var preferredPlacement = state.options.placement;
    	  var basePlacement = getBasePlacement(preferredPlacement);
    	  var isBasePlacement = basePlacement === preferredPlacement;
    	  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    	  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    	    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
    	      placement: placement,
    	      boundary: boundary,
    	      rootBoundary: rootBoundary,
    	      padding: padding,
    	      flipVariations: flipVariations,
    	      allowedAutoPlacements: allowedAutoPlacements
    	    }) : placement);
    	  }, []);
    	  var referenceRect = state.rects.reference;
    	  var popperRect = state.rects.popper;
    	  var checksMap = new Map();
    	  var makeFallbackChecks = true;
    	  var firstFittingPlacement = placements[0];

    	  for (var i = 0; i < placements.length; i++) {
    	    var placement = placements[i];

    	    var _basePlacement = getBasePlacement(placement);

    	    var isStartVariation = getVariation(placement) === start;
    	    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    	    var len = isVertical ? 'width' : 'height';
    	    var overflow = detectOverflow(state, {
    	      placement: placement,
    	      boundary: boundary,
    	      rootBoundary: rootBoundary,
    	      altBoundary: altBoundary,
    	      padding: padding
    	    });
    	    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

    	    if (referenceRect[len] > popperRect[len]) {
    	      mainVariationSide = getOppositePlacement(mainVariationSide);
    	    }

    	    var altVariationSide = getOppositePlacement(mainVariationSide);
    	    var checks = [];

    	    if (checkMainAxis) {
    	      checks.push(overflow[_basePlacement] <= 0);
    	    }

    	    if (checkAltAxis) {
    	      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    	    }

    	    if (checks.every(function (check) {
    	      return check;
    	    })) {
    	      firstFittingPlacement = placement;
    	      makeFallbackChecks = false;
    	      break;
    	    }

    	    checksMap.set(placement, checks);
    	  }

    	  if (makeFallbackChecks) {
    	    // `2` may be desired in some cases – research later
    	    var numberOfChecks = flipVariations ? 3 : 1;

    	    var _loop = function _loop(_i) {
    	      var fittingPlacement = placements.find(function (placement) {
    	        var checks = checksMap.get(placement);

    	        if (checks) {
    	          return checks.slice(0, _i).every(function (check) {
    	            return check;
    	          });
    	        }
    	      });

    	      if (fittingPlacement) {
    	        firstFittingPlacement = fittingPlacement;
    	        return "break";
    	      }
    	    };

    	    for (var _i = numberOfChecks; _i > 0; _i--) {
    	      var _ret = _loop(_i);

    	      if (_ret === "break") break;
    	    }
    	  }

    	  if (state.placement !== firstFittingPlacement) {
    	    state.modifiersData[name]._skip = true;
    	    state.placement = firstFittingPlacement;
    	    state.reset = true;
    	  }
    	} // eslint-disable-next-line import/no-unused-modules


    	var flip$1 = {
    	  name: 'flip',
    	  enabled: true,
    	  phase: 'main',
    	  fn: flip,
    	  requiresIfExists: ['offset'],
    	  data: {
    	    _skip: false
    	  }
    	};

    	function getSideOffsets(overflow, rect, preventedOffsets) {
    	  if (preventedOffsets === void 0) {
    	    preventedOffsets = {
    	      x: 0,
    	      y: 0
    	    };
    	  }

    	  return {
    	    top: overflow.top - rect.height - preventedOffsets.y,
    	    right: overflow.right - rect.width + preventedOffsets.x,
    	    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    	    left: overflow.left - rect.width - preventedOffsets.x
    	  };
    	}

    	function isAnySideFullyClipped(overflow) {
    	  return [top, right, bottom, left].some(function (side) {
    	    return overflow[side] >= 0;
    	  });
    	}

    	function hide(_ref) {
    	  var state = _ref.state,
    	      name = _ref.name;
    	  var referenceRect = state.rects.reference;
    	  var popperRect = state.rects.popper;
    	  var preventedOffsets = state.modifiersData.preventOverflow;
    	  var referenceOverflow = detectOverflow(state, {
    	    elementContext: 'reference'
    	  });
    	  var popperAltOverflow = detectOverflow(state, {
    	    altBoundary: true
    	  });
    	  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    	  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    	  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    	  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    	  state.modifiersData[name] = {
    	    referenceClippingOffsets: referenceClippingOffsets,
    	    popperEscapeOffsets: popperEscapeOffsets,
    	    isReferenceHidden: isReferenceHidden,
    	    hasPopperEscaped: hasPopperEscaped
    	  };
    	  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    	    'data-popper-reference-hidden': isReferenceHidden,
    	    'data-popper-escaped': hasPopperEscaped
    	  });
    	} // eslint-disable-next-line import/no-unused-modules


    	var hide$1 = {
    	  name: 'hide',
    	  enabled: true,
    	  phase: 'main',
    	  requiresIfExists: ['preventOverflow'],
    	  fn: hide
    	};

    	function distanceAndSkiddingToXY(placement, rects, offset) {
    	  var basePlacement = getBasePlacement(placement);
    	  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    	  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    	    placement: placement
    	  })) : offset,
    	      skidding = _ref[0],
    	      distance = _ref[1];

    	  skidding = skidding || 0;
    	  distance = (distance || 0) * invertDistance;
    	  return [left, right].indexOf(basePlacement) >= 0 ? {
    	    x: distance,
    	    y: skidding
    	  } : {
    	    x: skidding,
    	    y: distance
    	  };
    	}

    	function offset(_ref2) {
    	  var state = _ref2.state,
    	      options = _ref2.options,
    	      name = _ref2.name;
    	  var _options$offset = options.offset,
    	      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    	  var data = placements.reduce(function (acc, placement) {
    	    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    	    return acc;
    	  }, {});
    	  var _data$state$placement = data[state.placement],
    	      x = _data$state$placement.x,
    	      y = _data$state$placement.y;

    	  if (state.modifiersData.popperOffsets != null) {
    	    state.modifiersData.popperOffsets.x += x;
    	    state.modifiersData.popperOffsets.y += y;
    	  }

    	  state.modifiersData[name] = data;
    	} // eslint-disable-next-line import/no-unused-modules


    	var offset$1 = {
    	  name: 'offset',
    	  enabled: true,
    	  phase: 'main',
    	  requires: ['popperOffsets'],
    	  fn: offset
    	};

    	function popperOffsets(_ref) {
    	  var state = _ref.state,
    	      name = _ref.name;
    	  // Offsets are the actual position the popper needs to have to be
    	  // properly positioned near its reference element
    	  // This is the most basic placement, and will be adjusted by
    	  // the modifiers in the next step
    	  state.modifiersData[name] = computeOffsets({
    	    reference: state.rects.reference,
    	    element: state.rects.popper,
    	    strategy: 'absolute',
    	    placement: state.placement
    	  });
    	} // eslint-disable-next-line import/no-unused-modules


    	var popperOffsets$1 = {
    	  name: 'popperOffsets',
    	  enabled: true,
    	  phase: 'read',
    	  fn: popperOffsets,
    	  data: {}
    	};

    	function getAltAxis(axis) {
    	  return axis === 'x' ? 'y' : 'x';
    	}

    	function preventOverflow(_ref) {
    	  var state = _ref.state,
    	      options = _ref.options,
    	      name = _ref.name;
    	  var _options$mainAxis = options.mainAxis,
    	      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
    	      _options$altAxis = options.altAxis,
    	      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
    	      boundary = options.boundary,
    	      rootBoundary = options.rootBoundary,
    	      altBoundary = options.altBoundary,
    	      padding = options.padding,
    	      _options$tether = options.tether,
    	      tether = _options$tether === void 0 ? true : _options$tether,
    	      _options$tetherOffset = options.tetherOffset,
    	      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    	  var overflow = detectOverflow(state, {
    	    boundary: boundary,
    	    rootBoundary: rootBoundary,
    	    padding: padding,
    	    altBoundary: altBoundary
    	  });
    	  var basePlacement = getBasePlacement(state.placement);
    	  var variation = getVariation(state.placement);
    	  var isBasePlacement = !variation;
    	  var mainAxis = getMainAxisFromPlacement(basePlacement);
    	  var altAxis = getAltAxis(mainAxis);
    	  var popperOffsets = state.modifiersData.popperOffsets;
    	  var referenceRect = state.rects.reference;
    	  var popperRect = state.rects.popper;
    	  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    	    placement: state.placement
    	  })) : tetherOffset;
    	  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
    	    mainAxis: tetherOffsetValue,
    	    altAxis: tetherOffsetValue
    	  } : Object.assign({
    	    mainAxis: 0,
    	    altAxis: 0
    	  }, tetherOffsetValue);
    	  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    	  var data = {
    	    x: 0,
    	    y: 0
    	  };

    	  if (!popperOffsets) {
    	    return;
    	  }

    	  if (checkMainAxis) {
    	    var _offsetModifierState$;

    	    var mainSide = mainAxis === 'y' ? top : left;
    	    var altSide = mainAxis === 'y' ? bottom : right;
    	    var len = mainAxis === 'y' ? 'height' : 'width';
    	    var offset = popperOffsets[mainAxis];
    	    var min$1 = offset + overflow[mainSide];
    	    var max$1 = offset - overflow[altSide];
    	    var additive = tether ? -popperRect[len] / 2 : 0;
    	    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    	    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    	    // outside the reference bounds

    	    var arrowElement = state.elements.arrow;
    	    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
    	      width: 0,
    	      height: 0
    	    };
    	    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
    	    var arrowPaddingMin = arrowPaddingObject[mainSide];
    	    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    	    // to include its full size in the calculation. If the reference is small
    	    // and near the edge of a boundary, the popper can overflow even if the
    	    // reference is not overflowing as well (e.g. virtual elements with no
    	    // width or height)

    	    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    	    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    	    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    	    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    	    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    	    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    	    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
    	    var tetherMax = offset + maxOffset - offsetModifierValue;
    	    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
    	    popperOffsets[mainAxis] = preventedOffset;
    	    data[mainAxis] = preventedOffset - offset;
    	  }

    	  if (checkAltAxis) {
    	    var _offsetModifierState$2;

    	    var _mainSide = mainAxis === 'x' ? top : left;

    	    var _altSide = mainAxis === 'x' ? bottom : right;

    	    var _offset = popperOffsets[altAxis];

    	    var _len = altAxis === 'y' ? 'height' : 'width';

    	    var _min = _offset + overflow[_mainSide];

    	    var _max = _offset - overflow[_altSide];

    	    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

    	    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

    	    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

    	    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

    	    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

    	    popperOffsets[altAxis] = _preventedOffset;
    	    data[altAxis] = _preventedOffset - _offset;
    	  }

    	  state.modifiersData[name] = data;
    	} // eslint-disable-next-line import/no-unused-modules


    	var preventOverflow$1 = {
    	  name: 'preventOverflow',
    	  enabled: true,
    	  phase: 'main',
    	  fn: preventOverflow,
    	  requiresIfExists: ['offset']
    	};

    	function getHTMLElementScroll(element) {
    	  return {
    	    scrollLeft: element.scrollLeft,
    	    scrollTop: element.scrollTop
    	  };
    	}

    	function getNodeScroll(node) {
    	  if (node === getWindow(node) || !isHTMLElement(node)) {
    	    return getWindowScroll(node);
    	  } else {
    	    return getHTMLElementScroll(node);
    	  }
    	}

    	function isElementScaled(element) {
    	  var rect = element.getBoundingClientRect();
    	  var scaleX = round(rect.width) / element.offsetWidth || 1;
    	  var scaleY = round(rect.height) / element.offsetHeight || 1;
    	  return scaleX !== 1 || scaleY !== 1;
    	} // Returns the composite rect of an element relative to its offsetParent.
    	// Composite means it takes into account transforms as well as layout.


    	function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    	  if (isFixed === void 0) {
    	    isFixed = false;
    	  }

    	  var isOffsetParentAnElement = isHTMLElement(offsetParent);
    	  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    	  var documentElement = getDocumentElement(offsetParent);
    	  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    	  var scroll = {
    	    scrollLeft: 0,
    	    scrollTop: 0
    	  };
    	  var offsets = {
    	    x: 0,
    	    y: 0
    	  };

    	  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    	    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    	    isScrollParent(documentElement)) {
    	      scroll = getNodeScroll(offsetParent);
    	    }

    	    if (isHTMLElement(offsetParent)) {
    	      offsets = getBoundingClientRect(offsetParent, true);
    	      offsets.x += offsetParent.clientLeft;
    	      offsets.y += offsetParent.clientTop;
    	    } else if (documentElement) {
    	      offsets.x = getWindowScrollBarX(documentElement);
    	    }
    	  }

    	  return {
    	    x: rect.left + scroll.scrollLeft - offsets.x,
    	    y: rect.top + scroll.scrollTop - offsets.y,
    	    width: rect.width,
    	    height: rect.height
    	  };
    	}

    	function order(modifiers) {
    	  var map = new Map();
    	  var visited = new Set();
    	  var result = [];
    	  modifiers.forEach(function (modifier) {
    	    map.set(modifier.name, modifier);
    	  }); // On visiting object, check for its dependencies and visit them recursively

    	  function sort(modifier) {
    	    visited.add(modifier.name);
    	    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    	    requires.forEach(function (dep) {
    	      if (!visited.has(dep)) {
    	        var depModifier = map.get(dep);

    	        if (depModifier) {
    	          sort(depModifier);
    	        }
    	      }
    	    });
    	    result.push(modifier);
    	  }

    	  modifiers.forEach(function (modifier) {
    	    if (!visited.has(modifier.name)) {
    	      // check for visited object
    	      sort(modifier);
    	    }
    	  });
    	  return result;
    	}

    	function orderModifiers(modifiers) {
    	  // order based on dependencies
    	  var orderedModifiers = order(modifiers); // order based on phase

    	  return modifierPhases.reduce(function (acc, phase) {
    	    return acc.concat(orderedModifiers.filter(function (modifier) {
    	      return modifier.phase === phase;
    	    }));
    	  }, []);
    	}

    	function debounce(fn) {
    	  var pending;
    	  return function () {
    	    if (!pending) {
    	      pending = new Promise(function (resolve) {
    	        Promise.resolve().then(function () {
    	          pending = undefined;
    	          resolve(fn());
    	        });
    	      });
    	    }

    	    return pending;
    	  };
    	}

    	function format(str) {
    	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    	    args[_key - 1] = arguments[_key];
    	  }

    	  return [].concat(args).reduce(function (p, c) {
    	    return p.replace(/%s/, c);
    	  }, str);
    	}

    	var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
    	var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
    	var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
    	function validateModifiers(modifiers) {
    	  modifiers.forEach(function (modifier) {
    	    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
    	    .filter(function (value, index, self) {
    	      return self.indexOf(value) === index;
    	    }).forEach(function (key) {
    	      switch (key) {
    	        case 'name':
    	          if (typeof modifier.name !== 'string') {
    	            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
    	          }

    	          break;

    	        case 'enabled':
    	          if (typeof modifier.enabled !== 'boolean') {
    	            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
    	          }

    	          break;

    	        case 'phase':
    	          if (modifierPhases.indexOf(modifier.phase) < 0) {
    	            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
    	          }

    	          break;

    	        case 'fn':
    	          if (typeof modifier.fn !== 'function') {
    	            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
    	          }

    	          break;

    	        case 'effect':
    	          if (modifier.effect != null && typeof modifier.effect !== 'function') {
    	            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
    	          }

    	          break;

    	        case 'requires':
    	          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
    	            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
    	          }

    	          break;

    	        case 'requiresIfExists':
    	          if (!Array.isArray(modifier.requiresIfExists)) {
    	            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
    	          }

    	          break;

    	        case 'options':
    	        case 'data':
    	          break;

    	        default:
    	          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
    	            return "\"" + s + "\"";
    	          }).join(', ') + "; but \"" + key + "\" was provided.");
    	      }

    	      modifier.requires && modifier.requires.forEach(function (requirement) {
    	        if (modifiers.find(function (mod) {
    	          return mod.name === requirement;
    	        }) == null) {
    	          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
    	        }
    	      });
    	    });
    	  });
    	}

    	function uniqueBy(arr, fn) {
    	  var identifiers = new Set();
    	  return arr.filter(function (item) {
    	    var identifier = fn(item);

    	    if (!identifiers.has(identifier)) {
    	      identifiers.add(identifier);
    	      return true;
    	    }
    	  });
    	}

    	function mergeByName(modifiers) {
    	  var merged = modifiers.reduce(function (merged, current) {
    	    var existing = merged[current.name];
    	    merged[current.name] = existing ? Object.assign({}, existing, current, {
    	      options: Object.assign({}, existing.options, current.options),
    	      data: Object.assign({}, existing.data, current.data)
    	    }) : current;
    	    return merged;
    	  }, {}); // IE11 does not support Object.values

    	  return Object.keys(merged).map(function (key) {
    	    return merged[key];
    	  });
    	}

    	var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
    	var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
    	var DEFAULT_OPTIONS = {
    	  placement: 'bottom',
    	  modifiers: [],
    	  strategy: 'absolute'
    	};

    	function areValidElements() {
    	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    	    args[_key] = arguments[_key];
    	  }

    	  return !args.some(function (element) {
    	    return !(element && typeof element.getBoundingClientRect === 'function');
    	  });
    	}

    	function popperGenerator(generatorOptions) {
    	  if (generatorOptions === void 0) {
    	    generatorOptions = {};
    	  }

    	  var _generatorOptions = generatorOptions,
    	      _generatorOptions$def = _generatorOptions.defaultModifiers,
    	      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
    	      _generatorOptions$def2 = _generatorOptions.defaultOptions,
    	      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    	  return function createPopper(reference, popper, options) {
    	    if (options === void 0) {
    	      options = defaultOptions;
    	    }

    	    var state = {
    	      placement: 'bottom',
    	      orderedModifiers: [],
    	      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
    	      modifiersData: {},
    	      elements: {
    	        reference: reference,
    	        popper: popper
    	      },
    	      attributes: {},
    	      styles: {}
    	    };
    	    var effectCleanupFns = [];
    	    var isDestroyed = false;
    	    var instance = {
    	      state: state,
    	      setOptions: function setOptions(setOptionsAction) {
    	        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
    	        cleanupModifierEffects();
    	        state.options = Object.assign({}, defaultOptions, state.options, options);
    	        state.scrollParents = {
    	          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
    	          popper: listScrollParents(popper)
    	        }; // Orders the modifiers based on their dependencies and `phase`
    	        // properties

    	        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

    	        state.orderedModifiers = orderedModifiers.filter(function (m) {
    	          return m.enabled;
    	        }); // Validate the provided modifiers so that the consumer will get warned
    	        // if one of the modifiers is invalid for any reason

    	        {
    	          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
    	            var name = _ref.name;
    	            return name;
    	          });
    	          validateModifiers(modifiers);

    	          if (getBasePlacement(state.options.placement) === auto) {
    	            var flipModifier = state.orderedModifiers.find(function (_ref2) {
    	              var name = _ref2.name;
    	              return name === 'flip';
    	            });

    	            if (!flipModifier) {
    	              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
    	            }
    	          }

    	          var _getComputedStyle = getComputedStyle(popper),
    	              marginTop = _getComputedStyle.marginTop,
    	              marginRight = _getComputedStyle.marginRight,
    	              marginBottom = _getComputedStyle.marginBottom,
    	              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
    	          // cause bugs with positioning, so we'll warn the consumer


    	          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
    	            return parseFloat(margin);
    	          })) {
    	            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
    	          }
    	        }

    	        runModifierEffects();
    	        return instance.update();
    	      },
    	      // Sync update – it will always be executed, even if not necessary. This
    	      // is useful for low frequency updates where sync behavior simplifies the
    	      // logic.
    	      // For high frequency updates (e.g. `resize` and `scroll` events), always
    	      // prefer the async Popper#update method
    	      forceUpdate: function forceUpdate() {
    	        if (isDestroyed) {
    	          return;
    	        }

    	        var _state$elements = state.elements,
    	            reference = _state$elements.reference,
    	            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
    	        // anymore

    	        if (!areValidElements(reference, popper)) {
    	          {
    	            console.error(INVALID_ELEMENT_ERROR);
    	          }

    	          return;
    	        } // Store the reference and popper rects to be read by modifiers


    	        state.rects = {
    	          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
    	          popper: getLayoutRect(popper)
    	        }; // Modifiers have the ability to reset the current update cycle. The
    	        // most common use case for this is the `flip` modifier changing the
    	        // placement, which then needs to re-run all the modifiers, because the
    	        // logic was previously ran for the previous placement and is therefore
    	        // stale/incorrect

    	        state.reset = false;
    	        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
    	        // is filled with the initial data specified by the modifier. This means
    	        // it doesn't persist and is fresh on each update.
    	        // To ensure persistent data, use `${name}#persistent`

    	        state.orderedModifiers.forEach(function (modifier) {
    	          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
    	        });
    	        var __debug_loops__ = 0;

    	        for (var index = 0; index < state.orderedModifiers.length; index++) {
    	          {
    	            __debug_loops__ += 1;

    	            if (__debug_loops__ > 100) {
    	              console.error(INFINITE_LOOP_ERROR);
    	              break;
    	            }
    	          }

    	          if (state.reset === true) {
    	            state.reset = false;
    	            index = -1;
    	            continue;
    	          }

    	          var _state$orderedModifie = state.orderedModifiers[index],
    	              fn = _state$orderedModifie.fn,
    	              _state$orderedModifie2 = _state$orderedModifie.options,
    	              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
    	              name = _state$orderedModifie.name;

    	          if (typeof fn === 'function') {
    	            state = fn({
    	              state: state,
    	              options: _options,
    	              name: name,
    	              instance: instance
    	            }) || state;
    	          }
    	        }
    	      },
    	      // Async and optimistically optimized update – it will not be executed if
    	      // not necessary (debounced to run at most once-per-tick)
    	      update: debounce(function () {
    	        return new Promise(function (resolve) {
    	          instance.forceUpdate();
    	          resolve(state);
    	        });
    	      }),
    	      destroy: function destroy() {
    	        cleanupModifierEffects();
    	        isDestroyed = true;
    	      }
    	    };

    	    if (!areValidElements(reference, popper)) {
    	      {
    	        console.error(INVALID_ELEMENT_ERROR);
    	      }

    	      return instance;
    	    }

    	    instance.setOptions(options).then(function (state) {
    	      if (!isDestroyed && options.onFirstUpdate) {
    	        options.onFirstUpdate(state);
    	      }
    	    }); // Modifiers have the ability to execute arbitrary code before the first
    	    // update cycle runs. They will be executed in the same order as the update
    	    // cycle. This is useful when a modifier adds some persistent data that
    	    // other modifiers need to use, but the modifier is run after the dependent
    	    // one.

    	    function runModifierEffects() {
    	      state.orderedModifiers.forEach(function (_ref3) {
    	        var name = _ref3.name,
    	            _ref3$options = _ref3.options,
    	            options = _ref3$options === void 0 ? {} : _ref3$options,
    	            effect = _ref3.effect;

    	        if (typeof effect === 'function') {
    	          var cleanupFn = effect({
    	            state: state,
    	            name: name,
    	            instance: instance,
    	            options: options
    	          });

    	          var noopFn = function noopFn() {};

    	          effectCleanupFns.push(cleanupFn || noopFn);
    	        }
    	      });
    	    }

    	    function cleanupModifierEffects() {
    	      effectCleanupFns.forEach(function (fn) {
    	        return fn();
    	      });
    	      effectCleanupFns = [];
    	    }

    	    return instance;
    	  };
    	}

    	// For the common JS build we will turn this file into a bundle with no imports.
    	// This is b/c the Popper lib is all esm files, and would break in a common js only environment
    	const createPopper = popperGenerator({
    	  defaultModifiers: [
    	    hide$1,
    	    popperOffsets$1,
    	    computeStyles$1,
    	    eventListeners,
    	    offset$1,
    	    flip$1,
    	    preventOverflow$1,
    	    arrow$1,
    	  ],
    	});

    	popper.createPopper = createPopper;
    	popper.placements = placements;
    	return popper;
    }

    var hasRequiredUsePopper;

    function requireUsePopper () {
    	if (hasRequiredUsePopper) return usePopper.exports;
    	hasRequiredUsePopper = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports["default"] = void 0;

    		var _extends2 = _interopRequireDefault(require_extends());

    		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLooseExports);

    		var _react = React__default.default;

    		var _useSafeState2 = _interopRequireDefault(requireUseSafeState());

    		var _popper = requirePopper();

    		var initialPopperStyles = function initialPopperStyles(position) {
    		  return {
    		    position: position,
    		    top: '0',
    		    left: '0',
    		    opacity: '0',
    		    pointerEvents: 'none'
    		  };
    		};

    		var disabledApplyStylesModifier = {
    		  name: 'applyStyles',
    		  enabled: false
    		}; // In order to satisfy the current usage of options, including undefined

    		var ariaDescribedByModifier = {
    		  name: 'ariaDescribedBy',
    		  enabled: true,
    		  phase: 'afterWrite',
    		  effect: function effect(_ref) {
    		    var state = _ref.state;
    		    return function () {
    		      var _state$elements = state.elements,
    		          reference = _state$elements.reference,
    		          popper = _state$elements.popper;

    		      if ('removeAttribute' in reference) {
    		        var ids = (reference.getAttribute('aria-describedby') || '').split(',').filter(function (id) {
    		          return id.trim() !== popper.id;
    		        });
    		        if (!ids.length) reference.removeAttribute('aria-describedby');else reference.setAttribute('aria-describedby', ids.join(','));
    		      }
    		    };
    		  },
    		  fn: function fn(_ref2) {
    		    var _popper$getAttribute;

    		    var state = _ref2.state;
    		    var _state$elements2 = state.elements,
    		        popper = _state$elements2.popper,
    		        reference = _state$elements2.reference;
    		    var role = (_popper$getAttribute = popper.getAttribute('role')) == null ? void 0 : _popper$getAttribute.toLowerCase();

    		    if (popper.id && role === 'tooltip' && 'setAttribute' in reference) {
    		      var ids = reference.getAttribute('aria-describedby');

    		      if (ids && ids.split(',').indexOf(popper.id) !== -1) {
    		        return;
    		      }

    		      reference.setAttribute('aria-describedby', ids ? ids + "," + popper.id : popper.id);
    		    }
    		  }
    		};
    		var EMPTY_MODIFIERS = [];
    		/**
    		 * Position an element relative some reference element using Popper.js
    		 *
    		 * @param referenceElement
    		 * @param popperElement
    		 * @param {object}      options
    		 * @param {object=}     options.modifiers Popper.js modifiers
    		 * @param {boolean=}    options.enabled toggle the popper functionality on/off
    		 * @param {string=}     options.placement The popper element placement relative to the reference element
    		 * @param {string=}     options.strategy the positioning strategy
    		 * @param {boolean=}    options.eventsEnabled have Popper listen on window resize events to reposition the element
    		 * @param {function=}   options.onCreate called when the popper is created
    		 * @param {function=}   options.onUpdate called when the popper is updated
    		 *
    		 * @returns {UsePopperState} The popper state
    		 */

    		function usePopper(referenceElement, popperElement, _temp) {
    		  var _ref3 = _temp === void 0 ? {} : _temp,
    		      _ref3$enabled = _ref3.enabled,
    		      enabled = _ref3$enabled === void 0 ? true : _ref3$enabled,
    		      _ref3$placement = _ref3.placement,
    		      placement = _ref3$placement === void 0 ? 'bottom' : _ref3$placement,
    		      _ref3$strategy = _ref3.strategy,
    		      strategy = _ref3$strategy === void 0 ? 'absolute' : _ref3$strategy,
    		      _ref3$modifiers = _ref3.modifiers,
    		      modifiers = _ref3$modifiers === void 0 ? EMPTY_MODIFIERS : _ref3$modifiers,
    		      config = (0, _objectWithoutPropertiesLoose2["default"])(_ref3, ["enabled", "placement", "strategy", "modifiers"]);

    		  var popperInstanceRef = (0, _react.useRef)();
    		  var update = (0, _react.useCallback)(function () {
    		    var _popperInstanceRef$cu;

    		    (_popperInstanceRef$cu = popperInstanceRef.current) == null ? void 0 : _popperInstanceRef$cu.update();
    		  }, []);
    		  var forceUpdate = (0, _react.useCallback)(function () {
    		    var _popperInstanceRef$cu2;

    		    (_popperInstanceRef$cu2 = popperInstanceRef.current) == null ? void 0 : _popperInstanceRef$cu2.forceUpdate();
    		  }, []);

    		  var _useSafeState = (0, _useSafeState2["default"])((0, _react.useState)({
    		    placement: placement,
    		    update: update,
    		    forceUpdate: forceUpdate,
    		    attributes: {},
    		    styles: {
    		      popper: initialPopperStyles(strategy),
    		      arrow: {}
    		    }
    		  })),
    		      popperState = _useSafeState[0],
    		      setState = _useSafeState[1];

    		  var updateModifier = (0, _react.useMemo)(function () {
    		    return {
    		      name: 'updateStateModifier',
    		      enabled: true,
    		      phase: 'write',
    		      requires: ['computeStyles'],
    		      fn: function fn(_ref4) {
    		        var state = _ref4.state;
    		        var styles = {};
    		        var attributes = {};
    		        Object.keys(state.elements).forEach(function (element) {
    		          styles[element] = state.styles[element];
    		          attributes[element] = state.attributes[element];
    		        });
    		        setState({
    		          state: state,
    		          styles: styles,
    		          attributes: attributes,
    		          update: update,
    		          forceUpdate: forceUpdate,
    		          placement: state.placement
    		        });
    		      }
    		    };
    		  }, [update, forceUpdate, setState]);
    		  (0, _react.useEffect)(function () {
    		    if (!popperInstanceRef.current || !enabled) return;
    		    popperInstanceRef.current.setOptions({
    		      placement: placement,
    		      strategy: strategy,
    		      modifiers: [].concat(modifiers, [updateModifier, disabledApplyStylesModifier])
    		    }); // intentionally NOT re-running on new modifiers
    		    // eslint-disable-next-line react-hooks/exhaustive-deps
    		  }, [strategy, placement, updateModifier, enabled]);
    		  (0, _react.useEffect)(function () {
    		    if (!enabled || referenceElement == null || popperElement == null) {
    		      return undefined;
    		    }

    		    popperInstanceRef.current = (0, _popper.createPopper)(referenceElement, popperElement, (0, _extends2["default"])({}, config, {
    		      placement: placement,
    		      strategy: strategy,
    		      modifiers: [].concat(modifiers, [ariaDescribedByModifier, updateModifier])
    		    }));
    		    return function () {
    		      if (popperInstanceRef.current != null) {
    		        popperInstanceRef.current.destroy();
    		        popperInstanceRef.current = undefined;
    		        setState(function (s) {
    		          return (0, _extends2["default"])({}, s, {
    		            attributes: {},
    		            styles: {
    		              popper: initialPopperStyles(strategy)
    		            }
    		          });
    		        });
    		      }
    		    }; // This is only run once to _create_ the popper
    		    // eslint-disable-next-line react-hooks/exhaustive-deps
    		  }, [enabled, referenceElement, popperElement]);
    		  return popperState;
    		}

    		var _default = usePopper;
    		exports["default"] = _default;
    		module.exports = exports.default; 
    	} (usePopper, usePopper.exports));
    	return usePopper.exports;
    }

    var useRootClose = {exports: {}};

    var listen = {exports: {}};

    var removeEventListener = {exports: {}};

    var hasRequiredRemoveEventListener;

    function requireRemoveEventListener () {
    	if (hasRequiredRemoveEventListener) return removeEventListener.exports;
    	hasRequiredRemoveEventListener = 1;
    	(function (module, exports) {

    		exports.__esModule = true;
    		exports.default = void 0;

    		/**
    		 * A `removeEventListener` ponyfill
    		 * 
    		 * @param node the element
    		 * @param eventName the event name
    		 * @param handle the handler
    		 * @param options event options
    		 */
    		function removeEventListener(node, eventName, handler, options) {
    		  var capture = options && typeof options !== 'boolean' ? options.capture : options;
    		  node.removeEventListener(eventName, handler, capture);

    		  if (handler.__once) {
    		    node.removeEventListener(eventName, handler.__once, capture);
    		  }
    		}

    		var _default = removeEventListener;
    		exports.default = _default;
    		module.exports = exports["default"]; 
    	} (removeEventListener, removeEventListener.exports));
    	return removeEventListener.exports;
    }

    (function (module, exports) {

    	var _interopRequireDefault = interopRequireDefaultExports;

    	exports.__esModule = true;
    	exports.default = void 0;

    	var _addEventListener = _interopRequireDefault(requireAddEventListener());

    	var _removeEventListener = _interopRequireDefault(requireRemoveEventListener());

    	function listen(node, eventName, handler, options) {
    	  (0, _addEventListener.default)(node, eventName, handler, options);
    	  return function () {
    	    (0, _removeEventListener.default)(node, eventName, handler, options);
    	  };
    	}

    	var _default = listen;
    	exports.default = _default;
    	module.exports = exports["default"]; 
    } (listen, listen.exports));

    var listenExports = listen.exports;

    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var warning_1;
    var hasRequiredWarning;

    function requireWarning () {
    	if (hasRequiredWarning) return warning_1;
    	hasRequiredWarning = 1;

    	var warning = function() {};

    	{
    	  var printWarning = function printWarning(format, args) {
    	    var len = arguments.length;
    	    args = new Array(len > 1 ? len - 1 : 0);
    	    for (var key = 1; key < len; key++) {
    	      args[key - 1] = arguments[key];
    	    }
    	    var argIndex = 0;
    	    var message = 'Warning: ' +
    	      format.replace(/%s/g, function() {
    	        return args[argIndex++];
    	      });
    	    if (typeof console !== 'undefined') {
    	      console.error(message);
    	    }
    	    try {
    	      // --- Welcome to debugging React ---
    	      // This error was thrown as a convenience so that you can use this stack
    	      // to find the callsite that caused this warning to fire.
    	      throw new Error(message);
    	    } catch (x) {}
    	  };

    	  warning = function(condition, format, args) {
    	    var len = arguments.length;
    	    args = new Array(len > 2 ? len - 2 : 0);
    	    for (var key = 2; key < len; key++) {
    	      args[key - 2] = arguments[key];
    	    }
    	    if (format === undefined) {
    	      throw new Error(
    	          '`warning(condition, format, ...args)` requires a warning ' +
    	          'message argument'
    	      );
    	    }
    	    if (!condition) {
    	      printWarning.apply(null, [format].concat(args));
    	    }
    	  };
    	}

    	warning_1 = warning;
    	return warning_1;
    }

    var ownerDocument = {exports: {}};

    var safeFindDOMNode = {exports: {}};

    var hasRequiredSafeFindDOMNode;

    function requireSafeFindDOMNode () {
    	if (hasRequiredSafeFindDOMNode) return safeFindDOMNode.exports;
    	hasRequiredSafeFindDOMNode = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports["default"] = safeFindDOMNode;

    		var _reactDom = _interopRequireDefault(require$$1__default.default);

    		function safeFindDOMNode(componentOrElement) {
    		  if (componentOrElement && 'setState' in componentOrElement) {
    		    return _reactDom["default"].findDOMNode(componentOrElement);
    		  }

    		  return componentOrElement != null ? componentOrElement : null;
    		}

    		module.exports = exports.default; 
    	} (safeFindDOMNode, safeFindDOMNode.exports));
    	return safeFindDOMNode.exports;
    }

    var hasRequiredOwnerDocument;

    function requireOwnerDocument () {
    	if (hasRequiredOwnerDocument) return ownerDocument.exports;
    	hasRequiredOwnerDocument = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports["default"] = void 0;

    		var _ownerDocument = _interopRequireDefault(requireOwnerDocument$1());

    		var _safeFindDOMNode = _interopRequireDefault(requireSafeFindDOMNode());

    		var _default = function _default(componentOrElement) {
    		  return (0, _ownerDocument["default"])((0, _safeFindDOMNode["default"])(componentOrElement));
    		};

    		exports["default"] = _default;
    		module.exports = exports.default; 
    	} (ownerDocument, ownerDocument.exports));
    	return ownerDocument.exports;
    }

    var hasRequiredUseRootClose;

    function requireUseRootClose () {
    	if (hasRequiredUseRootClose) return useRootClose.exports;
    	hasRequiredUseRootClose = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports["default"] = void 0;

    		var _contains = _interopRequireDefault(requireContains());

    		var _listen = _interopRequireDefault(listenExports);

    		var _react = React__default.default;

    		var _useEventCallback = _interopRequireDefault(requireUseEventCallback());

    		var _warning = _interopRequireDefault(requireWarning());

    		var _ownerDocument = _interopRequireDefault(requireOwnerDocument());

    		var escapeKeyCode = 27;

    		var noop = function noop() {};

    		function isLeftClickEvent(event) {
    		  return event.button === 0;
    		}

    		function isModifiedEvent(event) {
    		  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
    		}

    		var getRefTarget = function getRefTarget(ref) {
    		  return ref && ('current' in ref ? ref.current : ref);
    		};

    		/**
    		 * The `useRootClose` hook registers your callback on the document
    		 * when rendered. Powers the `<Overlay/>` component. This is used achieve modal
    		 * style behavior where your callback is triggered when the user tries to
    		 * interact with the rest of the document or hits the `esc` key.
    		 *
    		 * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary
    		 * @param {function} onRootClose
    		 * @param {object=}  options
    		 * @param {boolean=} options.disabled
    		 * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on
    		 */
    		function useRootClose(ref, onRootClose, _temp) {
    		  var _ref = _temp === void 0 ? {} : _temp,
    		      disabled = _ref.disabled,
    		      _ref$clickTrigger = _ref.clickTrigger,
    		      clickTrigger = _ref$clickTrigger === void 0 ? 'click' : _ref$clickTrigger;

    		  var preventMouseRootCloseRef = (0, _react.useRef)(false);
    		  var onClose = onRootClose || noop;
    		  var handleMouseCapture = (0, _react.useCallback)(function (e) {
    		    var _e$composedPath$;

    		    var currentTarget = getRefTarget(ref);
    		    (0, _warning["default"])(!!currentTarget, 'RootClose captured a close event but does not have a ref to compare it to. ' + 'useRootClose(), should be passed a ref that resolves to a DOM node');
    		    preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!(0, _contains["default"])(currentTarget, (_e$composedPath$ = e.composedPath == null ? void 0 : e.composedPath()[0]) != null ? _e$composedPath$ : e.target);
    		  }, [ref]);
    		  var handleMouse = (0, _useEventCallback["default"])(function (e) {
    		    if (!preventMouseRootCloseRef.current) {
    		      onClose(e);
    		    }
    		  });
    		  var handleKeyUp = (0, _useEventCallback["default"])(function (e) {
    		    if (e.keyCode === escapeKeyCode) {
    		      onClose(e);
    		    }
    		  });
    		  (0, _react.useEffect)(function () {
    		    if (disabled || ref == null) return undefined; // Store the current event to avoid triggering handlers immediately
    		    // https://github.com/facebook/react/issues/20074

    		    var currentEvent = window.event;
    		    var doc = (0, _ownerDocument["default"])(getRefTarget(ref)); // Use capture for this listener so it fires before React's listener, to
    		    // avoid false positives in the contains() check below if the target DOM
    		    // element is removed in the React mouse callback.

    		    var removeMouseCaptureListener = (0, _listen["default"])(doc, clickTrigger, handleMouseCapture, true);
    		    var removeMouseListener = (0, _listen["default"])(doc, clickTrigger, function (e) {
    		      // skip if this event is the same as the one running when we added the handlers
    		      if (e === currentEvent) {
    		        currentEvent = undefined;
    		        return;
    		      }

    		      handleMouse(e);
    		    });
    		    var removeKeyupListener = (0, _listen["default"])(doc, 'keyup', function (e) {
    		      // skip if this event is the same as the one running when we added the handlers
    		      if (e === currentEvent) {
    		        currentEvent = undefined;
    		        return;
    		      }

    		      handleKeyUp(e);
    		    });
    		    var mobileSafariHackListeners = [];

    		    if ('ontouchstart' in doc.documentElement) {
    		      mobileSafariHackListeners = [].slice.call(doc.body.children).map(function (el) {
    		        return (0, _listen["default"])(el, 'mousemove', noop);
    		      });
    		    }

    		    return function () {
    		      removeMouseCaptureListener();
    		      removeMouseListener();
    		      removeKeyupListener();
    		      mobileSafariHackListeners.forEach(function (remove) {
    		        return remove();
    		      });
    		    };
    		  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse, handleKeyUp]);
    		}

    		var _default = useRootClose;
    		exports["default"] = _default;
    		module.exports = exports.default; 
    	} (useRootClose, useRootClose.exports));
    	return useRootClose.exports;
    }

    var mergeOptionsWithPopperConfig = {};

    var hasRequiredMergeOptionsWithPopperConfig;

    function requireMergeOptionsWithPopperConfig () {
    	if (hasRequiredMergeOptionsWithPopperConfig) return mergeOptionsWithPopperConfig;
    	hasRequiredMergeOptionsWithPopperConfig = 1;
    	(function (exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.toModifierMap = toModifierMap;
    		exports.toModifierArray = toModifierArray;
    		exports["default"] = mergeOptionsWithPopperConfig;

    		var _extends2 = _interopRequireDefault(require_extends());

    		function toModifierMap(modifiers) {
    		  var result = {};

    		  if (!Array.isArray(modifiers)) {
    		    return modifiers || result;
    		  } // eslint-disable-next-line no-unused-expressions


    		  modifiers == null ? void 0 : modifiers.forEach(function (m) {
    		    result[m.name] = m;
    		  });
    		  return result;
    		}

    		function toModifierArray(map) {
    		  if (map === void 0) {
    		    map = {};
    		  }

    		  if (Array.isArray(map)) return map;
    		  return Object.keys(map).map(function (k) {
    		    map[k].name = k;
    		    return map[k];
    		  });
    		}

    		function mergeOptionsWithPopperConfig(_ref) {
    		  var _modifiers$preventOve, _modifiers$preventOve2, _modifiers$offset, _modifiers$arrow;

    		  var enabled = _ref.enabled,
    		      enableEvents = _ref.enableEvents,
    		      placement = _ref.placement,
    		      flip = _ref.flip,
    		      offset = _ref.offset,
    		      fixed = _ref.fixed,
    		      containerPadding = _ref.containerPadding,
    		      arrowElement = _ref.arrowElement,
    		      _ref$popperConfig = _ref.popperConfig,
    		      popperConfig = _ref$popperConfig === void 0 ? {} : _ref$popperConfig;
    		  var modifiers = toModifierMap(popperConfig.modifiers);
    		  return (0, _extends2["default"])({}, popperConfig, {
    		    placement: placement,
    		    enabled: enabled,
    		    strategy: fixed ? 'fixed' : popperConfig.strategy,
    		    modifiers: toModifierArray((0, _extends2["default"])({}, modifiers, {
    		      eventListeners: {
    		        enabled: enableEvents
    		      },
    		      preventOverflow: (0, _extends2["default"])({}, modifiers.preventOverflow, {
    		        options: containerPadding ? (0, _extends2["default"])({
    		          padding: containerPadding
    		        }, (_modifiers$preventOve = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve.options) : (_modifiers$preventOve2 = modifiers.preventOverflow) == null ? void 0 : _modifiers$preventOve2.options
    		      }),
    		      offset: {
    		        options: (0, _extends2["default"])({
    		          offset: offset
    		        }, (_modifiers$offset = modifiers.offset) == null ? void 0 : _modifiers$offset.options)
    		      },
    		      arrow: (0, _extends2["default"])({}, modifiers.arrow, {
    		        enabled: !!arrowElement,
    		        options: (0, _extends2["default"])({}, (_modifiers$arrow = modifiers.arrow) == null ? void 0 : _modifiers$arrow.options, {
    		          element: arrowElement
    		        })
    		      }),
    		      flip: (0, _extends2["default"])({
    		        enabled: !!flip
    		      }, modifiers.flip)
    		    }))
    		  });
    		} 
    	} (mergeOptionsWithPopperConfig));
    	return mergeOptionsWithPopperConfig;
    }

    var hasRequiredDropdownMenu;

    function requireDropdownMenu () {
    	if (hasRequiredDropdownMenu) return DropdownMenu;
    	hasRequiredDropdownMenu = 1;
    	(function (exports) {

    		var _interopRequireWildcard = interopRequireWildcardExports;

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.useDropdownMenu = useDropdownMenu;
    		exports["default"] = void 0;

    		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLooseExports);

    		var _extends2 = _interopRequireDefault(require_extends());

    		var _propTypes = _interopRequireDefault(require$$4__default.default);

    		var _react = _interopRequireWildcard(React__default.default);

    		var _useCallbackRef2 = _interopRequireDefault(requireUseCallbackRef());

    		var _DropdownContext = _interopRequireDefault(requireDropdownContext());

    		var _usePopper = _interopRequireDefault(requireUsePopper());

    		var _useRootClose = _interopRequireDefault(requireUseRootClose());

    		var _mergeOptionsWithPopperConfig = _interopRequireDefault(requireMergeOptionsWithPopperConfig());

    		var noop = function noop() {};
    		/**
    		 * @memberOf Dropdown
    		 * @param {object}  options
    		 * @param {boolean} options.flip Automatically adjust the menu `drop` position based on viewport edge detection
    		 * @param {[number, number]} options.offset Define an offset distance between the Menu and the Toggle
    		 * @param {boolean} options.show Display the menu manually, ignored in the context of a `Dropdown`
    		 * @param {boolean} options.usePopper opt in/out of using PopperJS to position menus. When disabled you must position it yourself.
    		 * @param {string}  options.rootCloseEvent The pointer event to listen for when determining "clicks outside" the menu for triggering a close.
    		 * @param {object}  options.popperConfig Options passed to the [`usePopper`](/api/usePopper) hook.
    		 */


    		function useDropdownMenu(options) {
    		  if (options === void 0) {
    		    options = {};
    		  }

    		  var context = (0, _react.useContext)(_DropdownContext["default"]);

    		  var _useCallbackRef = (0, _useCallbackRef2["default"])(),
    		      arrowElement = _useCallbackRef[0],
    		      attachArrowRef = _useCallbackRef[1];

    		  var hasShownRef = (0, _react.useRef)(false);
    		  var _options = options,
    		      flip = _options.flip,
    		      offset = _options.offset,
    		      rootCloseEvent = _options.rootCloseEvent,
    		      _options$fixed = _options.fixed,
    		      fixed = _options$fixed === void 0 ? false : _options$fixed,
    		      _options$popperConfig = _options.popperConfig,
    		      popperConfig = _options$popperConfig === void 0 ? {} : _options$popperConfig,
    		      _options$usePopper = _options.usePopper,
    		      shouldUsePopper = _options$usePopper === void 0 ? !!context : _options$usePopper;
    		  var show = (context == null ? void 0 : context.show) == null ? !!options.show : context.show;
    		  var alignEnd = (context == null ? void 0 : context.alignEnd) == null ? options.alignEnd : context.alignEnd;

    		  if (show && !hasShownRef.current) {
    		    hasShownRef.current = true;
    		  }

    		  var handleClose = function handleClose(e) {
    		    context == null ? void 0 : context.toggle(false, e);
    		  };

    		  var _ref = context || {},
    		      drop = _ref.drop,
    		      setMenu = _ref.setMenu,
    		      menuElement = _ref.menuElement,
    		      toggleElement = _ref.toggleElement;

    		  var placement = alignEnd ? 'bottom-end' : 'bottom-start';
    		  if (drop === 'up') placement = alignEnd ? 'top-end' : 'top-start';else if (drop === 'right') placement = alignEnd ? 'right-end' : 'right-start';else if (drop === 'left') placement = alignEnd ? 'left-end' : 'left-start';
    		  var popper = (0, _usePopper["default"])(toggleElement, menuElement, (0, _mergeOptionsWithPopperConfig["default"])({
    		    placement: placement,
    		    enabled: !!(shouldUsePopper && show),
    		    enableEvents: show,
    		    offset: offset,
    		    flip: flip,
    		    fixed: fixed,
    		    arrowElement: arrowElement,
    		    popperConfig: popperConfig
    		  }));
    		  var menuProps = (0, _extends2["default"])({
    		    ref: setMenu || noop,
    		    'aria-labelledby': toggleElement == null ? void 0 : toggleElement.id
    		  }, popper.attributes.popper, {
    		    style: popper.styles.popper
    		  });
    		  var metadata = {
    		    show: show,
    		    alignEnd: alignEnd,
    		    hasShown: hasShownRef.current,
    		    toggle: context == null ? void 0 : context.toggle,
    		    popper: shouldUsePopper ? popper : null,
    		    arrowProps: shouldUsePopper ? (0, _extends2["default"])({
    		      ref: attachArrowRef
    		    }, popper.attributes.arrow, {
    		      style: popper.styles.arrow
    		    }) : {}
    		  };
    		  (0, _useRootClose["default"])(menuElement, handleClose, {
    		    clickTrigger: rootCloseEvent,
    		    disabled: !show
    		  });
    		  return [menuProps, metadata];
    		}

    		var propTypes = {
    		  /**
    		   * A render prop that returns a Menu element. The `props`
    		   * argument should spread through to **a component that can accept a ref**.
    		   *
    		   * @type {Function ({
    		   *   show: boolean,
    		   *   alignEnd: boolean,
    		   *   close: (?SyntheticEvent) => void,
    		   *   placement: Placement,
    		   *   update: () => void,
    		   *   forceUpdate: () => void,
    		   *   props: {
    		   *     ref: (?HTMLElement) => void,
    		   *     style: { [string]: string | number },
    		   *     aria-labelledby: ?string
    		   *   },
    		   *   arrowProps: {
    		   *     ref: (?HTMLElement) => void,
    		   *     style: { [string]: string | number },
    		   *   },
    		   * }) => React.Element}
    		   */
    		  children: _propTypes["default"].func.isRequired,

    		  /**
    		   * Controls the visible state of the menu, generally this is
    		   * provided by the parent `Dropdown` component,
    		   * but may also be specified as a prop directly.
    		   */
    		  show: _propTypes["default"].bool,

    		  /**
    		   * Aligns the dropdown menu to the 'end' of it's placement position.
    		   * Generally this is provided by the parent `Dropdown` component,
    		   * but may also be specified as a prop directly.
    		   */
    		  alignEnd: _propTypes["default"].bool,

    		  /**
    		   * Enables the Popper.js `flip` modifier, allowing the Dropdown to
    		   * automatically adjust it's placement in case of overlap with the viewport or toggle.
    		   * Refer to the [flip docs](https://popper.js.org/popper-documentation.html#modifiers..flip.enabled) for more info
    		   */
    		  flip: _propTypes["default"].bool,
    		  usePopper: _propTypes["default"].oneOf([true, false]),

    		  /**
    		   * A set of popper options and props passed directly to react-popper's Popper component.
    		   */
    		  popperConfig: _propTypes["default"].object,

    		  /**
    		   * Override the default event used by RootCloseWrapper.
    		   */
    		  rootCloseEvent: _propTypes["default"].string
    		};
    		var defaultProps = {
    		  usePopper: true
    		};

    		/**
    		 * Also exported as `<Dropdown.Menu>` from `Dropdown`.
    		 *
    		 * @displayName DropdownMenu
    		 * @memberOf Dropdown
    		 */
    		function DropdownMenu(_ref2) {
    		  var children = _ref2.children,
    		      options = (0, _objectWithoutPropertiesLoose2["default"])(_ref2, ["children"]);

    		  var _useDropdownMenu = useDropdownMenu(options),
    		      props = _useDropdownMenu[0],
    		      meta = _useDropdownMenu[1];

    		  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, meta.hasShown ? children(props, meta) : null);
    		}

    		DropdownMenu.displayName = 'ReactOverlaysDropdownMenu';
    		DropdownMenu.propTypes = propTypes;
    		DropdownMenu.defaultProps = defaultProps;
    		/** @component */

    		var _default = DropdownMenu;
    		exports["default"] = _default; 
    	} (DropdownMenu));
    	return DropdownMenu;
    }

    var DropdownToggle = {};

    var hasRequiredDropdownToggle;

    function requireDropdownToggle () {
    	if (hasRequiredDropdownToggle) return DropdownToggle;
    	hasRequiredDropdownToggle = 1;
    	(function (exports) {

    		var _interopRequireWildcard = interopRequireWildcardExports;

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.useDropdownToggle = useDropdownToggle;
    		exports["default"] = void 0;

    		var _propTypes = _interopRequireDefault(require$$4__default.default);

    		var _react = _interopRequireWildcard(React__default.default);

    		var _DropdownContext = _interopRequireDefault(requireDropdownContext());

    		var noop = function noop() {};
    		/**
    		 * Wires up Dropdown toggle functionality, returning a set a props to attach
    		 * to the element that functions as the dropdown toggle (generally a button).
    		 *
    		 * @memberOf Dropdown
    		 */


    		function useDropdownToggle() {
    		  var _ref = (0, _react.useContext)(_DropdownContext["default"]) || {},
    		      _ref$show = _ref.show,
    		      show = _ref$show === void 0 ? false : _ref$show,
    		      _ref$toggle = _ref.toggle,
    		      toggle = _ref$toggle === void 0 ? noop : _ref$toggle,
    		      setToggle = _ref.setToggle;

    		  var handleClick = (0, _react.useCallback)(function (e) {
    		    toggle(!show, e);
    		  }, [show, toggle]);
    		  return [{
    		    ref: setToggle || noop,
    		    onClick: handleClick,
    		    'aria-haspopup': true,
    		    'aria-expanded': !!show
    		  }, {
    		    show: show,
    		    toggle: toggle
    		  }];
    		}

    		var propTypes = {
    		  /**
    		   * A render prop that returns a Toggle element. The `props`
    		   * argument should spread through to **a component that can accept a ref**. Use
    		   * the `onToggle` argument to toggle the menu open or closed
    		   *
    		   * @type {Function ({
    		   *   show: boolean,
    		   *   toggle: (show: boolean) => void,
    		   *   props: {
    		   *     ref: (?HTMLElement) => void,
    		   *     aria-haspopup: true
    		   *     aria-expanded: boolean
    		   *   },
    		   * }) => React.Element}
    		   */
    		  children: _propTypes["default"].func.isRequired
    		};

    		/**
    		 * Also exported as `<Dropdown.Toggle>` from `Dropdown`.
    		 *
    		 * @displayName DropdownToggle
    		 * @memberOf Dropdown
    		 */
    		function DropdownToggle(_ref2) {
    		  var children = _ref2.children;

    		  var _useDropdownToggle = useDropdownToggle(),
    		      props = _useDropdownToggle[0],
    		      meta = _useDropdownToggle[1];

    		  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, children(props, meta));
    		}

    		DropdownToggle.displayName = 'ReactOverlaysDropdownToggle';
    		DropdownToggle.propTypes = propTypes;
    		/** @component */

    		var _default = DropdownToggle;
    		exports["default"] = _default; 
    	} (DropdownToggle));
    	return DropdownToggle;
    }

    var hasRequiredDropdown;

    function requireDropdown () {
    	if (hasRequiredDropdown) return Dropdown.exports;
    	hasRequiredDropdown = 1;
    	(function (module, exports) {

    		var _interopRequireWildcard = interopRequireWildcardExports;

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports["default"] = void 0;

    		var _matches = _interopRequireDefault(requireMatches());

    		var _querySelectorAll = _interopRequireDefault(querySelectorAllExports);

    		var _addEventListener = _interopRequireDefault(requireAddEventListener());

    		var _react = _interopRequireWildcard(React__default.default);

    		var _propTypes = _interopRequireDefault(require$$4__default.default);

    		var _uncontrollable = cjs$1;

    		var _usePrevious = _interopRequireDefault(requireUsePrevious());

    		var _useForceUpdate = _interopRequireDefault(requireUseForceUpdate());

    		var _useGlobalListener = _interopRequireDefault(requireUseGlobalListener());

    		var _useEventCallback = _interopRequireDefault(requireUseEventCallback());

    		var _DropdownContext = _interopRequireDefault(requireDropdownContext());

    		var _DropdownMenu = _interopRequireDefault(requireDropdownMenu());

    		var _DropdownToggle = _interopRequireDefault(requireDropdownToggle());

    		var propTypes = {
    		  /**
    		   * A render prop that returns the root dropdown element. The `props`
    		   * argument should spread through to an element containing _both_ the
    		   * menu and toggle in order to handle keyboard events for focus management.
    		   *
    		   * @type {Function ({
    		   *   props: {
    		   *     onKeyDown: (SyntheticEvent) => void,
    		   *   },
    		   * }) => React.Element}
    		   */
    		  children: _propTypes["default"].node,

    		  /**
    		   * Determines the direction and location of the Menu in relation to it's Toggle.
    		   */
    		  drop: _propTypes["default"].oneOf(['up', 'left', 'right', 'down']),

    		  /**
    		   * Controls the focus behavior for when the Dropdown is opened. Set to
    		   * `true` to always focus the first menu item, `keyboard` to focus only when
    		   * navigating via the keyboard, or `false` to disable completely
    		   *
    		   * The Default behavior is `false` **unless** the Menu has a `role="menu"`
    		   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).
    		   */
    		  focusFirstItemOnShow: _propTypes["default"].oneOf([false, true, 'keyboard']),

    		  /**
    		   * A css slector string that will return __focusable__ menu items.
    		   * Selectors should be relative to the menu component:
    		   * e.g. ` > li:not('.disabled')`
    		   */
    		  itemSelector: _propTypes["default"].string,

    		  /**
    		   * Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is `top-start` or `bottom-start`.
    		   */
    		  alignEnd: _propTypes["default"].bool,

    		  /**
    		   * Whether or not the Dropdown is visible.
    		   *
    		   * @controllable onToggle
    		   */
    		  show: _propTypes["default"].bool,

    		  /**
    		   * Sets the initial show position of the Dropdown.
    		   */
    		  defaultShow: _propTypes["default"].bool,

    		  /**
    		   * A callback fired when the Dropdown wishes to change visibility. Called with the requested
    		   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.
    		   *
    		   * ```ts static
    		   * function(
    		   *   isOpen: boolean,
    		   *   event: SyntheticEvent,
    		   * ): void
    		   * ```
    		   *
    		   * @controllable show
    		   */
    		  onToggle: _propTypes["default"].func
    		};

    		function useRefWithUpdate() {
    		  var forceUpdate = (0, _useForceUpdate["default"])();
    		  var ref = (0, _react.useRef)(null);
    		  var attachRef = (0, _react.useCallback)(function (element) {
    		    ref.current = element; // ensure that a menu set triggers an update for consumers

    		    forceUpdate();
    		  }, [forceUpdate]);
    		  return [ref, attachRef];
    		}
    		/**
    		 * @displayName Dropdown
    		 * @public
    		 */


    		function Dropdown(_ref) {
    		  var drop = _ref.drop,
    		      alignEnd = _ref.alignEnd,
    		      defaultShow = _ref.defaultShow,
    		      rawShow = _ref.show,
    		      rawOnToggle = _ref.onToggle,
    		      _ref$itemSelector = _ref.itemSelector,
    		      itemSelector = _ref$itemSelector === void 0 ? '* > *' : _ref$itemSelector,
    		      focusFirstItemOnShow = _ref.focusFirstItemOnShow,
    		      children = _ref.children;

    		  var _useUncontrolledProp = (0, _uncontrollable.useUncontrolledProp)(rawShow, defaultShow, rawOnToggle),
    		      show = _useUncontrolledProp[0],
    		      onToggle = _useUncontrolledProp[1]; // We use normal refs instead of useCallbackRef in order to populate the
    		  // the value as quickly as possible, otherwise the effect to focus the element
    		  // may run before the state value is set


    		  var _useRefWithUpdate = useRefWithUpdate(),
    		      menuRef = _useRefWithUpdate[0],
    		      setMenu = _useRefWithUpdate[1];

    		  var menuElement = menuRef.current;

    		  var _useRefWithUpdate2 = useRefWithUpdate(),
    		      toggleRef = _useRefWithUpdate2[0],
    		      setToggle = _useRefWithUpdate2[1];

    		  var toggleElement = toggleRef.current;
    		  var lastShow = (0, _usePrevious["default"])(show);
    		  var lastSourceEvent = (0, _react.useRef)(null);
    		  var focusInDropdown = (0, _react.useRef)(false);
    		  var toggle = (0, _react.useCallback)(function (nextShow, event) {
    		    onToggle(nextShow, event);
    		  }, [onToggle]);
    		  var context = (0, _react.useMemo)(function () {
    		    return {
    		      toggle: toggle,
    		      drop: drop,
    		      show: show,
    		      alignEnd: alignEnd,
    		      menuElement: menuElement,
    		      toggleElement: toggleElement,
    		      setMenu: setMenu,
    		      setToggle: setToggle
    		    };
    		  }, [toggle, drop, show, alignEnd, menuElement, toggleElement, setMenu, setToggle]);

    		  if (menuElement && lastShow && !show) {
    		    focusInDropdown.current = menuElement.contains(document.activeElement);
    		  }

    		  var focusToggle = (0, _useEventCallback["default"])(function () {
    		    if (toggleElement && toggleElement.focus) {
    		      toggleElement.focus();
    		    }
    		  });
    		  var maybeFocusFirst = (0, _useEventCallback["default"])(function () {
    		    var type = lastSourceEvent.current;
    		    var focusType = focusFirstItemOnShow;

    		    if (focusType == null) {
    		      focusType = menuRef.current && (0, _matches["default"])(menuRef.current, '[role=menu]') ? 'keyboard' : false;
    		    }

    		    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {
    		      return;
    		    }

    		    var first = (0, _querySelectorAll["default"])(menuRef.current, itemSelector)[0];
    		    if (first && first.focus) first.focus();
    		  });
    		  (0, _react.useEffect)(function () {
    		    if (show) maybeFocusFirst();else if (focusInDropdown.current) {
    		      focusInDropdown.current = false;
    		      focusToggle();
    		    } // only `show` should be changing
    		  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);
    		  (0, _react.useEffect)(function () {
    		    lastSourceEvent.current = null;
    		  });

    		  var getNextFocusedChild = function getNextFocusedChild(current, offset) {
    		    if (!menuRef.current) return null;
    		    var items = (0, _querySelectorAll["default"])(menuRef.current, itemSelector);
    		    var index = items.indexOf(current) + offset;
    		    index = Math.max(0, Math.min(index, items.length));
    		    return items[index];
    		  };

    		  (0, _useGlobalListener["default"])('keydown', function (event) {
    		    var _menuRef$current, _toggleRef$current;

    		    var key = event.key;
    		    var target = event.target;
    		    var fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);
    		    var fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400
    		    // in inscrutability

    		    var isInput = /input|textarea/i.test(target.tagName);

    		    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu)) {
    		      return;
    		    }

    		    if (!fromMenu && !fromToggle) {
    		      return;
    		    }

    		    if (!menuRef.current && key === 'Tab') {
    		      return;
    		    }

    		    lastSourceEvent.current = event.type;

    		    switch (key) {
    		      case 'ArrowUp':
    		        {
    		          var next = getNextFocusedChild(target, -1);
    		          if (next && next.focus) next.focus();
    		          event.preventDefault();
    		          return;
    		        }

    		      case 'ArrowDown':
    		        event.preventDefault();

    		        if (!show) {
    		          onToggle(true, event);
    		        } else {
    		          var _next = getNextFocusedChild(target, 1);

    		          if (_next && _next.focus) _next.focus();
    		        }

    		        return;

    		      case 'Tab':
    		        // on keydown the target is the element being tabbed FROM, we need that
    		        // to know if this event is relevant to this dropdown (e.g. in this menu).
    		        // On `keyup` the target is the element being tagged TO which we use to check
    		        // if focus has left the menu
    		        (0, _addEventListener["default"])(document, 'keyup', function (e) {
    		          var _menuRef$current2;

    		          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {
    		            onToggle(false, event);
    		          }
    		        }, {
    		          once: true
    		        });
    		        break;

    		      case 'Escape':
    		        event.preventDefault();
    		        event.stopPropagation();
    		        onToggle(false, event);
    		        break;
    		    }
    		  });
    		  return /*#__PURE__*/_react["default"].createElement(_DropdownContext["default"].Provider, {
    		    value: context
    		  }, children);
    		}

    		Dropdown.displayName = 'ReactOverlaysDropdown';
    		Dropdown.propTypes = propTypes;
    		Dropdown.Menu = _DropdownMenu["default"];
    		Dropdown.Toggle = _DropdownToggle["default"];
    		var _default = Dropdown;
    		exports["default"] = _default;
    		module.exports = exports.default; 
    	} (Dropdown, Dropdown.exports));
    	return Dropdown.exports;
    }

    var Modal = {exports: {}};

    var activeElement = {exports: {}};

    var hasRequiredActiveElement;

    function requireActiveElement () {
    	if (hasRequiredActiveElement) return activeElement.exports;
    	hasRequiredActiveElement = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports.default = activeElement;

    		var _ownerDocument = _interopRequireDefault(requireOwnerDocument$1());

    		/**
    		 * Returns the actively focused element safely.
    		 *
    		 * @param doc the document to check
    		 */
    		function activeElement(doc) {
    		  if (doc === void 0) {
    		    doc = (0, _ownerDocument.default)();
    		  }

    		  // Support: IE 9 only
    		  // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
    		  try {
    		    var active = doc.activeElement; // IE11 returns a seemingly empty object in some cases when accessing
    		    // document.activeElement from an <iframe>

    		    if (!active || !active.nodeName) return null;
    		    return active;
    		  } catch (e) {
    		    /* ie throws if no active element */
    		    return doc.body;
    		  }
    		}

    		module.exports = exports["default"]; 
    	} (activeElement, activeElement.exports));
    	return activeElement.exports;
    }

    var useWillUnmount = {};

    var useUpdatedRef = {};

    var hasRequiredUseUpdatedRef;

    function requireUseUpdatedRef () {
    	if (hasRequiredUseUpdatedRef) return useUpdatedRef;
    	hasRequiredUseUpdatedRef = 1;

    	useUpdatedRef.__esModule = true;
    	useUpdatedRef.default = useUpdatedRef$1;
    	var _react = React__default.default;
    	/**
    	 * Returns a ref that is immediately updated with the new value
    	 *
    	 * @param value The Ref value
    	 * @category refs
    	 */
    	function useUpdatedRef$1(value) {
    	  const valueRef = (0, _react.useRef)(value);
    	  valueRef.current = value;
    	  return valueRef;
    	}
    	return useUpdatedRef;
    }

    var hasRequiredUseWillUnmount;

    function requireUseWillUnmount () {
    	if (hasRequiredUseWillUnmount) return useWillUnmount;
    	hasRequiredUseWillUnmount = 1;

    	useWillUnmount.__esModule = true;
    	useWillUnmount.default = useWillUnmount$1;
    	var _useUpdatedRef = _interopRequireDefault(requireUseUpdatedRef());
    	var _react = React__default.default;
    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    	/**
    	 * Attach a callback that fires when a component unmounts
    	 *
    	 * @param fn Handler to run when the component unmounts
    	 * @category effects
    	 */
    	function useWillUnmount$1(fn) {
    	  const onUnmount = (0, _useUpdatedRef.default)(fn);
    	  (0, _react.useEffect)(() => () => onUnmount.current(), []);
    	}
    	return useWillUnmount;
    }

    var ModalManager = {exports: {}};

    var addClass = {exports: {}};

    var hasClass = {exports: {}};

    var hasRequiredHasClass;

    function requireHasClass () {
    	if (hasRequiredHasClass) return hasClass.exports;
    	hasRequiredHasClass = 1;
    	(function (module, exports) {

    		exports.__esModule = true;
    		exports.default = hasClass;

    		/**
    		 * Checks if a given element has a CSS class.
    		 * 
    		 * @param element the element
    		 * @param className the CSS class name
    		 */
    		function hasClass(element, className) {
    		  if (element.classList) return !!className && element.classList.contains(className);
    		  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
    		}

    		module.exports = exports["default"]; 
    	} (hasClass, hasClass.exports));
    	return hasClass.exports;
    }

    (function (module, exports) {

    	var _interopRequireDefault = interopRequireDefaultExports;

    	exports.__esModule = true;
    	exports.default = addClass;

    	var _hasClass = _interopRequireDefault(requireHasClass());

    	/**
    	 * Adds a CSS class to a given element.
    	 * 
    	 * @param element the element
    	 * @param className the CSS class name
    	 */
    	function addClass(element, className) {
    	  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
    	}

    	module.exports = exports["default"]; 
    } (addClass, addClass.exports));

    var addClassExports = addClass.exports;

    var removeClass = {exports: {}};

    (function (module, exports) {

    	exports.__esModule = true;
    	exports.default = removeClass;

    	function replaceClassName(origClass, classToRemove) {
    	  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
    	}
    	/**
    	 * Removes a CSS class from a given element.
    	 * 
    	 * @param element the element
    	 * @param className the CSS class name
    	 */


    	function removeClass(element, className) {
    	  if (element.classList) {
    	    element.classList.remove(className);
    	  } else if (typeof element.className === 'string') {
    	    element.className = replaceClassName(element.className, className);
    	  } else {
    	    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
    	  }
    	}

    	module.exports = exports["default"]; 
    } (removeClass, removeClass.exports));

    var removeClassExports = removeClass.exports;

    var scrollbarSize = {exports: {}};

    (function (module, exports) {

    	var _interopRequireDefault = interopRequireDefaultExports;

    	exports.__esModule = true;
    	exports.default = scrollbarSize;

    	var _canUseDOM = _interopRequireDefault(requireCanUseDOM());

    	var size;

    	function scrollbarSize(recalc) {
    	  if (!size && size !== 0 || recalc) {
    	    if (_canUseDOM.default) {
    	      var scrollDiv = document.createElement('div');
    	      scrollDiv.style.position = 'absolute';
    	      scrollDiv.style.top = '-9999px';
    	      scrollDiv.style.width = '50px';
    	      scrollDiv.style.height = '50px';
    	      scrollDiv.style.overflow = 'scroll';
    	      document.body.appendChild(scrollDiv);
    	      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    	      document.body.removeChild(scrollDiv);
    	    }
    	  }

    	  return size;
    	}

    	module.exports = exports["default"]; 
    } (scrollbarSize, scrollbarSize.exports));

    var scrollbarSizeExports = scrollbarSize.exports;

    var isOverflowing = {exports: {}};

    var hasRequiredIsOverflowing;

    function requireIsOverflowing () {
    	if (hasRequiredIsOverflowing) return isOverflowing.exports;
    	hasRequiredIsOverflowing = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports["default"] = isOverflowing;

    		var _isWindow = _interopRequireDefault(requireIsWindow());

    		var _ownerDocument = _interopRequireDefault(requireOwnerDocument$1());

    		function isBody(node) {
    		  return node && node.tagName.toLowerCase() === 'body';
    		}

    		function bodyIsOverflowing(node) {
    		  var doc = (0, _isWindow["default"])(node) ? (0, _ownerDocument["default"])() : (0, _ownerDocument["default"])(node);
    		  var win = (0, _isWindow["default"])(node) || doc.defaultView;
    		  return doc.body.clientWidth < win.innerWidth;
    		}

    		function isOverflowing(container) {
    		  var win = (0, _isWindow["default"])(container);
    		  return win || isBody(container) ? bodyIsOverflowing(container) : container.scrollHeight > container.clientHeight;
    		}

    		module.exports = exports.default; 
    	} (isOverflowing, isOverflowing.exports));
    	return isOverflowing.exports;
    }

    var manageAriaHidden = {};

    var hasRequiredManageAriaHidden;

    function requireManageAriaHidden () {
    	if (hasRequiredManageAriaHidden) return manageAriaHidden;
    	hasRequiredManageAriaHidden = 1;

    	manageAriaHidden.__esModule = true;
    	manageAriaHidden.ariaHidden = ariaHidden;
    	manageAriaHidden.hideSiblings = hideSiblings;
    	manageAriaHidden.showSiblings = showSiblings;
    	var BLACKLIST = ['template', 'script', 'style'];

    	var isHidable = function isHidable(_ref) {
    	  var nodeType = _ref.nodeType,
    	      tagName = _ref.tagName;
    	  return nodeType === 1 && BLACKLIST.indexOf(tagName.toLowerCase()) === -1;
    	};

    	var siblings = function siblings(container, exclude, cb) {
    	  [].forEach.call(container.children, function (node) {
    	    if (exclude.indexOf(node) === -1 && isHidable(node)) {
    	      cb(node);
    	    }
    	  });
    	};

    	function ariaHidden(hide, node) {
    	  if (!node) return;

    	  if (hide) {
    	    node.setAttribute('aria-hidden', 'true');
    	  } else {
    	    node.removeAttribute('aria-hidden');
    	  }
    	}

    	function hideSiblings(container, _ref2) {
    	  var dialog = _ref2.dialog,
    	      backdrop = _ref2.backdrop;
    	  siblings(container, [dialog, backdrop], function (node) {
    	    return ariaHidden(true, node);
    	  });
    	}

    	function showSiblings(container, _ref3) {
    	  var dialog = _ref3.dialog,
    	      backdrop = _ref3.backdrop;
    	  siblings(container, [dialog, backdrop], function (node) {
    	    return ariaHidden(false, node);
    	  });
    	}
    	return manageAriaHidden;
    }

    var hasRequiredModalManager;

    function requireModalManager () {
    	if (hasRequiredModalManager) return ModalManager.exports;
    	hasRequiredModalManager = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports["default"] = void 0;

    		var _addClass = _interopRequireDefault(addClassExports);

    		var _removeClass = _interopRequireDefault(removeClassExports);

    		var _css = _interopRequireDefault(requireCss());

    		var _scrollbarSize = _interopRequireDefault(scrollbarSizeExports);

    		var _isOverflowing = _interopRequireDefault(requireIsOverflowing());

    		var _manageAriaHidden = requireManageAriaHidden();

    		function findIndexOf(arr, cb) {
    		  var idx = -1;
    		  arr.some(function (d, i) {
    		    if (cb(d, i)) {
    		      idx = i;
    		      return true;
    		    }

    		    return false;
    		  });
    		  return idx;
    		}

    		/**
    		 * Proper state management for containers and the modals in those containers.
    		 *
    		 * @internal Used by the Modal to ensure proper styling of containers.
    		 */
    		var ModalManager = /*#__PURE__*/function () {
    		  function ModalManager(_temp) {
    		    var _ref = _temp === void 0 ? {} : _temp,
    		        _ref$hideSiblingNodes = _ref.hideSiblingNodes,
    		        hideSiblingNodes = _ref$hideSiblingNodes === void 0 ? true : _ref$hideSiblingNodes,
    		        _ref$handleContainerO = _ref.handleContainerOverflow,
    		        handleContainerOverflow = _ref$handleContainerO === void 0 ? true : _ref$handleContainerO;

    		    this.hideSiblingNodes = void 0;
    		    this.handleContainerOverflow = void 0;
    		    this.modals = void 0;
    		    this.containers = void 0;
    		    this.data = void 0;
    		    this.scrollbarSize = void 0;
    		    this.hideSiblingNodes = hideSiblingNodes;
    		    this.handleContainerOverflow = handleContainerOverflow;
    		    this.modals = [];
    		    this.containers = [];
    		    this.data = [];
    		    this.scrollbarSize = (0, _scrollbarSize["default"])();
    		  }

    		  var _proto = ModalManager.prototype;

    		  _proto.isContainerOverflowing = function isContainerOverflowing(modal) {
    		    var data = this.data[this.containerIndexFromModal(modal)];
    		    return data && data.overflowing;
    		  };

    		  _proto.containerIndexFromModal = function containerIndexFromModal(modal) {
    		    return findIndexOf(this.data, function (d) {
    		      return d.modals.indexOf(modal) !== -1;
    		    });
    		  };

    		  _proto.setContainerStyle = function setContainerStyle(containerState, container) {
    		    var style = {
    		      overflow: 'hidden'
    		    }; // we are only interested in the actual `style` here
    		    // because we will override it

    		    containerState.style = {
    		      overflow: container.style.overflow,
    		      paddingRight: container.style.paddingRight
    		    };

    		    if (containerState.overflowing) {
    		      // use computed style, here to get the real padding
    		      // to add our scrollbar width
    		      style.paddingRight = parseInt((0, _css["default"])(container, 'paddingRight') || '0', 10) + this.scrollbarSize + "px";
    		    }

    		    (0, _css["default"])(container, style);
    		  };

    		  _proto.removeContainerStyle = function removeContainerStyle(containerState, container) {
    		    Object.assign(container.style, containerState.style);
    		  };

    		  _proto.add = function add(modal, container, className) {
    		    var modalIdx = this.modals.indexOf(modal);
    		    var containerIdx = this.containers.indexOf(container);

    		    if (modalIdx !== -1) {
    		      return modalIdx;
    		    }

    		    modalIdx = this.modals.length;
    		    this.modals.push(modal);

    		    if (this.hideSiblingNodes) {
    		      (0, _manageAriaHidden.hideSiblings)(container, modal);
    		    }

    		    if (containerIdx !== -1) {
    		      this.data[containerIdx].modals.push(modal);
    		      return modalIdx;
    		    }

    		    var data = {
    		      modals: [modal],
    		      // right now only the first modal of a container will have its classes applied
    		      classes: className ? className.split(/\s+/) : [],
    		      overflowing: (0, _isOverflowing["default"])(container)
    		    };

    		    if (this.handleContainerOverflow) {
    		      this.setContainerStyle(data, container);
    		    }

    		    data.classes.forEach(_addClass["default"].bind(null, container));
    		    this.containers.push(container);
    		    this.data.push(data);
    		    return modalIdx;
    		  };

    		  _proto.remove = function remove(modal) {
    		    var modalIdx = this.modals.indexOf(modal);

    		    if (modalIdx === -1) {
    		      return;
    		    }

    		    var containerIdx = this.containerIndexFromModal(modal);
    		    var data = this.data[containerIdx];
    		    var container = this.containers[containerIdx];
    		    data.modals.splice(data.modals.indexOf(modal), 1);
    		    this.modals.splice(modalIdx, 1); // if that was the last modal in a container,
    		    // clean up the container

    		    if (data.modals.length === 0) {
    		      data.classes.forEach(_removeClass["default"].bind(null, container));

    		      if (this.handleContainerOverflow) {
    		        this.removeContainerStyle(data, container);
    		      }

    		      if (this.hideSiblingNodes) {
    		        (0, _manageAriaHidden.showSiblings)(container, modal);
    		      }

    		      this.containers.splice(containerIdx, 1);
    		      this.data.splice(containerIdx, 1);
    		    } else if (this.hideSiblingNodes) {
    		      // otherwise make sure the next top modal is visible to a SR
    		      var _data$modals = data.modals[data.modals.length - 1],
    		          backdrop = _data$modals.backdrop,
    		          dialog = _data$modals.dialog;
    		      (0, _manageAriaHidden.ariaHidden)(false, dialog);
    		      (0, _manageAriaHidden.ariaHidden)(false, backdrop);
    		    }
    		  };

    		  _proto.isTopModal = function isTopModal(modal) {
    		    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
    		  };

    		  return ModalManager;
    		}();

    		var _default = ModalManager;
    		exports["default"] = _default;
    		module.exports = exports.default; 
    	} (ModalManager, ModalManager.exports));
    	return ModalManager.exports;
    }

    var useWaitForDOMRef = {};

    var hasRequiredUseWaitForDOMRef;

    function requireUseWaitForDOMRef () {
    	if (hasRequiredUseWaitForDOMRef) return useWaitForDOMRef;
    	hasRequiredUseWaitForDOMRef = 1;
    	(function (exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports["default"] = useWaitForDOMRef;
    		exports.resolveContainerRef = void 0;

    		var _ownerDocument = _interopRequireDefault(requireOwnerDocument$1());

    		var _react = React__default.default;

    		var resolveContainerRef = function resolveContainerRef(ref) {
    		  var _ref;

    		  if (typeof document === 'undefined') return null;
    		  if (ref == null) return (0, _ownerDocument["default"])().body;
    		  if (typeof ref === 'function') ref = ref();
    		  if (ref && 'current' in ref) ref = ref.current;
    		  if ((_ref = ref) != null && _ref.nodeType) return ref || null;
    		  return null;
    		};

    		exports.resolveContainerRef = resolveContainerRef;

    		function useWaitForDOMRef(ref, onResolved) {
    		  var _useState = (0, _react.useState)(function () {
    		    return resolveContainerRef(ref);
    		  }),
    		      resolvedRef = _useState[0],
    		      setRef = _useState[1];

    		  if (!resolvedRef) {
    		    var earlyRef = resolveContainerRef(ref);
    		    if (earlyRef) setRef(earlyRef);
    		  }

    		  (0, _react.useEffect)(function () {
    		    if (onResolved && resolvedRef) {
    		      onResolved(resolvedRef);
    		    }
    		  }, [onResolved, resolvedRef]);
    		  (0, _react.useEffect)(function () {
    		    var nextRef = resolveContainerRef(ref);

    		    if (nextRef !== resolvedRef) {
    		      setRef(nextRef);
    		    }
    		  }, [ref, resolvedRef]);
    		  return resolvedRef;
    		} 
    	} (useWaitForDOMRef));
    	return useWaitForDOMRef;
    }

    var hasRequiredModal;

    function requireModal () {
    	if (hasRequiredModal) return Modal.exports;
    	hasRequiredModal = 1;
    	(function (module, exports) {

    		var _interopRequireWildcard = interopRequireWildcardExports;

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports["default"] = void 0;

    		var _extends2 = _interopRequireDefault(require_extends());

    		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLooseExports);

    		var _activeElement = _interopRequireDefault(requireActiveElement());

    		var _contains = _interopRequireDefault(requireContains());

    		var _canUseDOM = _interopRequireDefault(requireCanUseDOM());

    		var _listen = _interopRequireDefault(listenExports);

    		var _propTypes = _interopRequireDefault(require$$4__default.default);

    		var _react = _interopRequireWildcard(React__default.default);

    		var _reactDom = _interopRequireDefault(require$$1__default.default);

    		var _useMounted = _interopRequireDefault(requireUseMounted());

    		var _useWillUnmount = _interopRequireDefault(requireUseWillUnmount());

    		var _usePrevious = _interopRequireDefault(requireUsePrevious());

    		var _useEventCallback = _interopRequireDefault(requireUseEventCallback());

    		var _ModalManager = _interopRequireDefault(requireModalManager());

    		var _useWaitForDOMRef = _interopRequireDefault(requireUseWaitForDOMRef());

    		/* eslint-disable @typescript-eslint/no-use-before-define, react/prop-types */
    		var manager;

    		function getManager() {
    		  if (!manager) manager = new _ModalManager["default"]();
    		  return manager;
    		}

    		function useModalManager(provided) {
    		  var modalManager = provided || getManager();
    		  var modal = (0, _react.useRef)({
    		    dialog: null,
    		    backdrop: null
    		  });
    		  return Object.assign(modal.current, {
    		    add: function add(container, className) {
    		      return modalManager.add(modal.current, container, className);
    		    },
    		    remove: function remove() {
    		      return modalManager.remove(modal.current);
    		    },
    		    isTopModal: function isTopModal() {
    		      return modalManager.isTopModal(modal.current);
    		    },
    		    setDialogRef: (0, _react.useCallback)(function (ref) {
    		      modal.current.dialog = ref;
    		    }, []),
    		    setBackdropRef: (0, _react.useCallback)(function (ref) {
    		      modal.current.backdrop = ref;
    		    }, [])
    		  });
    		}

    		var Modal = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
    		  var _ref$show = _ref.show,
    		      show = _ref$show === void 0 ? false : _ref$show,
    		      _ref$role = _ref.role,
    		      role = _ref$role === void 0 ? 'dialog' : _ref$role,
    		      className = _ref.className,
    		      style = _ref.style,
    		      children = _ref.children,
    		      _ref$backdrop = _ref.backdrop,
    		      backdrop = _ref$backdrop === void 0 ? true : _ref$backdrop,
    		      _ref$keyboard = _ref.keyboard,
    		      keyboard = _ref$keyboard === void 0 ? true : _ref$keyboard,
    		      onBackdropClick = _ref.onBackdropClick,
    		      onEscapeKeyDown = _ref.onEscapeKeyDown,
    		      transition = _ref.transition,
    		      backdropTransition = _ref.backdropTransition,
    		      _ref$autoFocus = _ref.autoFocus,
    		      autoFocus = _ref$autoFocus === void 0 ? true : _ref$autoFocus,
    		      _ref$enforceFocus = _ref.enforceFocus,
    		      enforceFocus = _ref$enforceFocus === void 0 ? true : _ref$enforceFocus,
    		      _ref$restoreFocus = _ref.restoreFocus,
    		      restoreFocus = _ref$restoreFocus === void 0 ? true : _ref$restoreFocus,
    		      restoreFocusOptions = _ref.restoreFocusOptions,
    		      renderDialog = _ref.renderDialog,
    		      _ref$renderBackdrop = _ref.renderBackdrop,
    		      renderBackdrop = _ref$renderBackdrop === void 0 ? function (props) {
    		    return /*#__PURE__*/_react["default"].createElement("div", props);
    		  } : _ref$renderBackdrop,
    		      providedManager = _ref.manager,
    		      containerRef = _ref.container,
    		      containerClassName = _ref.containerClassName,
    		      onShow = _ref.onShow,
    		      _ref$onHide = _ref.onHide,
    		      onHide = _ref$onHide === void 0 ? function () {} : _ref$onHide,
    		      onExit = _ref.onExit,
    		      onExited = _ref.onExited,
    		      onExiting = _ref.onExiting,
    		      onEnter = _ref.onEnter,
    		      onEntering = _ref.onEntering,
    		      onEntered = _ref.onEntered,
    		      rest = (0, _objectWithoutPropertiesLoose2["default"])(_ref, ["show", "role", "className", "style", "children", "backdrop", "keyboard", "onBackdropClick", "onEscapeKeyDown", "transition", "backdropTransition", "autoFocus", "enforceFocus", "restoreFocus", "restoreFocusOptions", "renderDialog", "renderBackdrop", "manager", "container", "containerClassName", "onShow", "onHide", "onExit", "onExited", "onExiting", "onEnter", "onEntering", "onEntered"]);
    		  var container = (0, _useWaitForDOMRef["default"])(containerRef);
    		  var modal = useModalManager(providedManager);
    		  var isMounted = (0, _useMounted["default"])();
    		  var prevShow = (0, _usePrevious["default"])(show);

    		  var _useState = (0, _react.useState)(!show),
    		      exited = _useState[0],
    		      setExited = _useState[1];

    		  var lastFocusRef = (0, _react.useRef)(null);
    		  (0, _react.useImperativeHandle)(ref, function () {
    		    return modal;
    		  }, [modal]);

    		  if (_canUseDOM["default"] && !prevShow && show) {
    		    lastFocusRef.current = (0, _activeElement["default"])();
    		  }

    		  if (!transition && !show && !exited) {
    		    setExited(true);
    		  } else if (show && exited) {
    		    setExited(false);
    		  }

    		  var handleShow = (0, _useEventCallback["default"])(function () {
    		    modal.add(container, containerClassName);
    		    removeKeydownListenerRef.current = (0, _listen["default"])(document, 'keydown', handleDocumentKeyDown);
    		    removeFocusListenerRef.current = (0, _listen["default"])(document, 'focus', // the timeout is necessary b/c this will run before the new modal is mounted
    		    // and so steals focus from it
    		    function () {
    		      return setTimeout(handleEnforceFocus);
    		    }, true);

    		    if (onShow) {
    		      onShow();
    		    } // autofocus after onShow to not trigger a focus event for previous
    		    // modals before this one is shown.


    		    if (autoFocus) {
    		      var currentActiveElement = (0, _activeElement["default"])(document);

    		      if (modal.dialog && currentActiveElement && !(0, _contains["default"])(modal.dialog, currentActiveElement)) {
    		        lastFocusRef.current = currentActiveElement;
    		        modal.dialog.focus();
    		      }
    		    }
    		  });
    		  var handleHide = (0, _useEventCallback["default"])(function () {
    		    modal.remove();
    		    removeKeydownListenerRef.current == null ? void 0 : removeKeydownListenerRef.current();
    		    removeFocusListenerRef.current == null ? void 0 : removeFocusListenerRef.current();

    		    if (restoreFocus) {
    		      var _lastFocusRef$current;

    		      // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)
    		      (_lastFocusRef$current = lastFocusRef.current) == null ? void 0 : _lastFocusRef$current.focus == null ? void 0 : _lastFocusRef$current.focus(restoreFocusOptions);
    		      lastFocusRef.current = null;
    		    }
    		  }); // TODO: try and combine these effects: https://github.com/react-bootstrap/react-overlays/pull/794#discussion_r409954120
    		  // Show logic when:
    		  //  - show is `true` _and_ `container` has resolved

    		  (0, _react.useEffect)(function () {
    		    if (!show || !container) return;
    		    handleShow();
    		  }, [show, container,
    		  /* should never change: */
    		  handleShow]); // Hide cleanup logic when:
    		  //  - `exited` switches to true
    		  //  - component unmounts;

    		  (0, _react.useEffect)(function () {
    		    if (!exited) return;
    		    handleHide();
    		  }, [exited, handleHide]);
    		  (0, _useWillUnmount["default"])(function () {
    		    handleHide();
    		  }); // --------------------------------

    		  var handleEnforceFocus = (0, _useEventCallback["default"])(function () {
    		    if (!enforceFocus || !isMounted() || !modal.isTopModal()) {
    		      return;
    		    }

    		    var currentActiveElement = (0, _activeElement["default"])();

    		    if (modal.dialog && currentActiveElement && !(0, _contains["default"])(modal.dialog, currentActiveElement)) {
    		      modal.dialog.focus();
    		    }
    		  });
    		  var handleBackdropClick = (0, _useEventCallback["default"])(function (e) {
    		    if (e.target !== e.currentTarget) {
    		      return;
    		    }

    		    onBackdropClick == null ? void 0 : onBackdropClick(e);

    		    if (backdrop === true) {
    		      onHide();
    		    }
    		  });
    		  var handleDocumentKeyDown = (0, _useEventCallback["default"])(function (e) {
    		    if (keyboard && e.keyCode === 27 && modal.isTopModal()) {
    		      onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(e);

    		      if (!e.defaultPrevented) {
    		        onHide();
    		      }
    		    }
    		  });
    		  var removeFocusListenerRef = (0, _react.useRef)();
    		  var removeKeydownListenerRef = (0, _react.useRef)();

    		  var handleHidden = function handleHidden() {
    		    setExited(true);

    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }

    		    onExited == null ? void 0 : onExited.apply(void 0, args);
    		  };

    		  var Transition = transition;

    		  if (!container || !(show || Transition && !exited)) {
    		    return null;
    		  }

    		  var dialogProps = (0, _extends2["default"])({
    		    role: role,
    		    ref: modal.setDialogRef,
    		    // apparently only works on the dialog role element
    		    'aria-modal': role === 'dialog' ? true : undefined
    		  }, rest, {
    		    style: style,
    		    className: className,
    		    tabIndex: -1
    		  });
    		  var dialog = renderDialog ? renderDialog(dialogProps) : /*#__PURE__*/_react["default"].createElement("div", dialogProps, /*#__PURE__*/_react["default"].cloneElement(children, {
    		    role: 'document'
    		  }));

    		  if (Transition) {
    		    dialog = /*#__PURE__*/_react["default"].createElement(Transition, {
    		      appear: true,
    		      unmountOnExit: true,
    		      "in": !!show,
    		      onExit: onExit,
    		      onExiting: onExiting,
    		      onExited: handleHidden,
    		      onEnter: onEnter,
    		      onEntering: onEntering,
    		      onEntered: onEntered
    		    }, dialog);
    		  }

    		  var backdropElement = null;

    		  if (backdrop) {
    		    var BackdropTransition = backdropTransition;
    		    backdropElement = renderBackdrop({
    		      ref: modal.setBackdropRef,
    		      onClick: handleBackdropClick
    		    });

    		    if (BackdropTransition) {
    		      backdropElement = /*#__PURE__*/_react["default"].createElement(BackdropTransition, {
    		        appear: true,
    		        "in": !!show
    		      }, backdropElement);
    		    }
    		  }

    		  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, backdropElement, dialog), container));
    		});
    		var propTypes = {
    		  /**
    		   * Set the visibility of the Modal
    		   */
    		  show: _propTypes["default"].bool,

    		  /**
    		   * A DOM element, a `ref` to an element, or function that returns either. The Modal is appended to it's `container` element.
    		   *
    		   * For the sake of assistive technologies, the container should usually be the document body, so that the rest of the
    		   * page content can be placed behind a virtual backdrop as well as a visual one.
    		   */
    		  container: _propTypes["default"].any,

    		  /**
    		   * A callback fired when the Modal is opening.
    		   */
    		  onShow: _propTypes["default"].func,

    		  /**
    		   * A callback fired when either the backdrop is clicked, or the escape key is pressed.
    		   *
    		   * The `onHide` callback only signals intent from the Modal,
    		   * you must actually set the `show` prop to `false` for the Modal to close.
    		   */
    		  onHide: _propTypes["default"].func,

    		  /**
    		   * Include a backdrop component.
    		   */
    		  backdrop: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].oneOf(['static'])]),

    		  /**
    		   * A function that returns the dialog component. Useful for custom
    		   * rendering. **Note:** the component should make sure to apply the provided ref.
    		   *
    		   * ```js static
    		   * renderDialog={props => <MyDialog {...props} />}
    		   * ```
    		   */
    		  renderDialog: _propTypes["default"].func,

    		  /**
    		   * A function that returns a backdrop component. Useful for custom
    		   * backdrop rendering.
    		   *
    		   * ```js
    		   *  renderBackdrop={props => <MyBackdrop {...props} />}
    		   * ```
    		   */
    		  renderBackdrop: _propTypes["default"].func,

    		  /**
    		   * A callback fired when the escape key, if specified in `keyboard`, is pressed.
    		   *
    		   * If preventDefault() is called on the keyboard event, closing the modal will be cancelled.
    		   */
    		  onEscapeKeyDown: _propTypes["default"].func,

    		  /**
    		   * A callback fired when the backdrop, if specified, is clicked.
    		   */
    		  onBackdropClick: _propTypes["default"].func,

    		  /**
    		   * A css class or set of classes applied to the modal container when the modal is open,
    		   * and removed when it is closed.
    		   */
    		  containerClassName: _propTypes["default"].string,

    		  /**
    		   * Close the modal when escape key is pressed
    		   */
    		  keyboard: _propTypes["default"].bool,

    		  /**
    		   * A `react-transition-group@2.0.0` `<Transition/>` component used
    		   * to control animations for the dialog component.
    		   */
    		  transition: _propTypes["default"].elementType,

    		  /**
    		   * A `react-transition-group@2.0.0` `<Transition/>` component used
    		   * to control animations for the backdrop components.
    		   */
    		  backdropTransition: _propTypes["default"].elementType,

    		  /**
    		   * When `true` The modal will automatically shift focus to itself when it opens, and
    		   * replace it to the last focused element when it closes. This also
    		   * works correctly with any Modal children that have the `autoFocus` prop.
    		   *
    		   * Generally this should never be set to `false` as it makes the Modal less
    		   * accessible to assistive technologies, like screen readers.
    		   */
    		  autoFocus: _propTypes["default"].bool,

    		  /**
    		   * When `true` The modal will prevent focus from leaving the Modal while open.
    		   *
    		   * Generally this should never be set to `false` as it makes the Modal less
    		   * accessible to assistive technologies, like screen readers.
    		   */
    		  enforceFocus: _propTypes["default"].bool,

    		  /**
    		   * When `true` The modal will restore focus to previously focused element once
    		   * modal is hidden
    		   */
    		  restoreFocus: _propTypes["default"].bool,

    		  /**
    		   * Options passed to focus function when `restoreFocus` is set to `true`
    		   *
    		   * @link  https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Parameters
    		   */
    		  restoreFocusOptions: _propTypes["default"].shape({
    		    preventScroll: _propTypes["default"].bool
    		  }),

    		  /**
    		   * Callback fired before the Modal transitions in
    		   */
    		  onEnter: _propTypes["default"].func,

    		  /**
    		   * Callback fired as the Modal begins to transition in
    		   */
    		  onEntering: _propTypes["default"].func,

    		  /**
    		   * Callback fired after the Modal finishes transitioning in
    		   */
    		  onEntered: _propTypes["default"].func,

    		  /**
    		   * Callback fired right before the Modal transitions out
    		   */
    		  onExit: _propTypes["default"].func,

    		  /**
    		   * Callback fired as the Modal begins to transition out
    		   */
    		  onExiting: _propTypes["default"].func,

    		  /**
    		   * Callback fired after the Modal finishes transitioning out
    		   */
    		  onExited: _propTypes["default"].func,

    		  /**
    		   * A ModalManager instance used to track and manage the state of open
    		   * Modals. Useful when customizing how modals interact within a container
    		   */
    		  manager: _propTypes["default"].instanceOf(_ModalManager["default"])
    		};
    		Modal.displayName = 'Modal';
    		Modal.propTypes = propTypes;

    		var _default = Object.assign(Modal, {
    		  Manager: _ModalManager["default"]
    		});

    		exports["default"] = _default;
    		module.exports = exports.default; 
    	} (Modal, Modal.exports));
    	return Modal.exports;
    }

    var Overlay = {exports: {}};

    var useMergedRefs = {};

    var hasRequiredUseMergedRefs;

    function requireUseMergedRefs () {
    	if (hasRequiredUseMergedRefs) return useMergedRefs;
    	hasRequiredUseMergedRefs = 1;

    	useMergedRefs.__esModule = true;
    	useMergedRefs.default = void 0;
    	useMergedRefs.mergeRefs = mergeRefs;
    	var _react = React__default.default;
    	const toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {
    	  ref.current = value;
    	};
    	function mergeRefs(refA, refB) {
    	  const a = toFnRef(refA);
    	  const b = toFnRef(refB);
    	  return value => {
    	    if (a) a(value);
    	    if (b) b(value);
    	  };
    	}

    	/**
    	 * Create and returns a single callback ref composed from two other Refs.
    	 *
    	 * ```tsx
    	 * const Button = React.forwardRef((props, ref) => {
    	 *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();
    	 *   const mergedRef = useMergedRefs(ref, attachRef);
    	 *
    	 *   return <button ref={mergedRef} {...props}/>
    	 * })
    	 * ```
    	 *
    	 * @param refA A Callback or mutable Ref
    	 * @param refB A Callback or mutable Ref
    	 * @category refs
    	 */
    	function useMergedRefs$1(refA, refB) {
    	  return (0, _react.useMemo)(() => mergeRefs(refA, refB), [refA, refB]);
    	}
    	var _default = useMergedRefs$1;
    	useMergedRefs.default = _default;
    	return useMergedRefs;
    }

    var hasRequiredOverlay;

    function requireOverlay () {
    	if (hasRequiredOverlay) return Overlay.exports;
    	hasRequiredOverlay = 1;
    	(function (module, exports) {

    		var _interopRequireWildcard = interopRequireWildcardExports;

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports["default"] = void 0;

    		var _extends2 = _interopRequireDefault(require_extends());

    		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLooseExports);

    		var _propTypes = _interopRequireDefault(require$$4__default.default);

    		var _react = _interopRequireWildcard(React__default.default);

    		var _reactDom = _interopRequireDefault(require$$1__default.default);

    		var _useCallbackRef3 = _interopRequireDefault(requireUseCallbackRef());

    		var _useMergedRefs = _interopRequireDefault(requireUseMergedRefs());

    		var _popper = requirePopper();

    		var _usePopper2 = _interopRequireDefault(requireUsePopper());

    		var _useRootClose = _interopRequireDefault(requireUseRootClose());

    		var _useWaitForDOMRef = _interopRequireDefault(requireUseWaitForDOMRef());

    		var _mergeOptionsWithPopperConfig = _interopRequireDefault(requireMergeOptionsWithPopperConfig());

    		/**
    		 * Built on top of `Popper.js`, the overlay component is
    		 * great for custom tooltip overlays.
    		 */
    		var Overlay = /*#__PURE__*/_react["default"].forwardRef(function (props, outerRef) {
    		  var flip = props.flip,
    		      offset = props.offset,
    		      placement = props.placement,
    		      _props$containerPaddi = props.containerPadding,
    		      containerPadding = _props$containerPaddi === void 0 ? 5 : _props$containerPaddi,
    		      _props$popperConfig = props.popperConfig,
    		      popperConfig = _props$popperConfig === void 0 ? {} : _props$popperConfig,
    		      Transition = props.transition;

    		  var _useCallbackRef = (0, _useCallbackRef3["default"])(),
    		      rootElement = _useCallbackRef[0],
    		      attachRef = _useCallbackRef[1];

    		  var _useCallbackRef2 = (0, _useCallbackRef3["default"])(),
    		      arrowElement = _useCallbackRef2[0],
    		      attachArrowRef = _useCallbackRef2[1];

    		  var mergedRef = (0, _useMergedRefs["default"])(attachRef, outerRef);
    		  var container = (0, _useWaitForDOMRef["default"])(props.container);
    		  var target = (0, _useWaitForDOMRef["default"])(props.target);

    		  var _useState = (0, _react.useState)(!props.show),
    		      exited = _useState[0],
    		      setExited = _useState[1];

    		  var _usePopper = (0, _usePopper2["default"])(target, rootElement, (0, _mergeOptionsWithPopperConfig["default"])({
    		    placement: placement,
    		    enableEvents: !!props.show,
    		    containerPadding: containerPadding || 5,
    		    flip: flip,
    		    offset: offset,
    		    arrowElement: arrowElement,
    		    popperConfig: popperConfig
    		  })),
    		      styles = _usePopper.styles,
    		      attributes = _usePopper.attributes,
    		      popper = (0, _objectWithoutPropertiesLoose2["default"])(_usePopper, ["styles", "attributes"]);

    		  if (props.show) {
    		    if (exited) setExited(false);
    		  } else if (!props.transition && !exited) {
    		    setExited(true);
    		  }

    		  var handleHidden = function handleHidden() {
    		    setExited(true);

    		    if (props.onExited) {
    		      props.onExited.apply(props, arguments);
    		    }
    		  }; // Don't un-render the overlay while it's transitioning out.


    		  var mountOverlay = props.show || Transition && !exited;
    		  (0, _useRootClose["default"])(rootElement, props.onHide, {
    		    disabled: !props.rootClose || props.rootCloseDisabled,
    		    clickTrigger: props.rootCloseEvent
    		  });

    		  if (!mountOverlay) {
    		    // Don't bother showing anything if we don't have to.
    		    return null;
    		  }

    		  var child = props.children((0, _extends2["default"])({}, popper, {
    		    show: !!props.show,
    		    props: (0, _extends2["default"])({}, attributes.popper, {
    		      style: styles.popper,
    		      ref: mergedRef
    		    }),
    		    arrowProps: (0, _extends2["default"])({}, attributes.arrow, {
    		      style: styles.arrow,
    		      ref: attachArrowRef
    		    })
    		  }));

    		  if (Transition) {
    		    var onExit = props.onExit,
    		        onExiting = props.onExiting,
    		        onEnter = props.onEnter,
    		        onEntering = props.onEntering,
    		        onEntered = props.onEntered;
    		    child = /*#__PURE__*/_react["default"].createElement(Transition, {
    		      "in": props.show,
    		      appear: true,
    		      onExit: onExit,
    		      onExiting: onExiting,
    		      onExited: handleHidden,
    		      onEnter: onEnter,
    		      onEntering: onEntering,
    		      onEntered: onEntered
    		    }, child);
    		  }

    		  return container ? /*#__PURE__*/_reactDom["default"].createPortal(child, container) : null;
    		});

    		Overlay.displayName = 'Overlay';
    		Overlay.propTypes = {
    		  /**
    		   * Set the visibility of the Overlay
    		   */
    		  show: _propTypes["default"].bool,

    		  /** Specify where the overlay element is positioned in relation to the target element */
    		  placement: _propTypes["default"].oneOf(_popper.placements),

    		  /**
    		   * A DOM Element, Ref to an element, or function that returns either. The `target` element is where
    		   * the overlay is positioned relative to.
    		   */
    		  target: _propTypes["default"].any,

    		  /**
    		   * A DOM Element, Ref to an element, or function that returns either. The `container` will have the Portal children
    		   * appended to it.
    		   */
    		  container: _propTypes["default"].any,

    		  /**
    		   * Enables the Popper.js `flip` modifier, allowing the Overlay to
    		   * automatically adjust it's placement in case of overlap with the viewport or toggle.
    		   * Refer to the [flip docs](https://popper.js.org/popper-documentation.html#modifiers..flip.enabled) for more info
    		   */
    		  flip: _propTypes["default"].bool,

    		  /**
    		   * A render prop that returns an element to overlay and position. See
    		   * the [react-popper documentation](https://github.com/FezVrasta/react-popper#children) for more info.
    		   *
    		   * @type {Function ({
    		   *   show: boolean,
    		   *   placement: Placement,
    		   *   update: () => void,
    		   *   forceUpdate: () => void,
    		   *   props: {
    		   *     ref: (?HTMLElement) => void,
    		   *     style: { [string]: string | number },
    		   *     aria-labelledby: ?string
    		   *     [string]: string | number,
    		   *   },
    		   *   arrowProps: {
    		   *     ref: (?HTMLElement) => void,
    		   *     style: { [string]: string | number },
    		   *     [string]: string | number,
    		   *   },
    		   * }) => React.Element}
    		   */
    		  children: _propTypes["default"].func.isRequired,

    		  /**
    		   * Control how much space there is between the edge of the boundary element and overlay.
    		   * A convenience shortcut to setting `popperConfig.modfiers.preventOverflow.padding`
    		   */
    		  containerPadding: _propTypes["default"].number,

    		  /**
    		   * A set of popper options and props passed directly to react-popper's Popper component.
    		   */
    		  popperConfig: _propTypes["default"].object,

    		  /**
    		   * Specify whether the overlay should trigger `onHide` when the user clicks outside the overlay
    		   */
    		  rootClose: _propTypes["default"].bool,

    		  /**
    		   * Specify event for toggling overlay
    		   */
    		  rootCloseEvent: _propTypes["default"].oneOf(['click', 'mousedown']),

    		  /**
    		   * Specify disabled for disable RootCloseWrapper
    		   */
    		  rootCloseDisabled: _propTypes["default"].bool,

    		  /**
    		   * A Callback fired by the Overlay when it wishes to be hidden.
    		   *
    		   * __required__ when `rootClose` is `true`.
    		   *
    		   * @type func
    		   */
    		  onHide: function onHide(props) {
    		    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    		      args[_key - 1] = arguments[_key];
    		    }

    		    if (props.rootClose) {
    		      var _PropTypes$func;

    		      return (_PropTypes$func = _propTypes["default"].func).isRequired.apply(_PropTypes$func, [props].concat(args));
    		    }

    		    return _propTypes["default"].func.apply(_propTypes["default"], [props].concat(args));
    		  },

    		  /**
    		   * A `react-transition-group@2.0.0` `<Transition/>` component
    		   * used to animate the overlay as it changes visibility.
    		   */
    		  // @ts-ignore
    		  transition: _propTypes["default"].elementType,

    		  /**
    		   * Callback fired before the Overlay transitions in
    		   */
    		  onEnter: _propTypes["default"].func,

    		  /**
    		   * Callback fired as the Overlay begins to transition in
    		   */
    		  onEntering: _propTypes["default"].func,

    		  /**
    		   * Callback fired after the Overlay finishes transitioning in
    		   */
    		  onEntered: _propTypes["default"].func,

    		  /**
    		   * Callback fired right before the Overlay transitions out
    		   */
    		  onExit: _propTypes["default"].func,

    		  /**
    		   * Callback fired as the Overlay begins to transition out
    		   */
    		  onExiting: _propTypes["default"].func,

    		  /**
    		   * Callback fired after the Overlay finishes transitioning out
    		   */
    		  onExited: _propTypes["default"].func
    		};
    		var _default = Overlay;
    		exports["default"] = _default;
    		module.exports = exports.default; 
    	} (Overlay, Overlay.exports));
    	return Overlay.exports;
    }

    var Portal = {exports: {}};

    var hasRequiredPortal;

    function requirePortal () {
    	if (hasRequiredPortal) return Portal.exports;
    	hasRequiredPortal = 1;
    	(function (module, exports) {

    		var _interopRequireDefault = interopRequireDefaultExports;

    		exports.__esModule = true;
    		exports["default"] = void 0;

    		var _propTypes = _interopRequireDefault(require$$4__default.default);

    		var _reactDom = _interopRequireDefault(require$$1__default.default);

    		var _react = _interopRequireDefault(React__default.default);

    		var _useWaitForDOMRef = _interopRequireDefault(requireUseWaitForDOMRef());

    		var propTypes = {
    		  /**
    		   * A DOM element, Ref to an element, or function that returns either. The `container` will have the Portal children
    		   * appended to it.
    		   */
    		  container: _propTypes["default"].any,
    		  onRendered: _propTypes["default"].func
    		};

    		/**
    		 * @public
    		 */
    		var Portal = function Portal(_ref) {
    		  var container = _ref.container,
    		      children = _ref.children,
    		      onRendered = _ref.onRendered;
    		  var resolvedContainer = (0, _useWaitForDOMRef["default"])(container, onRendered);
    		  return resolvedContainer ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_reactDom["default"].createPortal(children, resolvedContainer)) : null;
    		};

    		Portal.displayName = 'Portal';
    		Portal.propTypes = propTypes;
    		var _default = Portal;
    		exports["default"] = _default;
    		module.exports = exports.default; 
    	} (Portal, Portal.exports));
    	return Portal.exports;
    }

    var _interopRequireDefault$E = interopRequireDefaultExports;

    cjs.__esModule = true;

    var _Dropdown = _interopRequireDefault$E(requireDropdown());

    cjs.Dropdown = _Dropdown["default"];

    var _DropdownMenu = requireDropdownMenu();

    cjs.useDropdownMenu = _DropdownMenu.useDropdownMenu;

    var _DropdownToggle = requireDropdownToggle();

    cjs.useDropdownToggle = _DropdownToggle.useDropdownToggle;

    var _Modal = _interopRequireDefault$E(requireModal());

    cjs.Modal = _Modal["default"];

    var _Overlay = _interopRequireDefault$E(requireOverlay());

    cjs.Overlay = _Overlay["default"];

    var _Portal = _interopRequireDefault$E(requirePortal());

    cjs.Portal = _Portal["default"];

    var _useRootClose = _interopRequireDefault$E(requireUseRootClose());

    cjs.useRootClose = _useRootClose["default"];

    var Popup$1 = {};

    var useClickOutside$1 = {};

    Object.defineProperty(useClickOutside$1, "__esModule", {
      value: true
    });
    useClickOutside$1.default = useClickOutside;
    var _react$q = React__default.default;
    function useClickOutside(_ref) {
      var ref = _ref.ref,
        callback = _ref.callback;
      (0, _react$q.useEffect)(function () {
        var handleClickOutside = function handleClickOutside(e) {
          if (ref.current && !ref.current.contains(e.target)) {
            callback();
          }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return function () {
          document.removeEventListener('mousedown', handleClickOutside);
        };
      }, [ref, callback]);
    }

    var EventCell$1 = {};

    var _interopRequireDefault$D = interopRequireDefaultExports.default;
    Object.defineProperty(EventCell$1, "__esModule", {
      value: true
    });
    EventCell$1.default = void 0;
    var _objectSpread2$7 = _interopRequireDefault$D(objectSpread2Exports);
    var _objectWithoutProperties2$7 = _interopRequireDefault$D(objectWithoutPropertiesExports);
    var _classCallCheck2$g = _interopRequireDefault$D(classCallCheckExports);
    var _createClass2$g = _interopRequireDefault$D(createClassExports);
    var _callSuper2$e = _interopRequireDefault$D(callSuperExports);
    var _inherits2$e = _interopRequireDefault$D(inheritsExports);
    var _react$p = _interopRequireDefault$D(React__default.default);
    var _clsx$d = _interopRequireDefault$D(clsxExports);
    var _excluded$7 = ["style", "className", "event", "selected", "isAllDay", "onSelect", "onDoubleClick", "onKeyPress", "localizer", "continuesPrior", "continuesAfter", "accessors", "getters", "children", "components", "slotStart", "slotEnd"];
    var EventCell = /*#__PURE__*/function (_React$Component) {
      function EventCell() {
        (0, _classCallCheck2$g.default)(this, EventCell);
        return (0, _callSuper2$e.default)(this, EventCell, arguments);
      }
      (0, _inherits2$e.default)(EventCell, _React$Component);
      return (0, _createClass2$g.default)(EventCell, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
            style = _this$props.style,
            className = _this$props.className,
            event = _this$props.event,
            selected = _this$props.selected,
            isAllDay = _this$props.isAllDay,
            onSelect = _this$props.onSelect,
            _onDoubleClick = _this$props.onDoubleClick,
            onKeyPress = _this$props.onKeyPress,
            localizer = _this$props.localizer,
            continuesPrior = _this$props.continuesPrior,
            continuesAfter = _this$props.continuesAfter,
            accessors = _this$props.accessors,
            getters = _this$props.getters,
            children = _this$props.children,
            _this$props$component = _this$props.components,
            Event = _this$props$component.event,
            EventWrapper = _this$props$component.eventWrapper,
            slotStart = _this$props.slotStart,
            slotEnd = _this$props.slotEnd,
            props = (0, _objectWithoutProperties2$7.default)(_this$props, _excluded$7);
          delete props.resizable;
          var title = accessors.title(event);
          var tooltip = accessors.tooltip(event);
          var end = accessors.end(event);
          var start = accessors.start(event);
          var allDay = accessors.allDay(event);
          var showAsAllDay = isAllDay || allDay || localizer.diff(start, localizer.ceil(end, 'day'), 'day') > 1;
          var userProps = getters.eventProp(event, start, end, selected);
          var content = /*#__PURE__*/_react$p.default.createElement("div", {
            className: "rbc-event-content",
            title: tooltip || undefined
          }, Event ? /*#__PURE__*/_react$p.default.createElement(Event, {
            event: event,
            continuesPrior: continuesPrior,
            continuesAfter: continuesAfter,
            title: title,
            isAllDay: allDay,
            localizer: localizer,
            slotStart: slotStart,
            slotEnd: slotEnd
          }) : title);
          return /*#__PURE__*/_react$p.default.createElement(EventWrapper, Object.assign({}, this.props, {
            type: "date"
          }), /*#__PURE__*/_react$p.default.createElement("div", Object.assign({}, props, {
            style: (0, _objectSpread2$7.default)((0, _objectSpread2$7.default)({}, userProps.style), style),
            className: (0, _clsx$d.default)('rbc-event', className, userProps.className, {
              'rbc-selected': selected,
              'rbc-event-allday': showAsAllDay,
              'rbc-event-continues-prior': continuesPrior,
              'rbc-event-continues-after': continuesAfter
            }),
            onClick: function onClick(e) {
              return onSelect && onSelect(event, e);
            },
            onDoubleClick: function onDoubleClick(e) {
              return _onDoubleClick && _onDoubleClick(event, e);
            },
            onKeyDown: function onKeyDown(e) {
              return onKeyPress && onKeyPress(event, e);
            }
          }), typeof children === 'function' ? children(content) : content));
        }
      }]);
    }(_react$p.default.Component);
    EventCell$1.default = EventCell;

    var selection = {};

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */

    function listCacheClear$1() {
      this.__data__ = [];
      this.size = 0;
    }

    var _listCacheClear = listCacheClear$1;

    var eq$3 = eq_1;

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf$4(array, key) {
      var length = array.length;
      while (length--) {
        if (eq$3(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    var _assocIndexOf = assocIndexOf$4;

    var assocIndexOf$3 = _assocIndexOf;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype;

    /** Built-in value references. */
    var splice = arrayProto.splice;

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete$1(key) {
      var data = this.__data__,
          index = assocIndexOf$3(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    var _listCacheDelete = listCacheDelete$1;

    var assocIndexOf$2 = _assocIndexOf;

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet$1(key) {
      var data = this.__data__,
          index = assocIndexOf$2(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    var _listCacheGet = listCacheGet$1;

    var assocIndexOf$1 = _assocIndexOf;

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas$1(key) {
      return assocIndexOf$1(this.__data__, key) > -1;
    }

    var _listCacheHas = listCacheHas$1;

    var assocIndexOf = _assocIndexOf;

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet$1(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    var _listCacheSet = listCacheSet$1;

    var listCacheClear = _listCacheClear,
        listCacheDelete = _listCacheDelete,
        listCacheGet = _listCacheGet,
        listCacheHas = _listCacheHas,
        listCacheSet = _listCacheSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache$4(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `ListCache`.
    ListCache$4.prototype.clear = listCacheClear;
    ListCache$4.prototype['delete'] = listCacheDelete;
    ListCache$4.prototype.get = listCacheGet;
    ListCache$4.prototype.has = listCacheHas;
    ListCache$4.prototype.set = listCacheSet;

    var _ListCache = ListCache$4;

    var ListCache$3 = _ListCache;

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear$1() {
      this.__data__ = new ListCache$3;
      this.size = 0;
    }

    var _stackClear = stackClear$1;

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

    function stackDelete$1(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    var _stackDelete = stackDelete$1;

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

    function stackGet$1(key) {
      return this.__data__.get(key);
    }

    var _stackGet = stackGet$1;

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

    function stackHas$1(key) {
      return this.__data__.has(key);
    }

    var _stackHas = stackHas$1;

    var root$6 = _root;

    /** Used to detect overreaching core-js shims. */
    var coreJsData$1 = root$6['__core-js_shared__'];

    var _coreJsData = coreJsData$1;

    var coreJsData = _coreJsData;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked$1(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    var _isMasked = isMasked$1;

    /** Used for built-in method references. */

    var funcProto$2 = Function.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$2 = funcProto$2.toString;

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource$2(func) {
      if (func != null) {
        try {
          return funcToString$2.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    var _toSource = toSource$2;

    var isFunction$2 = isFunction_1,
        isMasked = _isMasked,
        isObject$5 = isObject_1,
        toSource$1 = _toSource;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used for built-in method references. */
    var funcProto$1 = Function.prototype,
        objectProto$e = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$1 = funcProto$1.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$c = objectProto$e.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString$1.call(hasOwnProperty$c).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative$1(value) {
      if (!isObject$5(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource$1(value));
    }

    var _baseIsNative = baseIsNative$1;

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */

    function getValue$1(object, key) {
      return object == null ? undefined : object[key];
    }

    var _getValue = getValue$1;

    var baseIsNative = _baseIsNative,
        getValue = _getValue;

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative$7(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    var _getNative = getNative$7;

    var getNative$6 = _getNative,
        root$5 = _root;

    /* Built-in method references that are verified to be native. */
    var Map$4 = getNative$6(root$5, 'Map');

    var _Map = Map$4;

    var getNative$5 = _getNative;

    /* Built-in method references that are verified to be native. */
    var nativeCreate$4 = getNative$5(Object, 'create');

    var _nativeCreate = nativeCreate$4;

    var nativeCreate$3 = _nativeCreate;

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear$1() {
      this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
      this.size = 0;
    }

    var _hashClear = hashClear$1;

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

    function hashDelete$1(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    var _hashDelete = hashDelete$1;

    var nativeCreate$2 = _nativeCreate;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

    /** Used for built-in method references. */
    var objectProto$d = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$b = objectProto$d.hasOwnProperty;

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet$1(key) {
      var data = this.__data__;
      if (nativeCreate$2) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? undefined : result;
      }
      return hasOwnProperty$b.call(data, key) ? data[key] : undefined;
    }

    var _hashGet = hashGet$1;

    var nativeCreate$1 = _nativeCreate;

    /** Used for built-in method references. */
    var objectProto$c = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$a = objectProto$c.hasOwnProperty;

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas$1(key) {
      var data = this.__data__;
      return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$a.call(data, key);
    }

    var _hashHas = hashHas$1;

    var nativeCreate = _nativeCreate;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet$1(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
      return this;
    }

    var _hashSet = hashSet$1;

    var hashClear = _hashClear,
        hashDelete = _hashDelete,
        hashGet = _hashGet,
        hashHas = _hashHas,
        hashSet = _hashSet;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash$1(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `Hash`.
    Hash$1.prototype.clear = hashClear;
    Hash$1.prototype['delete'] = hashDelete;
    Hash$1.prototype.get = hashGet;
    Hash$1.prototype.has = hashHas;
    Hash$1.prototype.set = hashSet;

    var _Hash = Hash$1;

    var Hash = _Hash,
        ListCache$2 = _ListCache,
        Map$3 = _Map;

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear$1() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map$3 || ListCache$2),
        'string': new Hash
      };
    }

    var _mapCacheClear = mapCacheClear$1;

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */

    function isKeyable$1(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    var _isKeyable = isKeyable$1;

    var isKeyable = _isKeyable;

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData$4(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    var _getMapData = getMapData$4;

    var getMapData$3 = _getMapData;

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete$1(key) {
      var result = getMapData$3(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    var _mapCacheDelete = mapCacheDelete$1;

    var getMapData$2 = _getMapData;

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet$1(key) {
      return getMapData$2(this, key).get(key);
    }

    var _mapCacheGet = mapCacheGet$1;

    var getMapData$1 = _getMapData;

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas$1(key) {
      return getMapData$1(this, key).has(key);
    }

    var _mapCacheHas = mapCacheHas$1;

    var getMapData = _getMapData;

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet$1(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    var _mapCacheSet = mapCacheSet$1;

    var mapCacheClear = _mapCacheClear,
        mapCacheDelete = _mapCacheDelete,
        mapCacheGet = _mapCacheGet,
        mapCacheHas = _mapCacheHas,
        mapCacheSet = _mapCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache$3(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `MapCache`.
    MapCache$3.prototype.clear = mapCacheClear;
    MapCache$3.prototype['delete'] = mapCacheDelete;
    MapCache$3.prototype.get = mapCacheGet;
    MapCache$3.prototype.has = mapCacheHas;
    MapCache$3.prototype.set = mapCacheSet;

    var _MapCache = MapCache$3;

    var ListCache$1 = _ListCache,
        Map$2 = _Map,
        MapCache$2 = _MapCache;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet$1(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache$1) {
        var pairs = data.__data__;
        if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache$2(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    var _stackSet = stackSet$1;

    var ListCache = _ListCache,
        stackClear = _stackClear,
        stackDelete = _stackDelete,
        stackGet = _stackGet,
        stackHas = _stackHas,
        stackSet = _stackSet;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack$3(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    // Add methods to `Stack`.
    Stack$3.prototype.clear = stackClear;
    Stack$3.prototype['delete'] = stackDelete;
    Stack$3.prototype.get = stackGet;
    Stack$3.prototype.has = stackHas;
    Stack$3.prototype.set = stackSet;

    var _Stack = Stack$3;

    /** Used to stand-in for `undefined` hash values. */

    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd$1(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    var _setCacheAdd = setCacheAdd$1;

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */

    function setCacheHas$1(value) {
      return this.__data__.has(value);
    }

    var _setCacheHas = setCacheHas$1;

    var MapCache$1 = _MapCache,
        setCacheAdd = _setCacheAdd,
        setCacheHas = _setCacheHas;

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache$1(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache$1;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    // Add methods to `SetCache`.
    SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;
    SetCache$1.prototype.has = setCacheHas;

    var _SetCache = SetCache$1;

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */

    function arraySome$1(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    var _arraySome = arraySome$1;

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

    function cacheHas$1(cache, key) {
      return cache.has(key);
    }

    var _cacheHas = cacheHas$1;

    var SetCache = _SetCache,
        arraySome = _arraySome,
        cacheHas = _cacheHas;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$5 = 1,
        COMPARE_UNORDERED_FLAG$3 = 2;

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    var _equalArrays = equalArrays$2;

    var root$4 = _root;

    /** Built-in value references. */
    var Uint8Array$3 = root$4.Uint8Array;

    var _Uint8Array = Uint8Array$3;

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */

    function mapToArray$1(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    var _mapToArray = mapToArray$1;

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */

    function setToArray$1(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    var _setToArray = setToArray$1;

    var Symbol$4 = _Symbol,
        Uint8Array$2 = _Uint8Array,
        eq$2 = eq_1,
        equalArrays$1 = _equalArrays,
        mapToArray = _mapToArray,
        setToArray = _setToArray;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$4 = 1,
        COMPARE_UNORDERED_FLAG$2 = 2;

    /** `Object#toString` result references. */
    var boolTag$3 = '[object Boolean]',
        dateTag$3 = '[object Date]',
        errorTag$2 = '[object Error]',
        mapTag$5 = '[object Map]',
        numberTag$3 = '[object Number]',
        regexpTag$3 = '[object RegExp]',
        setTag$5 = '[object Set]',
        stringTag$3 = '[object String]',
        symbolTag$2 = '[object Symbol]';

    var arrayBufferTag$3 = '[object ArrayBuffer]',
        dataViewTag$4 = '[object DataView]';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : undefined,
        symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag$4:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag$3:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array$2(object), new Uint8Array$2(other))) {
            return false;
          }
          return true;

        case boolTag$3:
        case dateTag$3:
        case numberTag$3:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq$2(+object, +other);

        case errorTag$2:
          return object.name == other.name && object.message == other.message;

        case regexpTag$3:
        case stringTag$3:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag$5:
          var convert = mapToArray;

        case setTag$5:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag$2:
          if (symbolValueOf$1) {
            return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
          }
      }
      return false;
    }

    var _equalByTag = equalByTag$1;

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */

    function arrayPush$3(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    var _arrayPush = arrayPush$3;

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */

    var isArray$c = Array.isArray;

    var isArray_1 = isArray$c;

    var arrayPush$2 = _arrayPush,
        isArray$b = isArray_1;

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray$b(object) ? result : arrayPush$2(result, symbolsFunc(object));
    }

    var _baseGetAllKeys = baseGetAllKeys$2;

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */

    function arrayFilter$1(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    var _arrayFilter = arrayFilter$1;

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */

    function stubArray$2() {
      return [];
    }

    var stubArray_1 = stubArray$2;

    var arrayFilter = _arrayFilter,
        stubArray$1 = stubArray_1;

    /** Used for built-in method references. */
    var objectProto$b = Object.prototype;

    /** Built-in value references. */
    var propertyIsEnumerable$1 = objectProto$b.propertyIsEnumerable;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable$1.call(object, symbol);
      });
    };

    var _getSymbols = getSymbols$3;

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */

    function baseTimes$1(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    var _baseTimes = baseTimes$1;

    var baseGetTag$3 = _baseGetTag,
        isObjectLike$6 = isObjectLike_1;

    /** `Object#toString` result references. */
    var argsTag$3 = '[object Arguments]';

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments$1(value) {
      return isObjectLike$6(value) && baseGetTag$3(value) == argsTag$3;
    }

    var _baseIsArguments = baseIsArguments$1;

    var baseIsArguments = _baseIsArguments,
        isObjectLike$5 = isObjectLike_1;

    /** Used for built-in method references. */
    var objectProto$a = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$9 = objectProto$a.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto$a.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments$3 = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike$5(value) && hasOwnProperty$9.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    var isArguments_1 = isArguments$3;

    var isBuffer$4 = {exports: {}};

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */

    function stubFalse() {
      return false;
    }

    var stubFalse_1 = stubFalse;

    isBuffer$4.exports;

    (function (module, exports) {
    	var root = _root,
    	    stubFalse = stubFalse_1;

    	/** Detect free variable `exports`. */
    	var freeExports = exports && !exports.nodeType && exports;

    	/** Detect free variable `module`. */
    	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    	/** Detect the popular CommonJS extension `module.exports`. */
    	var moduleExports = freeModule && freeModule.exports === freeExports;

    	/** Built-in value references. */
    	var Buffer = moduleExports ? root.Buffer : undefined;

    	/* Built-in method references for those with the same name as other `lodash` methods. */
    	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

    	/**
    	 * Checks if `value` is a buffer.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.3.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
    	 * @example
    	 *
    	 * _.isBuffer(new Buffer(2));
    	 * // => true
    	 *
    	 * _.isBuffer(new Uint8Array(2));
    	 * // => false
    	 */
    	var isBuffer = nativeIsBuffer || stubFalse;

    	module.exports = isBuffer; 
    } (isBuffer$4, isBuffer$4.exports));

    var isBufferExports = isBuffer$4.exports;

    var baseGetTag$2 = _baseGetTag,
        isLength$1 = isLength_1,
        isObjectLike$4 = isObjectLike_1;

    /** `Object#toString` result references. */
    var argsTag$2 = '[object Arguments]',
        arrayTag$2 = '[object Array]',
        boolTag$2 = '[object Boolean]',
        dateTag$2 = '[object Date]',
        errorTag$1 = '[object Error]',
        funcTag$1 = '[object Function]',
        mapTag$4 = '[object Map]',
        numberTag$2 = '[object Number]',
        objectTag$4 = '[object Object]',
        regexpTag$2 = '[object RegExp]',
        setTag$4 = '[object Set]',
        stringTag$2 = '[object String]',
        weakMapTag$2 = '[object WeakMap]';

    var arrayBufferTag$2 = '[object ArrayBuffer]',
        dataViewTag$3 = '[object DataView]',
        float32Tag$2 = '[object Float32Array]',
        float64Tag$2 = '[object Float64Array]',
        int8Tag$2 = '[object Int8Array]',
        int16Tag$2 = '[object Int16Array]',
        int32Tag$2 = '[object Int32Array]',
        uint8Tag$2 = '[object Uint8Array]',
        uint8ClampedTag$2 = '[object Uint8ClampedArray]',
        uint16Tag$2 = '[object Uint16Array]',
        uint32Tag$2 = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
    typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
    typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
    typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
    typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
    typedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] =
    typedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] =
    typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] =
    typedArrayTags[mapTag$4] = typedArrayTags[numberTag$2] =
    typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$2] =
    typedArrayTags[setTag$4] = typedArrayTags[stringTag$2] =
    typedArrayTags[weakMapTag$2] = false;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray$1(value) {
      return isObjectLike$4(value) &&
        isLength$1(value.length) && !!typedArrayTags[baseGetTag$2(value)];
    }

    var _baseIsTypedArray = baseIsTypedArray$1;

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */

    function baseUnary$4(func) {
      return function(value) {
        return func(value);
      };
    }

    var _baseUnary = baseUnary$4;

    var _nodeUtil = {exports: {}};

    _nodeUtil.exports;

    (function (module, exports) {
    	var freeGlobal = _freeGlobal;

    	/** Detect free variable `exports`. */
    	var freeExports = exports && !exports.nodeType && exports;

    	/** Detect free variable `module`. */
    	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    	/** Detect the popular CommonJS extension `module.exports`. */
    	var moduleExports = freeModule && freeModule.exports === freeExports;

    	/** Detect free variable `process` from Node.js. */
    	var freeProcess = moduleExports && freeGlobal.process;

    	/** Used to access faster Node.js helpers. */
    	var nodeUtil = (function() {
    	  try {
    	    // Use `util.types` for Node.js 10+.
    	    var types = freeModule && freeModule.require && freeModule.require('util').types;

    	    if (types) {
    	      return types;
    	    }

    	    // Legacy `process.binding('util')` for Node.js < 10.
    	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
    	  } catch (e) {}
    	}());

    	module.exports = nodeUtil; 
    } (_nodeUtil, _nodeUtil.exports));

    var _nodeUtilExports = _nodeUtil.exports;

    var baseIsTypedArray = _baseIsTypedArray,
        baseUnary$3 = _baseUnary,
        nodeUtil$2 = _nodeUtilExports;

    /* Node.js helper references. */
    var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray$3 = nodeIsTypedArray ? baseUnary$3(nodeIsTypedArray) : baseIsTypedArray;

    var isTypedArray_1 = isTypedArray$3;

    var baseTimes = _baseTimes,
        isArguments$2 = isArguments_1,
        isArray$a = isArray_1,
        isBuffer$3 = isBufferExports,
        isIndex$1 = _isIndex,
        isTypedArray$2 = isTypedArray_1;

    /** Used for built-in method references. */
    var objectProto$9 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$8 = objectProto$9.hasOwnProperty;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys$2(value, inherited) {
      var isArr = isArray$a(value),
          isArg = !isArr && isArguments$2(value),
          isBuff = !isArr && !isArg && isBuffer$3(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray$2(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty$8.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex$1(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    var _arrayLikeKeys = arrayLikeKeys$2;

    /** Used for built-in method references. */

    var objectProto$8 = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype$3(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$8;

      return value === proto;
    }

    var _isPrototype = isPrototype$3;

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */

    function overArg$2(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    var _overArg = overArg$2;

    var overArg$1 = _overArg;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys$1 = overArg$1(Object.keys, Object);

    var _nativeKeys = nativeKeys$1;

    var isPrototype$2 = _isPrototype,
        nativeKeys = _nativeKeys;

    /** Used for built-in method references. */
    var objectProto$7 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$7 = objectProto$7.hasOwnProperty;

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys$1(object) {
      if (!isPrototype$2(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeys = baseKeys$1;

    var arrayLikeKeys$1 = _arrayLikeKeys,
        baseKeys = _baseKeys,
        isArrayLike$3 = isArrayLike_1;

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys$5(object) {
      return isArrayLike$3(object) ? arrayLikeKeys$1(object) : baseKeys(object);
    }

    var keys_1 = keys$5;

    var baseGetAllKeys$1 = _baseGetAllKeys,
        getSymbols$2 = _getSymbols,
        keys$4 = keys_1;

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys$2(object) {
      return baseGetAllKeys$1(object, keys$4, getSymbols$2);
    }

    var _getAllKeys = getAllKeys$2;

    var getAllKeys$1 = _getAllKeys;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$3 = 1;

    /** Used for built-in method references. */
    var objectProto$6 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$6 = objectProto$6.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
          objProps = getAllKeys$1(object),
          objLength = objProps.length,
          othProps = getAllKeys$1(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$6.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    var _equalObjects = equalObjects$1;

    var getNative$4 = _getNative,
        root$3 = _root;

    /* Built-in method references that are verified to be native. */
    var DataView$1 = getNative$4(root$3, 'DataView');

    var _DataView = DataView$1;

    var getNative$3 = _getNative,
        root$2 = _root;

    /* Built-in method references that are verified to be native. */
    var Promise$2 = getNative$3(root$2, 'Promise');

    var _Promise = Promise$2;

    var getNative$2 = _getNative,
        root$1 = _root;

    /* Built-in method references that are verified to be native. */
    var Set$2 = getNative$2(root$1, 'Set');

    var _Set = Set$2;

    var getNative$1 = _getNative,
        root = _root;

    /* Built-in method references that are verified to be native. */
    var WeakMap$2 = getNative$1(root, 'WeakMap');

    var _WeakMap = WeakMap$2;

    var DataView = _DataView,
        Map$1 = _Map,
        Promise$1 = _Promise,
        Set$1 = _Set,
        WeakMap$1 = _WeakMap,
        baseGetTag$1 = _baseGetTag,
        toSource = _toSource;

    /** `Object#toString` result references. */
    var mapTag$3 = '[object Map]',
        objectTag$3 = '[object Object]',
        promiseTag = '[object Promise]',
        setTag$3 = '[object Set]',
        weakMapTag$1 = '[object WeakMap]';

    var dataViewTag$2 = '[object DataView]';

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map$1),
        promiseCtorString = toSource(Promise$1),
        setCtorString = toSource(Set$1),
        weakMapCtorString = toSource(WeakMap$1);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag$4 = baseGetTag$1;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag$4(new DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
        (Map$1 && getTag$4(new Map$1) != mapTag$3) ||
        (Promise$1 && getTag$4(Promise$1.resolve()) != promiseTag) ||
        (Set$1 && getTag$4(new Set$1) != setTag$3) ||
        (WeakMap$1 && getTag$4(new WeakMap$1) != weakMapTag$1)) {
      getTag$4 = function(value) {
        var result = baseGetTag$1(value),
            Ctor = result == objectTag$3 ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag$2;
            case mapCtorString: return mapTag$3;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag$3;
            case weakMapCtorString: return weakMapTag$1;
          }
        }
        return result;
      };
    }

    var _getTag = getTag$4;

    var Stack$2 = _Stack,
        equalArrays = _equalArrays,
        equalByTag = _equalByTag,
        equalObjects = _equalObjects,
        getTag$3 = _getTag,
        isArray$9 = isArray_1,
        isBuffer$2 = isBufferExports,
        isTypedArray$1 = isTypedArray_1;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$2 = 1;

    /** `Object#toString` result references. */
    var argsTag$1 = '[object Arguments]',
        arrayTag$1 = '[object Array]',
        objectTag$2 = '[object Object]';

    /** Used for built-in method references. */
    var objectProto$5 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$5 = objectProto$5.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray$9(object),
          othIsArr = isArray$9(other),
          objTag = objIsArr ? arrayTag$1 : getTag$3(object),
          othTag = othIsArr ? arrayTag$1 : getTag$3(other);

      objTag = objTag == argsTag$1 ? objectTag$2 : objTag;
      othTag = othTag == argsTag$1 ? objectTag$2 : othTag;

      var objIsObj = objTag == objectTag$2,
          othIsObj = othTag == objectTag$2,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer$2(object)) {
        if (!isBuffer$2(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack$2);
        return (objIsArr || isTypedArray$1(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty$5.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty$5.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack$2);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack$2);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    var _baseIsEqualDeep = baseIsEqualDeep$1;

    var baseIsEqualDeep = _baseIsEqualDeep,
        isObjectLike$3 = isObjectLike_1;

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual$3(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike$3(value) && !isObjectLike$3(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$3, stack);
    }

    var _baseIsEqual = baseIsEqual$3;

    var baseIsEqual$2 = _baseIsEqual;

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual$2(value, other) {
      return baseIsEqual$2(value, other);
    }

    var isEqual_1 = isEqual$2;

    var _interopRequireDefault$C = interopRequireDefaultExports.default;
    Object.defineProperty(selection, "__esModule", {
      value: true
    });
    selection.dateCellSelection = dateCellSelection;
    selection.getSlotAtX = getSlotAtX;
    selection.isSelected = isSelected;
    selection.pointInBox = pointInBox;
    selection.slotWidth = slotWidth;
    var _isEqual = _interopRequireDefault$C(isEqual_1);
    function isSelected(event, selected) {
      if (!event || selected == null) return false;
      return (0, _isEqual.default)(event, selected);
    }
    function slotWidth(rowBox, slots) {
      var rowWidth = rowBox.right - rowBox.left;
      var cellWidth = rowWidth / slots;
      return cellWidth;
    }
    function getSlotAtX(rowBox, x, rtl, slots) {
      var cellWidth = slotWidth(rowBox, slots);
      return rtl ? slots - 1 - Math.floor((x - rowBox.left) / cellWidth) : Math.floor((x - rowBox.left) / cellWidth);
    }
    function pointInBox(box, _ref) {
      var x = _ref.x,
        y = _ref.y;
      return y >= box.top && y <= box.bottom && x >= box.left && x <= box.right;
    }
    function dateCellSelection(start, rowBox, box, slots, rtl) {
      var startIdx = -1;
      var endIdx = -1;
      var lastSlotIdx = slots - 1;
      var cellWidth = slotWidth(rowBox, slots);

      // cell under the mouse
      var currentSlot = getSlotAtX(rowBox, box.x, rtl, slots);

      // Identify row as either the initial row
      // or the row under the current mouse point
      var isCurrentRow = rowBox.top < box.y && rowBox.bottom > box.y;
      var isStartRow = rowBox.top < start.y && rowBox.bottom > start.y;

      // this row's position relative to the start point
      var isAboveStart = start.y > rowBox.bottom;
      var isBelowStart = rowBox.top > start.y;
      var isBetween = box.top < rowBox.top && box.bottom > rowBox.bottom;

      // this row is between the current and start rows, so entirely selected
      if (isBetween) {
        startIdx = 0;
        endIdx = lastSlotIdx;
      }
      if (isCurrentRow) {
        if (isBelowStart) {
          startIdx = 0;
          endIdx = currentSlot;
        } else if (isAboveStart) {
          startIdx = currentSlot;
          endIdx = lastSlotIdx;
        }
      }
      if (isStartRow) {
        // select the cell under the initial point
        startIdx = endIdx = rtl ? lastSlotIdx - Math.floor((start.x - rowBox.left) / cellWidth) : Math.floor((start.x - rowBox.left) / cellWidth);
        if (isCurrentRow) {
          if (currentSlot < startIdx) startIdx = currentSlot;else endIdx = currentSlot; //select current range
        } else if (start.y < box.y) {
          // the current row is below start row
          // select cells to the right of the start cell
          endIdx = lastSlotIdx;
        } else {
          // select cells to the left of the start cell
          startIdx = 0;
        }
      }
      return {
        startIdx: startIdx,
        endIdx: endIdx
      };
    }

    var _interopRequireDefault$B = interopRequireDefaultExports.default;
    var _interopRequireWildcard$c = interopRequireWildcardExports.default;
    Object.defineProperty(Popup$1, "__esModule", {
      value: true
    });
    Popup$1.default = void 0;
    var _react$o = _interopRequireWildcard$c(React__default.default);
    var _propTypes$2 = _interopRequireDefault$B(require$$4__default.default);
    var _offset = _interopRequireDefault$B(requireOffset());
    var _useClickOutside = _interopRequireDefault$B(useClickOutside$1);
    var _EventCell$1 = _interopRequireDefault$B(EventCell$1);
    var _selection$4 = selection;
    /**
     * Changes to react-overlays cause issue with auto positioning,
     * so we need to manually calculate the position of the popper,
     * and constrain it to the Month container.
     */
    function getPosition(_ref) {
      var target = _ref.target,
        offset = _ref.offset,
        container = _ref.container,
        box = _ref.box;
      var _getOffset = (0, _offset.default)(target),
        top = _getOffset.top,
        left = _getOffset.left,
        width = _getOffset.width,
        height = _getOffset.height;
      var _getOffset2 = (0, _offset.default)(container),
        cTop = _getOffset2.top,
        cLeft = _getOffset2.left,
        cWidth = _getOffset2.width,
        cHeight = _getOffset2.height;
      var _getOffset3 = (0, _offset.default)(box),
        bWidth = _getOffset3.width,
        bHeight = _getOffset3.height;
      var viewBottom = cTop + cHeight;
      var viewRight = cLeft + cWidth;
      var bottom = top + bHeight;
      var right = left + bWidth;
      var x = offset.x,
        y = offset.y;
      var topOffset = bottom > viewBottom ? top - bHeight - y : top + y + height;
      var leftOffset = right > viewRight ? left + x - bWidth + width : left + x;
      return {
        topOffset: topOffset,
        leftOffset: leftOffset
      };
    }
    function Pop(_ref2) {
      var containerRef = _ref2.containerRef,
        accessors = _ref2.accessors,
        getters = _ref2.getters,
        selected = _ref2.selected,
        components = _ref2.components,
        localizer = _ref2.localizer,
        position = _ref2.position,
        show = _ref2.show,
        events = _ref2.events,
        slotStart = _ref2.slotStart,
        slotEnd = _ref2.slotEnd,
        onSelect = _ref2.onSelect,
        onDoubleClick = _ref2.onDoubleClick,
        onKeyPress = _ref2.onKeyPress,
        handleDragStart = _ref2.handleDragStart,
        popperRef = _ref2.popperRef,
        target = _ref2.target,
        offset = _ref2.offset;
      (0, _useClickOutside.default)({
        ref: popperRef,
        callback: show
      });
      (0, _react$o.useLayoutEffect)(function () {
        var _getPosition = getPosition({
            target: target,
            offset: offset,
            container: containerRef.current,
            box: popperRef.current
          }),
          topOffset = _getPosition.topOffset,
          leftOffset = _getPosition.leftOffset;
        popperRef.current.style.top = "".concat(topOffset, "px");
        popperRef.current.style.left = "".concat(leftOffset, "px");
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, [offset.x, offset.y, target]);
      var width = position.width;
      var style = {
        minWidth: width + width / 2
      };
      return /*#__PURE__*/_react$o.default.createElement("div", {
        style: style,
        className: "rbc-overlay",
        ref: popperRef
      }, /*#__PURE__*/_react$o.default.createElement("div", {
        className: "rbc-overlay-header"
      }, localizer.format(slotStart, 'dayHeaderFormat')), events.map(function (event, idx) {
        return /*#__PURE__*/_react$o.default.createElement(_EventCell$1.default, {
          key: idx,
          type: "popup",
          localizer: localizer,
          event: event,
          getters: getters,
          onSelect: onSelect,
          accessors: accessors,
          components: components,
          onDoubleClick: onDoubleClick,
          onKeyPress: onKeyPress,
          continuesPrior: localizer.lt(accessors.end(event), slotStart, 'day'),
          continuesAfter: localizer.gte(accessors.start(event), slotEnd, 'day'),
          slotStart: slotStart,
          slotEnd: slotEnd,
          selected: (0, _selection$4.isSelected)(event, selected),
          draggable: true,
          onDragStart: function onDragStart() {
            return handleDragStart(event);
          },
          onDragEnd: function onDragEnd() {
            return show();
          }
        });
      }));
    }
    var Popup = /*#__PURE__*/_react$o.default.forwardRef(function (props, ref) {
      return /*#__PURE__*/_react$o.default.createElement(Pop, Object.assign({}, props, {
        popperRef: ref
      }));
    });
    Popup.propTypes = {
      accessors: _propTypes$2.default.object.isRequired,
      getters: _propTypes$2.default.object.isRequired,
      selected: _propTypes$2.default.object,
      components: _propTypes$2.default.object.isRequired,
      localizer: _propTypes$2.default.object.isRequired,
      position: _propTypes$2.default.object.isRequired,
      show: _propTypes$2.default.func.isRequired,
      events: _propTypes$2.default.array.isRequired,
      slotStart: _propTypes$2.default.instanceOf(Date).isRequired,
      slotEnd: _propTypes$2.default.instanceOf(Date),
      onSelect: _propTypes$2.default.func,
      onDoubleClick: _propTypes$2.default.func,
      onKeyPress: _propTypes$2.default.func,
      handleDragStart: _propTypes$2.default.func,
      style: _propTypes$2.default.object,
      offset: _propTypes$2.default.shape({
        x: _propTypes$2.default.number,
        y: _propTypes$2.default.number
      })
    };
    Popup$1.default = Popup;

    var _interopRequireDefault$A = interopRequireDefaultExports.default;
    var _interopRequireWildcard$b = interopRequireWildcardExports.default;
    Object.defineProperty(PopOverlay$1, "__esModule", {
      value: true
    });
    PopOverlay$1.default = void 0;
    var _react$n = _interopRequireWildcard$b(React__default.default);
    var _propTypes$1 = _interopRequireDefault$A(require$$4__default.default);
    var _reactOverlays = cjs;
    var _Popup = _interopRequireDefault$A(Popup$1);
    function CalOverlay(_ref) {
      var containerRef = _ref.containerRef,
        _ref$popupOffset = _ref.popupOffset,
        popupOffset = _ref$popupOffset === void 0 ? 5 : _ref$popupOffset,
        overlay = _ref.overlay,
        accessors = _ref.accessors,
        localizer = _ref.localizer,
        components = _ref.components,
        getters = _ref.getters,
        selected = _ref.selected,
        handleSelectEvent = _ref.handleSelectEvent,
        handleDoubleClickEvent = _ref.handleDoubleClickEvent,
        handleKeyPressEvent = _ref.handleKeyPressEvent,
        handleDragStart = _ref.handleDragStart,
        onHide = _ref.onHide,
        overlayDisplay = _ref.overlayDisplay;
      var popperRef = (0, _react$n.useRef)(null);
      if (!overlay.position) return null;
      var offset = popupOffset;
      if (!isNaN(popupOffset)) {
        offset = {
          x: popupOffset,
          y: popupOffset
        };
      }
      var position = overlay.position,
        events = overlay.events,
        date = overlay.date,
        end = overlay.end;
      return /*#__PURE__*/_react$n.default.createElement(_reactOverlays.Overlay, {
        rootClose: true,
        flip: true,
        show: true,
        placement: "bottom",
        onHide: onHide,
        target: overlay.target
      }, function (_ref2) {
        var props = _ref2.props;
        return /*#__PURE__*/_react$n.default.createElement(_Popup.default, Object.assign({}, props, {
          containerRef: containerRef,
          ref: popperRef,
          target: overlay.target,
          offset: offset,
          accessors: accessors,
          getters: getters,
          selected: selected,
          components: components,
          localizer: localizer,
          position: position,
          show: overlayDisplay,
          events: events,
          slotStart: date,
          slotEnd: end,
          onSelect: handleSelectEvent,
          onDoubleClick: handleDoubleClickEvent,
          onKeyPress: handleKeyPressEvent,
          handleDragStart: handleDragStart
        }));
      });
    }
    var PopOverlay = /*#__PURE__*/_react$n.default.forwardRef(function (props, ref) {
      return /*#__PURE__*/_react$n.default.createElement(CalOverlay, Object.assign({}, props, {
        containerRef: ref
      }));
    });
    PopOverlay.propTypes = {
      popupOffset: _propTypes$1.default.oneOfType([_propTypes$1.default.number, _propTypes$1.default.shape({
        x: _propTypes$1.default.number,
        y: _propTypes$1.default.number
      })]),
      overlay: _propTypes$1.default.shape({
        position: _propTypes$1.default.object,
        events: _propTypes$1.default.array,
        date: _propTypes$1.default.instanceOf(Date),
        end: _propTypes$1.default.instanceOf(Date)
      }),
      accessors: _propTypes$1.default.object.isRequired,
      localizer: _propTypes$1.default.object.isRequired,
      components: _propTypes$1.default.object.isRequired,
      getters: _propTypes$1.default.object.isRequired,
      selected: _propTypes$1.default.object,
      handleSelectEvent: _propTypes$1.default.func,
      handleDoubleClickEvent: _propTypes$1.default.func,
      handleKeyPressEvent: _propTypes$1.default.func,
      handleDragStart: _propTypes$1.default.func,
      onHide: _propTypes$1.default.func,
      overlayDisplay: _propTypes$1.default.func
    };
    PopOverlay$1.default = PopOverlay;

    var DateContentRow$1 = {};

    var height = {exports: {}};

    (function (module, exports) {

    	var _interopRequireDefault = interopRequireDefaultExports;

    	exports.__esModule = true;
    	exports.default = height;

    	var _isWindow = _interopRequireDefault(requireIsWindow());

    	var _offset = _interopRequireDefault(requireOffset());

    	/**
    	 * Returns the height of a given element.
    	 * 
    	 * @param node the element
    	 * @param client whether to use `clientHeight` if possible
    	 */
    	function height(node, client) {
    	  var win = (0, _isWindow.default)(node);
    	  return win ? win.innerHeight : client ? node.clientHeight : (0, _offset.default)(node).height;
    	}

    	module.exports = exports["default"]; 
    } (height, height.exports));

    var heightExports = height.exports;

    var BackgroundCells$1 = {};

    var Selection$1 = {};

    var closest = {exports: {}};

    (function (module, exports) {

    	var _interopRequireDefault = interopRequireDefaultExports;

    	exports.__esModule = true;
    	exports.default = closest;

    	var _matches = _interopRequireDefault(requireMatches());

    	/**
    	 * Returns the closest parent element that matches a given selector.
    	 * 
    	 * @param node the reference element
    	 * @param selector the selector to match
    	 * @param stopAt stop traversing when this element is found
    	 */
    	function closest(node, selector, stopAt) {
    	  if (node.closest && !stopAt) node.closest(selector);
    	  var nextNode = node;

    	  do {
    	    if ((0, _matches.default)(nextNode, selector)) return nextNode;
    	    nextNode = nextNode.parentElement;
    	  } while (nextNode && nextNode !== stopAt && nextNode.nodeType === document.ELEMENT_NODE);

    	  return null;
    	}

    	module.exports = exports["default"]; 
    } (closest, closest.exports));

    var closestExports = closest.exports;

    var _interopRequireDefault$z = interopRequireDefaultExports.default;
    Object.defineProperty(Selection$1, "__esModule", {
      value: true
    });
    Selection$1.default = void 0;
    Selection$1.getBoundsForNode = getBoundsForNode;
    Selection$1.getEventNodeFromPoint = getEventNodeFromPoint;
    Selection$1.getShowMoreNodeFromPoint = getShowMoreNodeFromPoint;
    Selection$1.isEvent = isEvent;
    Selection$1.isShowMore = isShowMore;
    Selection$1.objectsCollide = objectsCollide;
    var _typeof2$2 = _interopRequireDefault$z(_typeofExports);
    var _classCallCheck2$f = _interopRequireDefault$z(classCallCheckExports);
    var _createClass2$f = _interopRequireDefault$z(createClassExports);
    var _contains = _interopRequireDefault$z(requireContains());
    var _closest = _interopRequireDefault$z(closestExports);
    var _listen = _interopRequireDefault$z(listenExports);
    function addEventListener(type, handler) {
      var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;
      return (0, _listen.default)(target, type, handler, {
        passive: false
      });
    }
    function isOverContainer(container, x, y) {
      return !container || (0, _contains.default)(container, document.elementFromPoint(x, y));
    }
    function getEventNodeFromPoint(node, _ref) {
      var clientX = _ref.clientX,
        clientY = _ref.clientY;
      var target = document.elementFromPoint(clientX, clientY);
      return (0, _closest.default)(target, '.rbc-event', node);
    }
    function getShowMoreNodeFromPoint(node, _ref2) {
      var clientX = _ref2.clientX,
        clientY = _ref2.clientY;
      var target = document.elementFromPoint(clientX, clientY);
      return (0, _closest.default)(target, '.rbc-show-more', node);
    }
    function isEvent(node, bounds) {
      return !!getEventNodeFromPoint(node, bounds);
    }
    function isShowMore(node, bounds) {
      return !!getShowMoreNodeFromPoint(node, bounds);
    }
    function getEventCoordinates(e) {
      var target = e;
      if (e.touches && e.touches.length) {
        target = e.touches[0];
      }
      return {
        clientX: target.clientX,
        clientY: target.clientY,
        pageX: target.pageX,
        pageY: target.pageY
      };
    }
    var clickTolerance = 5;
    var clickInterval = 250;
    var Selection = /*#__PURE__*/function () {
      function Selection(node) {
        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref3$global = _ref3.global,
          global = _ref3$global === void 0 ? false : _ref3$global,
          _ref3$longPressThresh = _ref3.longPressThreshold,
          longPressThreshold = _ref3$longPressThresh === void 0 ? 250 : _ref3$longPressThresh,
          _ref3$validContainers = _ref3.validContainers,
          validContainers = _ref3$validContainers === void 0 ? [] : _ref3$validContainers;
        (0, _classCallCheck2$f.default)(this, Selection);
        this._initialEvent = null;
        this.selecting = false;
        this.isDetached = false;
        this.container = node;
        this.globalMouse = !node || global;
        this.longPressThreshold = longPressThreshold;
        this.validContainers = validContainers;
        this._listeners = Object.create(null);
        this._handleInitialEvent = this._handleInitialEvent.bind(this);
        this._handleMoveEvent = this._handleMoveEvent.bind(this);
        this._handleTerminatingEvent = this._handleTerminatingEvent.bind(this);
        this._keyListener = this._keyListener.bind(this);
        this._dropFromOutsideListener = this._dropFromOutsideListener.bind(this);
        this._dragOverFromOutsideListener = this._dragOverFromOutsideListener.bind(this);

        // Fixes an iOS 10 bug where scrolling could not be prevented on the window.
        // https://github.com/metafizzy/flickity/issues/457#issuecomment-254501356
        this._removeTouchMoveWindowListener = addEventListener('touchmove', function () {}, window);
        this._removeKeyDownListener = addEventListener('keydown', this._keyListener);
        this._removeKeyUpListener = addEventListener('keyup', this._keyListener);
        this._removeDropFromOutsideListener = addEventListener('drop', this._dropFromOutsideListener);
        this._removeDragOverFromOutsideListener = addEventListener('dragover', this._dragOverFromOutsideListener);
        this._addInitialEventListener();
      }
      return (0, _createClass2$f.default)(Selection, [{
        key: "on",
        value: function on(type, handler) {
          var handlers = this._listeners[type] || (this._listeners[type] = []);
          handlers.push(handler);
          return {
            remove: function remove() {
              var idx = handlers.indexOf(handler);
              if (idx !== -1) handlers.splice(idx, 1);
            }
          };
        }
      }, {
        key: "emit",
        value: function emit(type) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var result;
          var handlers = this._listeners[type] || [];
          handlers.forEach(function (fn) {
            if (result === undefined) result = fn.apply(void 0, args);
          });
          return result;
        }
      }, {
        key: "teardown",
        value: function teardown() {
          this._initialEvent = null;
          this._initialEventData = null;
          this._selectRect = null;
          this.selecting = false;
          this._lastClickData = null;
          this.isDetached = true;
          this._listeners = Object.create(null);
          this._removeTouchMoveWindowListener && this._removeTouchMoveWindowListener();
          this._removeInitialEventListener && this._removeInitialEventListener();
          this._removeEndListener && this._removeEndListener();
          this._onEscListener && this._onEscListener();
          this._removeMoveListener && this._removeMoveListener();
          this._removeKeyUpListener && this._removeKeyUpListener();
          this._removeKeyDownListener && this._removeKeyDownListener();
          this._removeDropFromOutsideListener && this._removeDropFromOutsideListener();
          this._removeDragOverFromOutsideListener && this._removeDragOverFromOutsideListener();
        }
      }, {
        key: "isSelected",
        value: function isSelected(node) {
          var box = this._selectRect;
          if (!box || !this.selecting) return false;
          return objectsCollide(box, getBoundsForNode(node));
        }
      }, {
        key: "filter",
        value: function filter(items) {
          var box = this._selectRect;

          //not selecting
          if (!box || !this.selecting) return [];
          return items.filter(this.isSelected, this);
        }

        // Adds a listener that will call the handler only after the user has pressed on the screen
        // without moving their finger for 250ms.
      }, {
        key: "_addLongPressListener",
        value: function _addLongPressListener(handler, initialEvent) {
          var _this = this;
          var timer = null;
          var removeTouchMoveListener = null;
          var removeTouchEndListener = null;
          var handleTouchStart = function handleTouchStart(initialEvent) {
            timer = setTimeout(function () {
              cleanup();
              handler(initialEvent);
            }, _this.longPressThreshold);
            removeTouchMoveListener = addEventListener('touchmove', function () {
              return cleanup();
            });
            removeTouchEndListener = addEventListener('touchend', function () {
              return cleanup();
            });
          };
          var removeTouchStartListener = addEventListener('touchstart', handleTouchStart);
          var cleanup = function cleanup() {
            if (timer) {
              clearTimeout(timer);
            }
            if (removeTouchMoveListener) {
              removeTouchMoveListener();
            }
            if (removeTouchEndListener) {
              removeTouchEndListener();
            }
            timer = null;
            removeTouchMoveListener = null;
            removeTouchEndListener = null;
          };
          if (initialEvent) {
            handleTouchStart(initialEvent);
          }
          return function () {
            cleanup();
            removeTouchStartListener();
          };
        }

        // Listen for mousedown and touchstart events. When one is received, disable the other and setup
        // future event handling based on the type of event.
      }, {
        key: "_addInitialEventListener",
        value: function _addInitialEventListener() {
          var _this2 = this;
          var removeMouseDownListener = addEventListener('mousedown', function (e) {
            _this2._removeInitialEventListener();
            _this2._handleInitialEvent(e);
            _this2._removeInitialEventListener = addEventListener('mousedown', _this2._handleInitialEvent);
          });
          var removeTouchStartListener = addEventListener('touchstart', function (e) {
            _this2._removeInitialEventListener();
            _this2._removeInitialEventListener = _this2._addLongPressListener(_this2._handleInitialEvent, e);
          });
          this._removeInitialEventListener = function () {
            removeMouseDownListener();
            removeTouchStartListener();
          };
        }
      }, {
        key: "_dropFromOutsideListener",
        value: function _dropFromOutsideListener(e) {
          var _getEventCoordinates = getEventCoordinates(e),
            pageX = _getEventCoordinates.pageX,
            pageY = _getEventCoordinates.pageY,
            clientX = _getEventCoordinates.clientX,
            clientY = _getEventCoordinates.clientY;
          this.emit('dropFromOutside', {
            x: pageX,
            y: pageY,
            clientX: clientX,
            clientY: clientY
          });
          e.preventDefault();
        }
      }, {
        key: "_dragOverFromOutsideListener",
        value: function _dragOverFromOutsideListener(e) {
          var _getEventCoordinates2 = getEventCoordinates(e),
            pageX = _getEventCoordinates2.pageX,
            pageY = _getEventCoordinates2.pageY,
            clientX = _getEventCoordinates2.clientX,
            clientY = _getEventCoordinates2.clientY;
          this.emit('dragOverFromOutside', {
            x: pageX,
            y: pageY,
            clientX: clientX,
            clientY: clientY
          });
          e.preventDefault();
        }
      }, {
        key: "_handleInitialEvent",
        value: function _handleInitialEvent(e) {
          this._initialEvent = e;
          if (this.isDetached) {
            return;
          }
          var _getEventCoordinates3 = getEventCoordinates(e),
            clientX = _getEventCoordinates3.clientX,
            clientY = _getEventCoordinates3.clientY,
            pageX = _getEventCoordinates3.pageX,
            pageY = _getEventCoordinates3.pageY;
          var node = this.container(),
            collides,
            offsetData;

          // Right clicks
          if (e.which === 3 || e.button === 2 || !isOverContainer(node, clientX, clientY)) return;
          if (!this.globalMouse && node && !(0, _contains.default)(node, e.target)) {
            var _normalizeDistance = normalizeDistance(0),
              top = _normalizeDistance.top,
              left = _normalizeDistance.left,
              bottom = _normalizeDistance.bottom,
              right = _normalizeDistance.right;
            offsetData = getBoundsForNode(node);
            collides = objectsCollide({
              top: offsetData.top - top,
              left: offsetData.left - left,
              bottom: offsetData.bottom + bottom,
              right: offsetData.right + right
            }, {
              top: pageY,
              left: pageX
            });
            if (!collides) return;
          }
          var result = this.emit('beforeSelect', this._initialEventData = {
            isTouch: /^touch/.test(e.type),
            x: pageX,
            y: pageY,
            clientX: clientX,
            clientY: clientY
          });
          if (result === false) return;
          switch (e.type) {
            case 'mousedown':
              this._removeEndListener = addEventListener('mouseup', this._handleTerminatingEvent);
              this._onEscListener = addEventListener('keydown', this._handleTerminatingEvent);
              this._removeMoveListener = addEventListener('mousemove', this._handleMoveEvent);
              break;
            case 'touchstart':
              this._handleMoveEvent(e);
              this._removeEndListener = addEventListener('touchend', this._handleTerminatingEvent);
              this._removeMoveListener = addEventListener('touchmove', this._handleMoveEvent);
              break;
          }
        }

        // Check whether provided event target element
        // - is contained within a valid container
      }, {
        key: "_isWithinValidContainer",
        value: function _isWithinValidContainer(e) {
          var eventTarget = e.target;
          var containers = this.validContainers;
          if (!containers || !containers.length || !eventTarget) {
            return true;
          }
          return containers.some(function (target) {
            return !!eventTarget.closest(target);
          });
        }
      }, {
        key: "_handleTerminatingEvent",
        value: function _handleTerminatingEvent(e) {
          var selecting = this.selecting;
          var bounds = this._selectRect;
          // If it's not in selecting state, it's a click event
          if (!selecting && e.type.includes('key')) {
            e = this._initialEvent;
          }
          this.selecting = false;
          this._removeEndListener && this._removeEndListener();
          this._removeMoveListener && this._removeMoveListener();
          this._selectRect = null;
          this._initialEvent = null;
          this._initialEventData = null;
          if (!e) return;
          var inRoot = !this.container || (0, _contains.default)(this.container(), e.target);
          var isWithinValidContainer = this._isWithinValidContainer(e);
          if (e.key === 'Escape' || !isWithinValidContainer) {
            return this.emit('reset');
          }
          if (!selecting && inRoot) {
            return this._handleClickEvent(e);
          }

          // User drag-clicked in the Selectable area
          if (selecting) return this.emit('select', bounds);
          return this.emit('reset');
        }
      }, {
        key: "_handleClickEvent",
        value: function _handleClickEvent(e) {
          var _getEventCoordinates4 = getEventCoordinates(e),
            pageX = _getEventCoordinates4.pageX,
            pageY = _getEventCoordinates4.pageY,
            clientX = _getEventCoordinates4.clientX,
            clientY = _getEventCoordinates4.clientY;
          var now = new Date().getTime();
          if (this._lastClickData && now - this._lastClickData.timestamp < clickInterval) {
            // Double click event
            this._lastClickData = null;
            return this.emit('doubleClick', {
              x: pageX,
              y: pageY,
              clientX: clientX,
              clientY: clientY
            });
          }

          // Click event
          this._lastClickData = {
            timestamp: now
          };
          return this.emit('click', {
            x: pageX,
            y: pageY,
            clientX: clientX,
            clientY: clientY
          });
        }
      }, {
        key: "_handleMoveEvent",
        value: function _handleMoveEvent(e) {
          if (this._initialEventData === null || this.isDetached) {
            return;
          }
          var _this$_initialEventDa = this._initialEventData,
            x = _this$_initialEventDa.x,
            y = _this$_initialEventDa.y;
          var _getEventCoordinates5 = getEventCoordinates(e),
            pageX = _getEventCoordinates5.pageX,
            pageY = _getEventCoordinates5.pageY;
          var w = Math.abs(x - pageX);
          var h = Math.abs(y - pageY);
          var left = Math.min(pageX, x),
            top = Math.min(pageY, y),
            old = this.selecting;
          var click = this.isClick(pageX, pageY);
          // Prevent emitting selectStart event until mouse is moved.
          // in Chrome on Windows, mouseMove event may be fired just after mouseDown event.
          if (click && !old && !(w || h)) {
            return;
          }
          if (!old && !click) {
            this.emit('selectStart', this._initialEventData);
          }
          if (!click) {
            this.selecting = true;
            this._selectRect = {
              top: top,
              left: left,
              x: pageX,
              y: pageY,
              right: left + w,
              bottom: top + h
            };
            this.emit('selecting', this._selectRect);
          }
          e.preventDefault();
        }
      }, {
        key: "_keyListener",
        value: function _keyListener(e) {
          this.ctrl = e.metaKey || e.ctrlKey;
        }
      }, {
        key: "isClick",
        value: function isClick(pageX, pageY) {
          var _this$_initialEventDa2 = this._initialEventData,
            x = _this$_initialEventDa2.x,
            y = _this$_initialEventDa2.y,
            isTouch = _this$_initialEventDa2.isTouch;
          return !isTouch && Math.abs(pageX - x) <= clickTolerance && Math.abs(pageY - y) <= clickTolerance;
        }
      }]);
    }();
    /**
     * Resolve the disance prop from either an Int or an Object
     * @return {Object}
     */
    function normalizeDistance() {
      var distance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if ((0, _typeof2$2.default)(distance) !== 'object') distance = {
        top: distance,
        left: distance,
        right: distance,
        bottom: distance
      };
      return distance;
    }

    /**
     * Given two objects containing "top", "left", "offsetWidth" and "offsetHeight"
     * properties, determine if they collide.
     * @param  {Object|HTMLElement} a
     * @param  {Object|HTMLElement} b
     * @return {bool}
     */
    function objectsCollide(nodeA, nodeB) {
      var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var _getBoundsForNode = getBoundsForNode(nodeA),
        aTop = _getBoundsForNode.top,
        aLeft = _getBoundsForNode.left,
        _getBoundsForNode$rig = _getBoundsForNode.right,
        aRight = _getBoundsForNode$rig === void 0 ? aLeft : _getBoundsForNode$rig,
        _getBoundsForNode$bot = _getBoundsForNode.bottom,
        aBottom = _getBoundsForNode$bot === void 0 ? aTop : _getBoundsForNode$bot;
      var _getBoundsForNode2 = getBoundsForNode(nodeB),
        bTop = _getBoundsForNode2.top,
        bLeft = _getBoundsForNode2.left,
        _getBoundsForNode2$ri = _getBoundsForNode2.right,
        bRight = _getBoundsForNode2$ri === void 0 ? bLeft : _getBoundsForNode2$ri,
        _getBoundsForNode2$bo = _getBoundsForNode2.bottom,
        bBottom = _getBoundsForNode2$bo === void 0 ? bTop : _getBoundsForNode2$bo;
      return !(
      // 'a' bottom doesn't touch 'b' top

      aBottom - tolerance < bTop ||
      // 'a' top doesn't touch 'b' bottom
      aTop + tolerance > bBottom ||
      // 'a' right doesn't touch 'b' left
      aRight - tolerance < bLeft ||
      // 'a' left doesn't touch 'b' right
      aLeft + tolerance > bRight);
    }

    /**
     * Given a node, get everything needed to calculate its boundaries
     * @param  {HTMLElement} node
     * @return {Object}
     */
    function getBoundsForNode(node) {
      if (!node.getBoundingClientRect) return node;
      var rect = node.getBoundingClientRect(),
        left = rect.left + pageOffset('left'),
        top = rect.top + pageOffset('top');
      return {
        top: top,
        left: left,
        right: (node.offsetWidth || 0) + left,
        bottom: (node.offsetHeight || 0) + top
      };
    }
    function pageOffset(dir) {
      if (dir === 'left') return window.pageXOffset || document.body.scrollLeft || 0;
      if (dir === 'top') return window.pageYOffset || document.body.scrollTop || 0;
    }
    Selection$1.default = Selection;

    var _interopRequireWildcard$a = interopRequireWildcardExports.default;
    var _interopRequireDefault$y = interopRequireDefaultExports.default;
    Object.defineProperty(BackgroundCells$1, "__esModule", {
      value: true
    });
    BackgroundCells$1.default = void 0;
    var _objectSpread2$6 = _interopRequireDefault$y(objectSpread2Exports);
    var _classCallCheck2$e = _interopRequireDefault$y(classCallCheckExports);
    var _createClass2$e = _interopRequireDefault$y(createClassExports);
    var _callSuper2$d = _interopRequireDefault$y(callSuperExports);
    var _inherits2$d = _interopRequireDefault$y(inheritsExports);
    var _react$m = _interopRequireWildcard$a(React__default.default);
    var _clsx$c = _interopRequireDefault$y(clsxExports);
    var _helpers$5 = helpers;
    var _selection$3 = selection;
    var _Selection$1 = _interopRequireWildcard$a(Selection$1);
    var BackgroundCells = /*#__PURE__*/function (_React$Component) {
      function BackgroundCells(props, context) {
        var _this;
        (0, _classCallCheck2$e.default)(this, BackgroundCells);
        _this = (0, _callSuper2$d.default)(this, BackgroundCells, [props, context]);
        _this.state = {
          selecting: false
        };
        _this.containerRef = /*#__PURE__*/(0, _react$m.createRef)();
        return _this;
      }
      (0, _inherits2$d.default)(BackgroundCells, _React$Component);
      return (0, _createClass2$e.default)(BackgroundCells, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.selectable && this._selectable();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._teardownSelectable();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (!prevProps.selectable && this.props.selectable) this._selectable();
          if (prevProps.selectable && !this.props.selectable) this._teardownSelectable();
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props,
            range = _this$props.range,
            getNow = _this$props.getNow,
            getters = _this$props.getters,
            currentDate = _this$props.date,
            Wrapper = _this$props.components.dateCellWrapper,
            localizer = _this$props.localizer;
          var _this$state = this.state,
            selecting = _this$state.selecting,
            startIdx = _this$state.startIdx,
            endIdx = _this$state.endIdx;
          var current = getNow();
          return /*#__PURE__*/_react$m.default.createElement("div", {
            className: "rbc-row-bg",
            ref: this.containerRef
          }, range.map(function (date, index) {
            var selected = selecting && index >= startIdx && index <= endIdx;
            var _getters$dayProp = getters.dayProp(date),
              className = _getters$dayProp.className,
              style = _getters$dayProp.style;
            return /*#__PURE__*/_react$m.default.createElement(Wrapper, {
              key: index,
              value: date,
              range: range
            }, /*#__PURE__*/_react$m.default.createElement("div", {
              style: style,
              className: (0, _clsx$c.default)('rbc-day-bg', className, selected && 'rbc-selected-cell', localizer.isSameDate(date, current) && 'rbc-today', currentDate && localizer.neq(currentDate, date, 'month') && 'rbc-off-range-bg')
            }));
          }));
        }
      }, {
        key: "_selectable",
        value: function _selectable() {
          var _this2 = this;
          var node = this.containerRef.current;
          var selector = this._selector = new _Selection$1.default(this.props.container, {
            longPressThreshold: this.props.longPressThreshold
          });
          var selectorClicksHandler = function selectorClicksHandler(point, actionType) {
            if (!(0, _Selection$1.isEvent)(node, point) && !(0, _Selection$1.isShowMore)(node, point)) {
              var rowBox = (0, _Selection$1.getBoundsForNode)(node);
              var _this2$props = _this2.props,
                range = _this2$props.range,
                rtl = _this2$props.rtl;
              if ((0, _selection$3.pointInBox)(rowBox, point)) {
                var currentCell = (0, _selection$3.getSlotAtX)(rowBox, point.x, rtl, range.length);
                _this2._selectSlot({
                  startIdx: currentCell,
                  endIdx: currentCell,
                  action: actionType,
                  box: point
                });
              }
            }
            _this2._initial = {};
            _this2.setState({
              selecting: false
            });
          };
          selector.on('selecting', function (box) {
            var _this2$props2 = _this2.props,
              range = _this2$props2.range,
              rtl = _this2$props2.rtl;
            var startIdx = -1;
            var endIdx = -1;
            if (!_this2.state.selecting) {
              (0, _helpers$5.notify)(_this2.props.onSelectStart, [box]);
              _this2._initial = {
                x: box.x,
                y: box.y
              };
            }
            if (selector.isSelected(node)) {
              var nodeBox = (0, _Selection$1.getBoundsForNode)(node);
              var _dateCellSelection = (0, _selection$3.dateCellSelection)(_this2._initial, nodeBox, box, range.length, rtl);
              startIdx = _dateCellSelection.startIdx;
              endIdx = _dateCellSelection.endIdx;
            }
            _this2.setState({
              selecting: true,
              startIdx: startIdx,
              endIdx: endIdx
            });
          });
          selector.on('beforeSelect', function (box) {
            if (_this2.props.selectable !== 'ignoreEvents') return;
            return !(0, _Selection$1.isEvent)(_this2.containerRef.current, box);
          });
          selector.on('click', function (point) {
            return selectorClicksHandler(point, 'click');
          });
          selector.on('doubleClick', function (point) {
            return selectorClicksHandler(point, 'doubleClick');
          });
          selector.on('select', function (bounds) {
            _this2._selectSlot((0, _objectSpread2$6.default)((0, _objectSpread2$6.default)({}, _this2.state), {}, {
              action: 'select',
              bounds: bounds
            }));
            _this2._initial = {};
            _this2.setState({
              selecting: false
            });
            (0, _helpers$5.notify)(_this2.props.onSelectEnd, [_this2.state]);
          });
        }
      }, {
        key: "_teardownSelectable",
        value: function _teardownSelectable() {
          if (!this._selector) return;
          this._selector.teardown();
          this._selector = null;
        }
      }, {
        key: "_selectSlot",
        value: function _selectSlot(_ref) {
          var endIdx = _ref.endIdx,
            startIdx = _ref.startIdx,
            action = _ref.action,
            bounds = _ref.bounds,
            box = _ref.box;
          if (endIdx !== -1 && startIdx !== -1) this.props.onSelectSlot && this.props.onSelectSlot({
            start: startIdx,
            end: endIdx,
            action: action,
            bounds: bounds,
            box: box,
            resourceId: this.props.resourceId
          });
        }
      }]);
    }(_react$m.default.Component);
    BackgroundCells$1.default = BackgroundCells;

    var EventRow$1 = {};

    var EventRowMixin = {};

    var _interopRequireDefault$x = interopRequireDefaultExports.default;
    Object.defineProperty(EventRowMixin, "__esModule", {
      value: true
    });
    EventRowMixin.default = void 0;
    var _propTypes = _interopRequireDefault$x(require$$4__default.default);
    var _react$l = _interopRequireDefault$x(React__default.default);
    var _EventCell = _interopRequireDefault$x(EventCell$1);
    var _selection$2 = selection;
    /* eslint-disable react/prop-types */
    EventRowMixin.default = {
      propTypes: {
        slotMetrics: _propTypes.default.object.isRequired,
        selected: _propTypes.default.object,
        isAllDay: _propTypes.default.bool,
        accessors: _propTypes.default.object.isRequired,
        localizer: _propTypes.default.object.isRequired,
        components: _propTypes.default.object.isRequired,
        getters: _propTypes.default.object.isRequired,
        onSelect: _propTypes.default.func,
        onDoubleClick: _propTypes.default.func,
        onKeyPress: _propTypes.default.func
      },
      defaultProps: {
        segments: [],
        selected: {}
      },
      renderEvent: function renderEvent(props, event) {
        var selected = props.selected;
          props.isAllDay;
          var accessors = props.accessors,
          getters = props.getters,
          onSelect = props.onSelect,
          onDoubleClick = props.onDoubleClick,
          onKeyPress = props.onKeyPress,
          localizer = props.localizer,
          slotMetrics = props.slotMetrics,
          components = props.components,
          resizable = props.resizable;
        var continuesPrior = slotMetrics.continuesPrior(event);
        var continuesAfter = slotMetrics.continuesAfter(event);
        return /*#__PURE__*/_react$l.default.createElement(_EventCell.default, {
          event: event,
          getters: getters,
          localizer: localizer,
          accessors: accessors,
          components: components,
          onSelect: onSelect,
          onDoubleClick: onDoubleClick,
          onKeyPress: onKeyPress,
          continuesPrior: continuesPrior,
          continuesAfter: continuesAfter,
          slotStart: slotMetrics.first,
          slotEnd: slotMetrics.last,
          selected: (0, _selection$2.isSelected)(event, selected),
          resizable: resizable
        });
      },
      renderSpan: function renderSpan(slots, len, key) {
        var content = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';
        var per = Math.abs(len) / slots * 100 + '%';
        return /*#__PURE__*/_react$l.default.createElement("div", {
          key: key,
          className: "rbc-row-segment"
          // IE10/11 need max-width. flex-basis doesn't respect box-sizing
          ,
          style: {
            WebkitFlexBasis: per,
            flexBasis: per,
            maxWidth: per
          }
        }, content);
      }
    };

    var _interopRequireDefault$w = interopRequireDefaultExports.default;
    Object.defineProperty(EventRow$1, "__esModule", {
      value: true
    });
    EventRow$1.default = void 0;
    var _objectSpread2$5 = _interopRequireDefault$w(objectSpread2Exports);
    var _classCallCheck2$d = _interopRequireDefault$w(classCallCheckExports);
    var _createClass2$d = _interopRequireDefault$w(createClassExports);
    var _callSuper2$c = _interopRequireDefault$w(callSuperExports);
    var _inherits2$c = _interopRequireDefault$w(inheritsExports);
    var _clsx$b = _interopRequireDefault$w(clsxExports);
    var _react$k = _interopRequireDefault$w(React__default.default);
    var _EventRowMixin$1 = _interopRequireDefault$w(EventRowMixin);
    var EventRow = /*#__PURE__*/function (_React$Component) {
      function EventRow() {
        (0, _classCallCheck2$d.default)(this, EventRow);
        return (0, _callSuper2$c.default)(this, EventRow, arguments);
      }
      (0, _inherits2$c.default)(EventRow, _React$Component);
      return (0, _createClass2$d.default)(EventRow, [{
        key: "render",
        value: function render() {
          var _this = this;
          var _this$props = this.props,
            segments = _this$props.segments,
            slots = _this$props.slotMetrics.slots,
            className = _this$props.className;
          var lastEnd = 1;
          return /*#__PURE__*/_react$k.default.createElement("div", {
            className: (0, _clsx$b.default)(className, 'rbc-row')
          }, segments.reduce(function (row, _ref, li) {
            var event = _ref.event,
              left = _ref.left,
              right = _ref.right,
              span = _ref.span;
            var key = '_lvl_' + li;
            var gap = left - lastEnd;
            var content = _EventRowMixin$1.default.renderEvent(_this.props, event);
            if (gap) row.push(_EventRowMixin$1.default.renderSpan(slots, gap, "".concat(key, "_gap")));
            row.push(_EventRowMixin$1.default.renderSpan(slots, span, key, content));
            lastEnd = right + 1;
            return row;
          }, []));
        }
      }]);
    }(_react$k.default.Component);
    EventRow.defaultProps = (0, _objectSpread2$5.default)({}, _EventRowMixin$1.default.defaultProps);
    EventRow$1.default = EventRow;

    var EventEndingRow$1 = {};

    var eventLevels$1 = {};

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */

    function baseFindIndex$1(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    var _baseFindIndex = baseFindIndex$1;

    var Stack$1 = _Stack,
        baseIsEqual$1 = _baseIsEqual;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$1 = 1,
        COMPARE_UNORDERED_FLAG$1 = 2;

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch$1(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack$1;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    var _baseIsMatch = baseIsMatch$1;

    var isObject$4 = isObject_1;

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable$2(value) {
      return value === value && !isObject$4(value);
    }

    var _isStrictComparable = isStrictComparable$2;

    var isStrictComparable$1 = _isStrictComparable,
        keys$3 = keys_1;

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData$1(object) {
      var result = keys$3(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable$1(value)];
      }
      return result;
    }

    var _getMatchData = getMatchData$1;

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */

    function matchesStrictComparable$2(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    var _matchesStrictComparable = matchesStrictComparable$2;

    var baseIsMatch = _baseIsMatch,
        getMatchData = _getMatchData,
        matchesStrictComparable$1 = _matchesStrictComparable;

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches$1(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    var _baseMatches = baseMatches$1;

    var isArray$8 = isArray_1,
        isSymbol$3 = isSymbol_1;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/;

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey$3(value, object) {
      if (isArray$8(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol$3(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    var _isKey = isKey$3;

    var MapCache = _MapCache;

    /** Error message constants. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize$1(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize$1.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize$1.Cache = MapCache;

    var memoize_1 = memoize$1;

    var memoize = memoize_1;

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped$1(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    var _memoizeCapped = memoizeCapped$1;

    var memoizeCapped = _memoizeCapped;

    /** Used to match property names within property paths. */
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath$1 = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    var _stringToPath = stringToPath$1;

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */

    function arrayMap$3(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    var _arrayMap = arrayMap$3;

    var Symbol$3 = _Symbol,
        arrayMap$2 = _arrayMap,
        isArray$7 = isArray_1,
        isSymbol$2 = isSymbol_1;

    /** Used as references for various `Number` constants. */
    var INFINITY$1 = 1 / 0;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : undefined,
        symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString$1(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray$7(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap$2(value, baseToString$1) + '';
      }
      if (isSymbol$2(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
    }

    var _baseToString = baseToString$1;

    var baseToString = _baseToString;

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString$1(value) {
      return value == null ? '' : baseToString(value);
    }

    var toString_1 = toString$1;

    var isArray$6 = isArray_1,
        isKey$2 = _isKey,
        stringToPath = _stringToPath,
        toString = toString_1;

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath$4(value, object) {
      if (isArray$6(value)) {
        return value;
      }
      return isKey$2(value, object) ? [value] : stringToPath(toString(value));
    }

    var _castPath = castPath$4;

    var isSymbol$1 = isSymbol_1;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey$5(value) {
      if (typeof value == 'string' || isSymbol$1(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    var _toKey = toKey$5;

    var castPath$3 = _castPath,
        toKey$4 = _toKey;

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet$4(object, path) {
      path = castPath$3(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey$4(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    var _baseGet = baseGet$4;

    var baseGet$3 = _baseGet;

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get$1(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet$3(object, path);
      return result === undefined ? defaultValue : result;
    }

    var get_1 = get$1;

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */

    function baseHasIn$1(object, key) {
      return object != null && key in Object(object);
    }

    var _baseHasIn = baseHasIn$1;

    var castPath$2 = _castPath,
        isArguments$1 = isArguments_1,
        isArray$5 = isArray_1,
        isIndex = _isIndex,
        isLength = isLength_1,
        toKey$3 = _toKey;

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath$1(object, path, hasFunc) {
      path = castPath$2(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey$3(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray$5(object) || isArguments$1(object));
    }

    var _hasPath = hasPath$1;

    var baseHasIn = _baseHasIn,
        hasPath = _hasPath;

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn$1(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    var hasIn_1 = hasIn$1;

    var baseIsEqual = _baseIsEqual,
        get = get_1,
        hasIn = hasIn_1,
        isKey$1 = _isKey,
        isStrictComparable = _isStrictComparable,
        matchesStrictComparable = _matchesStrictComparable,
        toKey$2 = _toKey;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty$1(path, srcValue) {
      if (isKey$1(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey$2(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    var _baseMatchesProperty = baseMatchesProperty$1;

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */

    function identity$4(value) {
      return value;
    }

    var identity_1 = identity$4;

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */

    function baseProperty$1(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    var _baseProperty = baseProperty$1;

    var baseGet$2 = _baseGet;

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep$1(path) {
      return function(object) {
        return baseGet$2(object, path);
      };
    }

    var _basePropertyDeep = basePropertyDeep$1;

    var baseProperty = _baseProperty,
        basePropertyDeep = _basePropertyDeep,
        isKey = _isKey,
        toKey$1 = _toKey;

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property$1(path) {
      return isKey(path) ? baseProperty(toKey$1(path)) : basePropertyDeep(path);
    }

    var property_1 = property$1;

    var baseMatches = _baseMatches,
        baseMatchesProperty = _baseMatchesProperty,
        identity$3 = identity_1,
        isArray$4 = isArray_1,
        property = property_1;

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee$4(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity$3;
      }
      if (typeof value == 'object') {
        return isArray$4(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    var _baseIteratee = baseIteratee$4;

    var baseFindIndex = _baseFindIndex,
        baseIteratee$3 = _baseIteratee,
        toInteger$1 = toInteger_1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$2 = Math.max;

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex$1(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger$1(fromIndex);
      if (index < 0) {
        index = nativeMax$2(length + index, 0);
      }
      return baseFindIndex(array, baseIteratee$3(predicate), index);
    }

    var findIndex_1 = findIndex$1;

    var _interopRequireDefault$v = interopRequireDefaultExports.default;
    Object.defineProperty(eventLevels$1, "__esModule", {
      value: true
    });
    eventLevels$1.endOfRange = endOfRange;
    eventLevels$1.eventLevels = eventLevels;
    eventLevels$1.eventSegments = eventSegments;
    eventLevels$1.inRange = inRange;
    eventLevels$1.segsOverlap = segsOverlap;
    eventLevels$1.sortEvents = sortEvents;
    eventLevels$1.sortWeekEvents = sortWeekEvents;
    var _toConsumableArray2$1 = _interopRequireDefault$v(toConsumableArrayExports);
    var _findIndex = _interopRequireDefault$v(findIndex_1);
    function endOfRange(_ref) {
      var dateRange = _ref.dateRange,
        _ref$unit = _ref.unit,
        unit = _ref$unit === void 0 ? 'day' : _ref$unit,
        localizer = _ref.localizer;
      return {
        first: dateRange[0],
        last: localizer.add(dateRange[dateRange.length - 1], 1, unit)
      };
    }

    // properly calculating segments requires working with dates in
    // the timezone we're working with, so we use the localizer
    function eventSegments(event, range, accessors, localizer) {
      var _endOfRange = endOfRange({
          dateRange: range,
          localizer: localizer
        }),
        first = _endOfRange.first,
        last = _endOfRange.last;
      var slots = localizer.diff(first, last, 'day');
      var start = localizer.max(localizer.startOf(accessors.start(event), 'day'), first);
      var end = localizer.min(localizer.ceil(accessors.end(event), 'day'), last);
      var padding = (0, _findIndex.default)(range, function (x) {
        return localizer.isSameDate(x, start);
      });
      var span = localizer.diff(start, end, 'day');
      span = Math.min(span, slots);
      // The segmentOffset is necessary when adjusting for timezones
      // ahead of the browser timezone
      span = Math.max(span - localizer.segmentOffset, 1);
      return {
        event: event,
        span: span,
        left: padding + 1,
        right: Math.max(padding + span, 1)
      };
    }
    function eventLevels(rowSegments) {
      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
      var i,
        j,
        seg,
        levels = [],
        extra = [];
      for (i = 0; i < rowSegments.length; i++) {
        seg = rowSegments[i];
        for (j = 0; j < levels.length; j++) if (!segsOverlap(seg, levels[j])) break;
        if (j >= limit) {
          extra.push(seg);
        } else {
          (levels[j] || (levels[j] = [])).push(seg);
        }
      }
      for (i = 0; i < levels.length; i++) {
        levels[i].sort(function (a, b) {
          return a.left - b.left;
        }); //eslint-disable-line
      }
      return {
        levels: levels,
        extra: extra
      };
    }
    function inRange(e, start, end, accessors, localizer) {
      var event = {
        start: accessors.start(e),
        end: accessors.end(e)
      };
      var range = {
        start: start,
        end: end
      };
      return localizer.inEventRange({
        event: event,
        range: range
      });
    }
    function segsOverlap(seg, otherSegs) {
      return otherSegs.some(function (otherSeg) {
        return otherSeg.left <= seg.right && otherSeg.right >= seg.left;
      });
    }
    function sortWeekEvents(events, accessors, localizer) {
      var base = (0, _toConsumableArray2$1.default)(events);
      var multiDayEvents = [];
      var standardEvents = [];
      base.forEach(function (event) {
        var startCheck = accessors.start(event);
        var endCheck = accessors.end(event);
        if (localizer.daySpan(startCheck, endCheck) > 1) {
          multiDayEvents.push(event);
        } else {
          standardEvents.push(event);
        }
      });
      var multiSorted = multiDayEvents.sort(function (a, b) {
        return sortEvents(a, b, accessors, localizer);
      });
      var standardSorted = standardEvents.sort(function (a, b) {
        return sortEvents(a, b, accessors, localizer);
      });
      return [].concat((0, _toConsumableArray2$1.default)(multiSorted), (0, _toConsumableArray2$1.default)(standardSorted));
    }
    function sortEvents(eventA, eventB, accessors, localizer) {
      var evtA = {
        start: accessors.start(eventA),
        end: accessors.end(eventA),
        allDay: accessors.allDay(eventA)
      };
      var evtB = {
        start: accessors.start(eventB),
        end: accessors.end(eventB),
        allDay: accessors.allDay(eventB)
      };
      return localizer.sortEvents({
        evtA: evtA,
        evtB: evtB
      });
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeCeil = Math.ceil,
        nativeMax$1 = Math.max;

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange$1(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax$1(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    var _baseRange = baseRange$1;

    var baseRange = _baseRange,
        isIterateeCall$2 = _isIterateeCall,
        toFinite = toFinite_1;

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange$1(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall$2(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    var _createRange = createRange$1;

    var createRange = _createRange;

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    var range_1 = range;

    var _interopRequireDefault$u = interopRequireDefaultExports.default;
    Object.defineProperty(EventEndingRow$1, "__esModule", {
      value: true
    });
    EventEndingRow$1.default = void 0;
    var _objectSpread2$4 = _interopRequireDefault$u(objectSpread2Exports);
    var _classCallCheck2$c = _interopRequireDefault$u(classCallCheckExports);
    var _createClass2$c = _interopRequireDefault$u(createClassExports);
    var _callSuper2$b = _interopRequireDefault$u(callSuperExports);
    var _inherits2$b = _interopRequireDefault$u(inheritsExports);
    var _react$j = _interopRequireDefault$u(React__default.default);
    var _clsx$a = _interopRequireDefault$u(clsxExports);
    var _EventRowMixin = _interopRequireDefault$u(EventRowMixin);
    var _eventLevels$3 = eventLevels$1;
    var _range = _interopRequireDefault$u(range_1);
    var isSegmentInSlot$1 = function isSegmentInSlot(seg, slot) {
      return seg.left <= slot && seg.right >= slot;
    };
    var eventsInSlot = function eventsInSlot(segments, slot) {
      return segments.filter(function (seg) {
        return isSegmentInSlot$1(seg, slot);
      }).map(function (seg) {
        return seg.event;
      });
    };
    var EventEndingRow = /*#__PURE__*/function (_React$Component) {
      function EventEndingRow() {
        (0, _classCallCheck2$c.default)(this, EventEndingRow);
        return (0, _callSuper2$b.default)(this, EventEndingRow, arguments);
      }
      (0, _inherits2$b.default)(EventEndingRow, _React$Component);
      return (0, _createClass2$c.default)(EventEndingRow, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
            segments = _this$props.segments,
            slots = _this$props.slotMetrics.slots;
          var rowSegments = (0, _eventLevels$3.eventLevels)(segments).levels[0];
          var current = 1,
            lastEnd = 1,
            row = [];
          while (current <= slots) {
            var key = '_lvl_' + current;
            var _ref = rowSegments.filter(function (seg) {
                return isSegmentInSlot$1(seg, current);
              })[0] || {},
              event = _ref.event,
              left = _ref.left,
              right = _ref.right,
              span = _ref.span; //eslint-disable-line

            if (!event) {
              current++;
              continue;
            }
            var gap = Math.max(0, left - lastEnd);
            if (this.canRenderSlotEvent(left, span)) {
              var content = _EventRowMixin.default.renderEvent(this.props, event);
              if (gap) {
                row.push(_EventRowMixin.default.renderSpan(slots, gap, key + '_gap'));
              }
              row.push(_EventRowMixin.default.renderSpan(slots, span, key, content));
              lastEnd = current = right + 1;
            } else {
              if (gap) {
                row.push(_EventRowMixin.default.renderSpan(slots, gap, key + '_gap'));
              }
              row.push(_EventRowMixin.default.renderSpan(slots, 1, key, this.renderShowMore(segments, current)));
              lastEnd = current = current + 1;
            }
          }
          return /*#__PURE__*/_react$j.default.createElement("div", {
            className: "rbc-row"
          }, row);
        }
      }, {
        key: "canRenderSlotEvent",
        value: function canRenderSlotEvent(slot, span) {
          var segments = this.props.segments;
          return (0, _range.default)(slot, slot + span).every(function (s) {
            var count = eventsInSlot(segments, s).length;
            return count === 1;
          });
        }
      }, {
        key: "renderShowMore",
        value: function renderShowMore(segments, slot) {
          var _this = this;
          var _this$props2 = this.props,
            localizer = _this$props2.localizer,
            slotMetrics = _this$props2.slotMetrics,
            components = _this$props2.components;
          var events = slotMetrics.getEventsForSlot(slot);
          var remainingEvents = eventsInSlot(segments, slot);
          var count = remainingEvents.length;
          if (components !== null && components !== void 0 && components.showMore) {
            var ShowMore = components.showMore;
            // The received slot seems to be 1-based, but the range we use to pull the date is 0-based
            var slotDate = slotMetrics.getDateForSlot(slot - 1);
            return count ? /*#__PURE__*/_react$j.default.createElement(ShowMore, {
              localizer: localizer,
              slotDate: slotDate,
              slot: slot,
              count: count,
              events: events,
              remainingEvents: remainingEvents
            }) : false;
          }
          return count ? /*#__PURE__*/_react$j.default.createElement("button", {
            type: "button",
            key: 'sm_' + slot,
            className: (0, _clsx$a.default)('rbc-button-link', 'rbc-show-more'),
            onClick: function onClick(e) {
              return _this.showMore(slot, e);
            }
          }, localizer.messages.showMore(count, remainingEvents, events)) : false;
        }
      }, {
        key: "showMore",
        value: function showMore(slot, e) {
          e.preventDefault();
          e.stopPropagation();
          this.props.onShowMore(slot, e.target);
        }
      }]);
    }(_react$j.default.Component);
    EventEndingRow.defaultProps = (0, _objectSpread2$4.default)({}, _EventRowMixin.default.defaultProps);
    EventEndingRow$1.default = EventEndingRow;

    var ScrollableWeekWrapper$1 = {};

    var _interopRequireDefault$t = interopRequireDefaultExports.default;
    Object.defineProperty(ScrollableWeekWrapper$1, "__esModule", {
      value: true
    });
    ScrollableWeekWrapper$1.default = void 0;
    var _react$i = _interopRequireDefault$t(React__default.default);
    var ScrollableWeekWrapper = function ScrollableWeekWrapper(_ref) {
      var children = _ref.children;
      return /*#__PURE__*/_react$i.default.createElement("div", {
        className: "rbc-row-content-scroll-container"
      }, children);
    };
    ScrollableWeekWrapper$1.default = ScrollableWeekWrapper;

    var DateSlotMetrics$1 = {};

    var safeIsNaN = Number.isNaN ||
        function ponyfill(value) {
            return typeof value === 'number' && value !== value;
        };
    function isEqual$1(first, second) {
        if (first === second) {
            return true;
        }
        if (safeIsNaN(first) && safeIsNaN(second)) {
            return true;
        }
        return false;
    }
    function areInputsEqual(newInputs, lastInputs) {
        if (newInputs.length !== lastInputs.length) {
            return false;
        }
        for (var i = 0; i < newInputs.length; i++) {
            if (!isEqual$1(newInputs[i], lastInputs[i])) {
                return false;
            }
        }
        return true;
    }

    function memoizeOne(resultFn, isEqual) {
        if (isEqual === void 0) { isEqual = areInputsEqual; }
        var cache = null;
        function memoized() {
            var newArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newArgs[_i] = arguments[_i];
            }
            if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {
                return cache.lastResult;
            }
            var lastResult = resultFn.apply(this, newArgs);
            cache = {
                lastResult: lastResult,
                lastArgs: newArgs,
                lastThis: this,
            };
            return lastResult;
        }
        memoized.clear = function clear() {
            cache = null;
        };
        return memoized;
    }

    var memoizeOne_cjs = memoizeOne;

    var _interopRequireDefault$s = interopRequireDefaultExports.default;
    Object.defineProperty(DateSlotMetrics$1, "__esModule", {
      value: true
    });
    DateSlotMetrics$1.getSlotMetrics = getSlotMetrics$1;
    var _objectSpread2$3 = _interopRequireDefault$s(objectSpread2Exports);
    var _memoizeOne$1 = _interopRequireDefault$s(memoizeOne_cjs);
    var _eventLevels2 = eventLevels$1;
    var isSegmentInSlot = function isSegmentInSlot(seg, slot) {
      return seg.left <= slot && seg.right >= slot;
    };
    var isEqual = function isEqual(a, b) {
      return a[0].range === b[0].range && a[0].events === b[0].events;
    };
    function getSlotMetrics$1() {
      return (0, _memoizeOne$1.default)(function (options) {
        var range = options.range,
          events = options.events,
          maxRows = options.maxRows,
          minRows = options.minRows,
          accessors = options.accessors,
          localizer = options.localizer;
        var _endOfRange = (0, _eventLevels2.endOfRange)({
            dateRange: range,
            localizer: localizer
          }),
          first = _endOfRange.first,
          last = _endOfRange.last;
        var segments = events.map(function (evt) {
          return (0, _eventLevels2.eventSegments)(evt, range, accessors, localizer);
        });
        var _eventLevels = (0, _eventLevels2.eventLevels)(segments, Math.max(maxRows - 1, 1)),
          levels = _eventLevels.levels,
          extra = _eventLevels.extra;
        // Subtract 1 from minRows to not include showMore button row when
        // it would be rendered
        var minEventRows = extra.length > 0 ? minRows - 1 : minRows;
        while (levels.length < minEventRows) levels.push([]);
        return {
          first: first,
          last: last,
          levels: levels,
          extra: extra,
          range: range,
          slots: range.length,
          clone: function clone(args) {
            var metrics = getSlotMetrics$1();
            return metrics((0, _objectSpread2$3.default)((0, _objectSpread2$3.default)({}, options), args));
          },
          getDateForSlot: function getDateForSlot(slotNumber) {
            return range[slotNumber];
          },
          getSlotForDate: function getSlotForDate(date) {
            return range.find(function (r) {
              return localizer.isSameDate(r, date);
            });
          },
          getEventsForSlot: function getEventsForSlot(slot) {
            return segments.filter(function (seg) {
              return isSegmentInSlot(seg, slot);
            }).map(function (seg) {
              return seg.event;
            });
          },
          continuesPrior: function continuesPrior(event) {
            return localizer.continuesPrior(accessors.start(event), first);
          },
          continuesAfter: function continuesAfter(event) {
            var start = accessors.start(event);
            var end = accessors.end(event);
            return localizer.continuesAfter(start, end, last);
          }
        };
      }, isEqual);
    }

    var _interopRequireWildcard$9 = interopRequireWildcardExports.default;
    var _interopRequireDefault$r = interopRequireDefaultExports.default;
    Object.defineProperty(DateContentRow$1, "__esModule", {
      value: true
    });
    DateContentRow$1.default = void 0;
    var _classCallCheck2$b = _interopRequireDefault$r(classCallCheckExports);
    var _createClass2$b = _interopRequireDefault$r(createClassExports);
    var _callSuper2$a = _interopRequireDefault$r(callSuperExports);
    var _inherits2$a = _interopRequireDefault$r(inheritsExports);
    var _react$h = _interopRequireWildcard$9(React__default.default);
    var _clsx$9 = _interopRequireDefault$r(clsxExports);
    var _height = _interopRequireDefault$r(heightExports);
    var _querySelectorAll = _interopRequireDefault$r(querySelectorAllExports);
    var _BackgroundCells = _interopRequireDefault$r(BackgroundCells$1);
    var _EventRow = _interopRequireDefault$r(EventRow$1);
    var _EventEndingRow = _interopRequireDefault$r(EventEndingRow$1);
    var _NoopWrapper$1 = _interopRequireDefault$r(NoopWrapper$1);
    var _ScrollableWeekWrapper = _interopRequireDefault$r(ScrollableWeekWrapper$1);
    var DateSlotMetrics = _interopRequireWildcard$9(DateSlotMetrics$1);
    var DateContentRow = /*#__PURE__*/function (_React$Component) {
      function DateContentRow() {
        var _this;
        (0, _classCallCheck2$b.default)(this, DateContentRow);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = (0, _callSuper2$a.default)(this, DateContentRow, [].concat(args));
        _this.handleSelectSlot = function (slot) {
          var _this$props = _this.props,
            range = _this$props.range,
            onSelectSlot = _this$props.onSelectSlot;
          onSelectSlot(range.slice(slot.start, slot.end + 1), slot);
        };
        _this.handleShowMore = function (slot, target) {
          var _this$props2 = _this.props,
            range = _this$props2.range,
            onShowMore = _this$props2.onShowMore;
          var metrics = _this.slotMetrics(_this.props);
          var row = (0, _querySelectorAll.default)(_this.containerRef.current, '.rbc-row-bg')[0];
          var cell;
          if (row) cell = row.children[slot - 1];
          var events = metrics.getEventsForSlot(slot);
          onShowMore(events, range[slot - 1], cell, slot, target);
        };
        _this.getContainer = function () {
          var container = _this.props.container;
          return container ? container() : _this.containerRef.current;
        };
        _this.renderHeadingCell = function (date, index) {
          var _this$props3 = _this.props,
            renderHeader = _this$props3.renderHeader,
            getNow = _this$props3.getNow,
            localizer = _this$props3.localizer;
          return renderHeader({
            date: date,
            key: "header_".concat(index),
            className: (0, _clsx$9.default)('rbc-date-cell', localizer.isSameDate(date, getNow()) && 'rbc-now')
          });
        };
        _this.renderDummy = function () {
          var _this$props4 = _this.props,
            className = _this$props4.className,
            range = _this$props4.range,
            renderHeader = _this$props4.renderHeader,
            showAllEvents = _this$props4.showAllEvents;
          return /*#__PURE__*/_react$h.default.createElement("div", {
            className: className,
            ref: _this.containerRef
          }, /*#__PURE__*/_react$h.default.createElement("div", {
            className: (0, _clsx$9.default)('rbc-row-content', showAllEvents && 'rbc-row-content-scrollable')
          }, renderHeader && /*#__PURE__*/_react$h.default.createElement("div", {
            className: "rbc-row",
            ref: _this.headingRowRef
          }, range.map(_this.renderHeadingCell)), /*#__PURE__*/_react$h.default.createElement("div", {
            className: "rbc-row",
            ref: _this.eventRowRef
          }, /*#__PURE__*/_react$h.default.createElement("div", {
            className: "rbc-row-segment"
          }, /*#__PURE__*/_react$h.default.createElement("div", {
            className: "rbc-event"
          }, /*#__PURE__*/_react$h.default.createElement("div", {
            className: "rbc-event-content"
          }, "\xA0"))))));
        };
        _this.containerRef = /*#__PURE__*/(0, _react$h.createRef)();
        _this.headingRowRef = /*#__PURE__*/(0, _react$h.createRef)();
        _this.eventRowRef = /*#__PURE__*/(0, _react$h.createRef)();
        _this.slotMetrics = DateSlotMetrics.getSlotMetrics();
        return _this;
      }
      (0, _inherits2$a.default)(DateContentRow, _React$Component);
      return (0, _createClass2$b.default)(DateContentRow, [{
        key: "getRowLimit",
        value: function getRowLimit() {
          var _this$headingRowRef;
          /* Guessing this only gets called on the dummyRow */
          var eventHeight = (0, _height.default)(this.eventRowRef.current);
          var headingHeight = (_this$headingRowRef = this.headingRowRef) !== null && _this$headingRowRef !== void 0 && _this$headingRowRef.current ? (0, _height.default)(this.headingRowRef.current) : 0;
          var eventSpace = (0, _height.default)(this.containerRef.current) - headingHeight;
          return Math.max(Math.floor(eventSpace / eventHeight), 1);
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props5 = this.props,
            date = _this$props5.date,
            rtl = _this$props5.rtl,
            range = _this$props5.range,
            className = _this$props5.className,
            selected = _this$props5.selected,
            selectable = _this$props5.selectable,
            renderForMeasure = _this$props5.renderForMeasure,
            accessors = _this$props5.accessors,
            getters = _this$props5.getters,
            components = _this$props5.components,
            getNow = _this$props5.getNow,
            renderHeader = _this$props5.renderHeader,
            onSelect = _this$props5.onSelect,
            localizer = _this$props5.localizer,
            onSelectStart = _this$props5.onSelectStart,
            onSelectEnd = _this$props5.onSelectEnd,
            onDoubleClick = _this$props5.onDoubleClick,
            onKeyPress = _this$props5.onKeyPress,
            resourceId = _this$props5.resourceId,
            longPressThreshold = _this$props5.longPressThreshold,
            isAllDay = _this$props5.isAllDay,
            resizable = _this$props5.resizable,
            showAllEvents = _this$props5.showAllEvents;
          if (renderForMeasure) return this.renderDummy();
          var metrics = this.slotMetrics(this.props);
          var levels = metrics.levels,
            extra = metrics.extra;
          var ScrollableWeekComponent = showAllEvents ? _ScrollableWeekWrapper.default : _NoopWrapper$1.default;
          var WeekWrapper = components.weekWrapper;
          var eventRowProps = {
            selected: selected,
            accessors: accessors,
            getters: getters,
            localizer: localizer,
            components: components,
            onSelect: onSelect,
            onDoubleClick: onDoubleClick,
            onKeyPress: onKeyPress,
            resourceId: resourceId,
            slotMetrics: metrics,
            resizable: resizable
          };
          return /*#__PURE__*/_react$h.default.createElement("div", {
            className: className,
            role: "rowgroup",
            ref: this.containerRef
          }, /*#__PURE__*/_react$h.default.createElement(_BackgroundCells.default, {
            localizer: localizer,
            date: date,
            getNow: getNow,
            rtl: rtl,
            range: range,
            selectable: selectable,
            container: this.getContainer,
            getters: getters,
            onSelectStart: onSelectStart,
            onSelectEnd: onSelectEnd,
            onSelectSlot: this.handleSelectSlot,
            components: components,
            longPressThreshold: longPressThreshold,
            resourceId: resourceId
          }), /*#__PURE__*/_react$h.default.createElement("div", {
            className: (0, _clsx$9.default)('rbc-row-content', showAllEvents && 'rbc-row-content-scrollable'),
            role: "row"
          }, renderHeader && /*#__PURE__*/_react$h.default.createElement("div", {
            className: "rbc-row ",
            ref: this.headingRowRef
          }, range.map(this.renderHeadingCell)), /*#__PURE__*/_react$h.default.createElement(ScrollableWeekComponent, null, /*#__PURE__*/_react$h.default.createElement(WeekWrapper, Object.assign({
            isAllDay: isAllDay
          }, eventRowProps, {
            rtl: this.props.rtl
          }), levels.map(function (segs, idx) {
            return /*#__PURE__*/_react$h.default.createElement(_EventRow.default, Object.assign({
              key: idx,
              segments: segs
            }, eventRowProps));
          }), !!extra.length && /*#__PURE__*/_react$h.default.createElement(_EventEndingRow.default, Object.assign({
            segments: extra,
            onShowMore: this.handleShowMore
          }, eventRowProps))))));
        }
      }]);
    }(_react$h.default.Component);
    DateContentRow.defaultProps = {
      minRows: 0,
      maxRows: Infinity
    };
    DateContentRow$1.default = DateContentRow;

    var Header$1 = {};

    var _interopRequireDefault$q = interopRequireDefaultExports.default;
    Object.defineProperty(Header$1, "__esModule", {
      value: true
    });
    Header$1.default = void 0;
    var _react$g = _interopRequireDefault$q(React__default.default);
    var Header = function Header(_ref) {
      var label = _ref.label;
      return /*#__PURE__*/_react$g.default.createElement("span", {
        role: "columnheader",
        "aria-sort": "none"
      }, label);
    };
    Header$1.default = Header;

    var DateHeader$1 = {};

    var _interopRequireDefault$p = interopRequireDefaultExports.default;
    Object.defineProperty(DateHeader$1, "__esModule", {
      value: true
    });
    DateHeader$1.default = void 0;
    var _react$f = _interopRequireDefault$p(React__default.default);
    var DateHeader = function DateHeader(_ref) {
      var label = _ref.label,
        drilldownView = _ref.drilldownView,
        onDrillDown = _ref.onDrillDown;
      if (!drilldownView) {
        return /*#__PURE__*/_react$f.default.createElement("span", null, label);
      }
      return /*#__PURE__*/_react$f.default.createElement("button", {
        type: "button",
        className: "rbc-button-link",
        onClick: onDrillDown,
        role: "cell"
      }, label);
    };
    DateHeader$1.default = DateHeader;

    var _interopRequireDefault$o = interopRequireDefaultExports.default;
    var _interopRequireWildcard$8 = interopRequireWildcardExports.default;
    Object.defineProperty(Month, "__esModule", {
      value: true
    });
    Month.default = void 0;
    var _objectWithoutProperties2$6 = _interopRequireDefault$o(objectWithoutPropertiesExports);
    var _toConsumableArray2 = _interopRequireDefault$o(toConsumableArrayExports);
    var _classCallCheck2$a = _interopRequireDefault$o(classCallCheckExports);
    var _createClass2$a = _interopRequireDefault$o(createClassExports);
    var _callSuper2$9 = _interopRequireDefault$o(callSuperExports);
    var _inherits2$9 = _interopRequireDefault$o(inheritsExports);
    var _react$e = _interopRequireWildcard$8(React__default.default);
    var _clsx$8 = _interopRequireDefault$o(clsxExports);
    var _chunk = _interopRequireDefault$o(chunk_1);
    var _constants$8 = constants;
    var _helpers$4 = helpers;
    var _position$1 = _interopRequireDefault$o(positionExports);
    var animationFrame$1 = _interopRequireWildcard$8(animationFrame$2);
    var _PopOverlay$1 = _interopRequireDefault$o(PopOverlay$1);
    var _DateContentRow$1 = _interopRequireDefault$o(DateContentRow$1);
    var _Header$1 = _interopRequireDefault$o(Header$1);
    var _DateHeader = _interopRequireDefault$o(DateHeader$1);
    var _eventLevels$2 = eventLevels$1;
    var _excluded$6 = ["date", "className"];
    /* import Popup from './Popup'
    import Overlay from 'react-overlays/Overlay' */
    var eventsForWeek = function eventsForWeek(evts, start, end, accessors, localizer) {
      return evts.filter(function (e) {
        return (0, _eventLevels$2.inRange)(e, start, end, accessors, localizer);
      });
    };
    var MonthView = /*#__PURE__*/function (_React$Component) {
      function MonthView() {
        var _this;
        (0, _classCallCheck2$a.default)(this, MonthView);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = (0, _callSuper2$9.default)(this, MonthView, [].concat(_args));
        _this.getContainer = function () {
          return _this.containerRef.current;
        };
        _this.renderWeek = function (week, weekIdx) {
          var _this$props = _this.props,
            events = _this$props.events,
            components = _this$props.components,
            selectable = _this$props.selectable,
            getNow = _this$props.getNow,
            selected = _this$props.selected,
            date = _this$props.date,
            localizer = _this$props.localizer,
            longPressThreshold = _this$props.longPressThreshold,
            accessors = _this$props.accessors,
            getters = _this$props.getters,
            showAllEvents = _this$props.showAllEvents;
          var _this$state = _this.state,
            needLimitMeasure = _this$state.needLimitMeasure,
            rowLimit = _this$state.rowLimit;

          // let's not mutate props
          var weeksEvents = eventsForWeek((0, _toConsumableArray2.default)(events), week[0], week[week.length - 1], accessors, localizer);
          var sorted = (0, _eventLevels$2.sortWeekEvents)(weeksEvents, accessors, localizer);
          return /*#__PURE__*/_react$e.default.createElement(_DateContentRow$1.default, {
            key: weekIdx,
            ref: weekIdx === 0 ? _this.slotRowRef : undefined,
            container: _this.getContainer,
            className: "rbc-month-row",
            getNow: getNow,
            date: date,
            range: week,
            events: sorted,
            maxRows: showAllEvents ? Infinity : rowLimit,
            selected: selected,
            selectable: selectable,
            components: components,
            accessors: accessors,
            getters: getters,
            localizer: localizer,
            renderHeader: _this.readerDateHeading,
            renderForMeasure: needLimitMeasure,
            onShowMore: _this.handleShowMore,
            onSelect: _this.handleSelectEvent,
            onDoubleClick: _this.handleDoubleClickEvent,
            onKeyPress: _this.handleKeyPressEvent,
            onSelectSlot: _this.handleSelectSlot,
            longPressThreshold: longPressThreshold,
            rtl: _this.props.rtl,
            resizable: _this.props.resizable,
            showAllEvents: showAllEvents
          });
        };
        _this.readerDateHeading = function (_ref) {
          var date = _ref.date,
            className = _ref.className,
            props = (0, _objectWithoutProperties2$6.default)(_ref, _excluded$6);
          var _this$props2 = _this.props,
            currentDate = _this$props2.date,
            getDrilldownView = _this$props2.getDrilldownView,
            localizer = _this$props2.localizer;
          var isOffRange = localizer.neq(date, currentDate, 'month');
          var isCurrent = localizer.isSameDate(date, currentDate);
          var drilldownView = getDrilldownView(date);
          var label = localizer.format(date, 'dateFormat');
          var DateHeaderComponent = _this.props.components.dateHeader || _DateHeader.default;
          return /*#__PURE__*/_react$e.default.createElement("div", Object.assign({}, props, {
            className: (0, _clsx$8.default)(className, isOffRange && 'rbc-off-range', isCurrent && 'rbc-current'),
            role: "cell"
          }), /*#__PURE__*/_react$e.default.createElement(DateHeaderComponent, {
            label: label,
            date: date,
            drilldownView: drilldownView,
            isOffRange: isOffRange,
            onDrillDown: function onDrillDown(e) {
              return _this.handleHeadingClick(date, drilldownView, e);
            }
          }));
        };
        _this.handleSelectSlot = function (range, slotInfo) {
          _this._pendingSelection = _this._pendingSelection.concat(range);
          clearTimeout(_this._selectTimer);
          _this._selectTimer = setTimeout(function () {
            return _this.selectDates(slotInfo);
          });
        };
        _this.handleHeadingClick = function (date, view, e) {
          e.preventDefault();
          _this.clearSelection();
          (0, _helpers$4.notify)(_this.props.onDrillDown, [date, view]);
        };
        _this.handleSelectEvent = function () {
          _this.clearSelection();
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          (0, _helpers$4.notify)(_this.props.onSelectEvent, args);
        };
        _this.handleDoubleClickEvent = function () {
          _this.clearSelection();
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          (0, _helpers$4.notify)(_this.props.onDoubleClickEvent, args);
        };
        _this.handleKeyPressEvent = function () {
          _this.clearSelection();
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          (0, _helpers$4.notify)(_this.props.onKeyPressEvent, args);
        };
        _this.handleShowMore = function (events, date, cell, slot, target) {
          var _this$props3 = _this.props,
            popup = _this$props3.popup,
            onDrillDown = _this$props3.onDrillDown,
            onShowMore = _this$props3.onShowMore,
            getDrilldownView = _this$props3.getDrilldownView,
            doShowMoreDrillDown = _this$props3.doShowMoreDrillDown;
          //cancel any pending selections so only the event click goes through.
          _this.clearSelection();
          if (popup) {
            var position = (0, _position$1.default)(cell, _this.containerRef.current);
            _this.setState({
              overlay: {
                date: date,
                events: events,
                position: position,
                target: target
              }
            });
          } else if (doShowMoreDrillDown) {
            (0, _helpers$4.notify)(onDrillDown, [date, getDrilldownView(date) || _constants$8.views.DAY]);
          }
          (0, _helpers$4.notify)(onShowMore, [events, date, slot]);
        };
        _this.overlayDisplay = function () {
          _this.setState({
            overlay: null
          });
        };
        _this.state = {
          rowLimit: 5,
          needLimitMeasure: true,
          date: null
        };
        _this.containerRef = /*#__PURE__*/(0, _react$e.createRef)();
        _this.slotRowRef = /*#__PURE__*/(0, _react$e.createRef)();
        _this._bgRows = [];
        _this._pendingSelection = [];
        return _this;
      }
      (0, _inherits2$9.default)(MonthView, _React$Component);
      return (0, _createClass2$a.default)(MonthView, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;
          var running;
          if (this.state.needLimitMeasure) this.measureRowLimit(this.props);
          window.addEventListener('resize', this._resizeListener = function () {
            if (!running) {
              animationFrame$1.request(function () {
                running = false;
                _this2.setState({
                  needLimitMeasure: true
                }); //eslint-disable-line
              });
            }
          }, false);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          if (this.state.needLimitMeasure) this.measureRowLimit(this.props);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          window.removeEventListener('resize', this._resizeListener, false);
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props4 = this.props,
            date = _this$props4.date,
            localizer = _this$props4.localizer,
            className = _this$props4.className,
            month = localizer.visibleDays(date, localizer),
            weeks = (0, _chunk.default)(month, 7);
          this._weekCount = weeks.length;
          return /*#__PURE__*/_react$e.default.createElement("div", {
            className: (0, _clsx$8.default)('rbc-month-view', className),
            role: "table",
            "aria-label": "Month View",
            ref: this.containerRef
          }, /*#__PURE__*/_react$e.default.createElement("div", {
            className: "rbc-row rbc-month-header",
            role: "row"
          }, this.renderHeaders(weeks[0])), weeks.map(this.renderWeek), this.props.popup && this.renderOverlay());
        }
      }, {
        key: "renderHeaders",
        value: function renderHeaders(row) {
          var _this$props5 = this.props,
            localizer = _this$props5.localizer,
            components = _this$props5.components;
          var first = row[0];
          var last = row[row.length - 1];
          var HeaderComponent = components.header || _Header$1.default;
          return localizer.range(first, last, 'day').map(function (day, idx) {
            return /*#__PURE__*/_react$e.default.createElement("div", {
              key: 'header_' + idx,
              className: "rbc-header"
            }, /*#__PURE__*/_react$e.default.createElement(HeaderComponent, {
              date: day,
              localizer: localizer,
              label: localizer.format(day, 'weekdayFormat')
            }));
          });
        }
      }, {
        key: "renderOverlay",
        value: function renderOverlay() {
          var _this$state$overlay,
            _this$state2,
            _this3 = this;
          var overlay = (_this$state$overlay = (_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : _this$state2.overlay) !== null && _this$state$overlay !== void 0 ? _this$state$overlay : {};
          var _this$props6 = this.props,
            accessors = _this$props6.accessors,
            localizer = _this$props6.localizer,
            components = _this$props6.components,
            getters = _this$props6.getters,
            selected = _this$props6.selected,
            popupOffset = _this$props6.popupOffset,
            handleDragStart = _this$props6.handleDragStart;
          var onHide = function onHide() {
            return _this3.setState({
              overlay: null
            });
          };
          return /*#__PURE__*/_react$e.default.createElement(_PopOverlay$1.default, {
            overlay: overlay,
            accessors: accessors,
            localizer: localizer,
            components: components,
            getters: getters,
            selected: selected,
            popupOffset: popupOffset,
            ref: this.containerRef,
            handleKeyPressEvent: this.handleKeyPressEvent,
            handleSelectEvent: this.handleSelectEvent,
            handleDoubleClickEvent: this.handleDoubleClickEvent,
            handleDragStart: handleDragStart,
            show: !!overlay.position,
            overlayDisplay: this.overlayDisplay,
            onHide: onHide
          });

          /* return (
            <Overlay
              rootClose
              placement="bottom"
              show={!!overlay.position}
              onHide={() => this.setState({ overlay: null })}
              target={() => overlay.target}
            >
              {({ props }) => (
                <Popup
                  {...props}
                  popupOffset={popupOffset}
                  accessors={accessors}
                  getters={getters}
                  selected={selected}
                  components={components}
                  localizer={localizer}
                  position={overlay.position}
                  show={this.overlayDisplay}
                  events={overlay.events}
                  slotStart={overlay.date}
                  slotEnd={overlay.end}
                  onSelect={this.handleSelectEvent}
                  onDoubleClick={this.handleDoubleClickEvent}
                  onKeyPress={this.handleKeyPressEvent}
                  handleDragStart={this.props.handleDragStart}
                />
              )}
            </Overlay>
          ) */
        }
      }, {
        key: "measureRowLimit",
        value: function measureRowLimit() {
          this.setState({
            needLimitMeasure: false,
            rowLimit: this.slotRowRef.current.getRowLimit()
          });
        }
      }, {
        key: "selectDates",
        value: function selectDates(slotInfo) {
          var slots = this._pendingSelection.slice();
          this._pendingSelection = [];
          slots.sort(function (a, b) {
            return +a - +b;
          });
          var start = new Date(slots[0]);
          var end = new Date(slots[slots.length - 1]);
          end.setDate(slots[slots.length - 1].getDate() + 1);
          (0, _helpers$4.notify)(this.props.onSelectSlot, {
            slots: slots,
            start: start,
            end: end,
            action: slotInfo.action,
            bounds: slotInfo.bounds,
            box: slotInfo.box
          });
        }
      }, {
        key: "clearSelection",
        value: function clearSelection() {
          clearTimeout(this._selectTimer);
          this._pendingSelection = [];
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(_ref2, state) {
          var date = _ref2.date,
            localizer = _ref2.localizer;
          return {
            date: date,
            needLimitMeasure: localizer.neq(date, state.date, 'month')
          };
        }
      }]);
    }(_react$e.default.Component);
    MonthView.range = function (date, _ref3) {
      var localizer = _ref3.localizer;
      var start = localizer.firstVisibleDay(date, localizer);
      var end = localizer.lastVisibleDay(date, localizer);
      return {
        start: start,
        end: end
      };
    };
    MonthView.navigate = function (date, action, _ref4) {
      var localizer = _ref4.localizer;
      switch (action) {
        case _constants$8.navigate.PREVIOUS:
          return localizer.add(date, -1, 'month');
        case _constants$8.navigate.NEXT:
          return localizer.add(date, 1, 'month');
        default:
          return date;
      }
    };
    MonthView.title = function (date, _ref5) {
      var localizer = _ref5.localizer;
      return localizer.format(date, 'monthHeaderFormat');
    };
    Month.default = MonthView;

    var Day$1 = {};

    var TimeGrid$1 = {};

    var DayColumn$1 = {};

    var TimeSlots = {};

    Object.defineProperty(TimeSlots, "__esModule", {
      value: true
    });
    TimeSlots.getSlotMetrics = getSlotMetrics;
    var getKey = function getKey(_ref) {
      var min = _ref.min,
        max = _ref.max,
        step = _ref.step,
        slots = _ref.slots,
        localizer = _ref.localizer;
      return "".concat(+localizer.startOf(min, 'minutes')) + "".concat(+localizer.startOf(max, 'minutes')) + "".concat(step, "-").concat(slots);
    };
    function getSlotMetrics(_ref2) {
      var start = _ref2.min,
        end = _ref2.max,
        step = _ref2.step,
        timeslots = _ref2.timeslots,
        localizer = _ref2.localizer;
      var key = getKey({
        start: start,
        end: end,
        step: step,
        timeslots: timeslots,
        localizer: localizer
      });

      // DST differences are handled inside the localizer
      var totalMin = 1 + localizer.getTotalMin(start, end);
      var minutesFromMidnight = localizer.getMinutesFromMidnight(start);
      var numGroups = Math.ceil((totalMin - 1) / (step * timeslots));
      var numSlots = numGroups * timeslots;
      var groups = new Array(numGroups);
      var slots = new Array(numSlots);
      // Each slot date is created from "zero", instead of adding `step` to
      // the previous one, in order to avoid DST oddities
      for (var grp = 0; grp < numGroups; grp++) {
        groups[grp] = new Array(timeslots);
        for (var slot = 0; slot < timeslots; slot++) {
          var slotIdx = grp * timeslots + slot;
          var minFromStart = slotIdx * step;
          // A date with total minutes calculated from the start of the day
          slots[slotIdx] = groups[grp][slot] = localizer.getSlotDate(start, minutesFromMidnight, minFromStart);
        }
      }

      // Necessary to be able to select up until the last timeslot in a day
      var lastSlotMinFromStart = slots.length * step;
      slots.push(localizer.getSlotDate(start, minutesFromMidnight, lastSlotMinFromStart));
      function positionFromDate(date) {
        var diff = localizer.diff(start, date, 'minutes') + localizer.getDstOffset(start, date);
        return Math.min(diff, totalMin);
      }
      return {
        groups: groups,
        update: function update(args) {
          if (getKey(args) !== key) return getSlotMetrics(args);
          return this;
        },
        dateIsInGroup: function dateIsInGroup(date, groupIndex) {
          var nextGroup = groups[groupIndex + 1];
          return localizer.inRange(date, groups[groupIndex][0], nextGroup ? nextGroup[0] : end, 'minutes');
        },
        nextSlot: function nextSlot(slot) {
          // We cannot guarantee that the slot object must be in slots,
          // because after each update, a new slots array will be created.
          var next = slots[Math.min(slots.findIndex(function (s) {
            return s === slot || localizer.eq(s, slot);
          }) + 1, slots.length - 1)];
          // in the case of the last slot we won't a long enough range so manually get it
          if (localizer.eq(next, slot)) next = localizer.add(slot, step, 'minutes');
          return next;
        },
        closestSlotToPosition: function closestSlotToPosition(percent) {
          var slot = Math.min(slots.length - 1, Math.max(0, Math.floor(percent * numSlots)));
          return slots[slot];
        },
        closestSlotFromPoint: function closestSlotFromPoint(point, boundaryRect) {
          var range = Math.abs(boundaryRect.top - boundaryRect.bottom);
          return this.closestSlotToPosition((point.y - boundaryRect.top) / range);
        },
        closestSlotFromDate: function closestSlotFromDate(date) {
          var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          if (localizer.lt(date, start, 'minutes')) return slots[0];
          if (localizer.gt(date, end, 'minutes')) return slots[slots.length - 1];
          var diffMins = localizer.diff(start, date, 'minutes');
          return slots[(diffMins - diffMins % step) / step + offset];
        },
        startsBeforeDay: function startsBeforeDay(date) {
          return localizer.lt(date, start, 'day');
        },
        startsAfterDay: function startsAfterDay(date) {
          return localizer.gt(date, end, 'day');
        },
        startsBefore: function startsBefore(date) {
          return localizer.lt(localizer.merge(start, date), start, 'minutes');
        },
        startsAfter: function startsAfter(date) {
          return localizer.gt(localizer.merge(end, date), end, 'minutes');
        },
        getRange: function getRange(rangeStart, rangeEnd, ignoreMin, ignoreMax) {
          if (!ignoreMin) rangeStart = localizer.min(end, localizer.max(start, rangeStart));
          if (!ignoreMax) rangeEnd = localizer.min(end, localizer.max(start, rangeEnd));
          var rangeStartMin = positionFromDate(rangeStart);
          var rangeEndMin = positionFromDate(rangeEnd);
          var top = rangeEndMin > step * numSlots && !localizer.eq(end, rangeEnd) ? (rangeStartMin - step) / (step * numSlots) * 100 : rangeStartMin / (step * numSlots) * 100;
          return {
            top: top,
            height: rangeEndMin / (step * numSlots) * 100 - top,
            start: positionFromDate(rangeStart),
            startDate: rangeStart,
            end: positionFromDate(rangeEnd),
            endDate: rangeEnd
          };
        },
        getCurrentTimePosition: function getCurrentTimePosition(rangeStart) {
          var rangeStartMin = positionFromDate(rangeStart);
          var top = rangeStartMin / (step * numSlots) * 100;
          return top;
        }
      };
    }

    var DayEventLayout$1 = {};

    var overlap = {};

    var Symbol$2 = _Symbol,
        isArguments = isArguments_1,
        isArray$3 = isArray_1;

    /** Built-in value references. */
    var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined;

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable$1(value) {
      return isArray$3(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    var _isFlattenable = isFlattenable$1;

    var arrayPush$1 = _arrayPush,
        isFlattenable = _isFlattenable;

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten$2(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten$2(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush$1(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    var _baseFlatten = baseFlatten$2;

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */

    function createBaseFor$1(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    var _createBaseFor = createBaseFor$1;

    var createBaseFor = _createBaseFor;

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor$1 = createBaseFor();

    var _baseFor = baseFor$1;

    var baseFor = _baseFor,
        keys$2 = keys_1;

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn$3(object, iteratee) {
      return object && baseFor(object, iteratee, keys$2);
    }

    var _baseForOwn = baseForOwn$3;

    var isArrayLike$2 = isArrayLike_1;

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach$1(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike$2(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    var _createBaseEach = createBaseEach$1;

    var baseForOwn$2 = _baseForOwn,
        createBaseEach = _createBaseEach;

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach$1 = createBaseEach(baseForOwn$2);

    var _baseEach = baseEach$1;

    var baseEach = _baseEach,
        isArrayLike$1 = isArrayLike_1;

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap$1(collection, iteratee) {
      var index = -1,
          result = isArrayLike$1(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    var _baseMap = baseMap$1;

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */

    function baseSortBy$1(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    var _baseSortBy = baseSortBy$1;

    var isSymbol = isSymbol_1;

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending$1(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    var _compareAscending = compareAscending$1;

    var compareAscending = _compareAscending;

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple$1(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    var _compareMultiple = compareMultiple$1;

    var arrayMap$1 = _arrayMap,
        baseGet$1 = _baseGet,
        baseIteratee$2 = _baseIteratee,
        baseMap = _baseMap,
        baseSortBy = _baseSortBy,
        baseUnary$2 = _baseUnary,
        compareMultiple = _compareMultiple,
        identity$2 = identity_1,
        isArray$2 = isArray_1;

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy$1(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap$1(iteratees, function(iteratee) {
          if (isArray$2(iteratee)) {
            return function(value) {
              return baseGet$1(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity$2];
      }

      var index = -1;
      iteratees = arrayMap$1(iteratees, baseUnary$2(baseIteratee$2));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap$1(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    var _baseOrderBy = baseOrderBy$1;

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */

    function apply$1(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    var _apply = apply$1;

    var apply = _apply;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max;

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest$2(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    var _overRest = overRest$2;

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */

    function constant$1(value) {
      return function() {
        return value;
      };
    }

    var constant_1 = constant$1;

    var getNative = _getNative;

    var defineProperty$2 = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    var _defineProperty = defineProperty$2;

    var constant = constant_1,
        defineProperty$1 = _defineProperty,
        identity$1 = identity_1;

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString$1 = !defineProperty$1 ? identity$1 : function(func, string) {
      return defineProperty$1(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    var _baseSetToString = baseSetToString$1;

    /** Used to detect hot functions by number of calls within a span of milliseconds. */

    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeNow = Date.now;

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut$1(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    var _shortOut = shortOut$1;

    var baseSetToString = _baseSetToString,
        shortOut = _shortOut;

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString$2 = shortOut(baseSetToString);

    var _setToString = setToString$2;

    var identity = identity_1,
        overRest$1 = _overRest,
        setToString$1 = _setToString;

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest$2(func, start) {
      return setToString$1(overRest$1(func, start, identity), func + '');
    }

    var _baseRest = baseRest$2;

    var baseFlatten$1 = _baseFlatten,
        baseOrderBy = _baseOrderBy,
        baseRest$1 = _baseRest,
        isIterateeCall$1 = _isIterateeCall;

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest$1(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall$1(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall$1(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten$1(iteratees, 1), []);
    });

    var sortBy_1 = sortBy;

    var _interopRequireDefault$n = interopRequireDefaultExports.default;
    Object.defineProperty(overlap, "__esModule", {
      value: true
    });
    overlap.default = getStyledEvents$1;
    var _classCallCheck2$9 = _interopRequireDefault$n(classCallCheckExports);
    var _createClass2$9 = _interopRequireDefault$n(createClassExports);
    var _sortBy = _interopRequireDefault$n(sortBy_1);
    var Event = /*#__PURE__*/function () {
      function Event(data, _ref) {
        var accessors = _ref.accessors,
          slotMetrics = _ref.slotMetrics;
        (0, _classCallCheck2$9.default)(this, Event);
        var _slotMetrics$getRange = slotMetrics.getRange(accessors.start(data), accessors.end(data)),
          start = _slotMetrics$getRange.start,
          startDate = _slotMetrics$getRange.startDate,
          end = _slotMetrics$getRange.end,
          endDate = _slotMetrics$getRange.endDate,
          top = _slotMetrics$getRange.top,
          height = _slotMetrics$getRange.height;
        this.start = start;
        this.end = end;
        this.startMs = +startDate;
        this.endMs = +endDate;
        this.top = top;
        this.height = height;
        this.data = data;
      }

      /**
       * The event's width without any overlap.
       */
      return (0, _createClass2$9.default)(Event, [{
        key: "_width",
        get: function get() {
          // The container event's width is determined by the maximum number of
          // events in any of its rows.
          if (this.rows) {
            var columns = this.rows.reduce(function (max, row) {
              return Math.max(max, row.leaves.length + 1);
            },
            // add itself
            0) + 1; // add the container

            return 100 / columns;
          }

          // The row event's width is the space left by the container, divided
          // among itself and its leaves.
          if (this.leaves) {
            var availableWidth = 100 - this.container._width;
            return availableWidth / (this.leaves.length + 1);
          }

          // The leaf event's width is determined by its row's width
          return this.row._width;
        }

        /**
         * The event's calculated width, possibly with extra width added for
         * overlapping effect.
         */
      }, {
        key: "width",
        get: function get() {
          var noOverlap = this._width;
          var overlap = Math.min(100, this._width * 1.7);

          // Containers can always grow.
          if (this.rows) {
            return overlap;
          }

          // Rows can grow if they have leaves.
          if (this.leaves) {
            return this.leaves.length > 0 ? overlap : noOverlap;
          }

          // Leaves can grow unless they're the last item in a row.
          var leaves = this.row.leaves;
          var index = leaves.indexOf(this);
          return index === leaves.length - 1 ? noOverlap : overlap;
        }
      }, {
        key: "xOffset",
        get: function get() {
          // Containers have no offset.
          if (this.rows) return 0;

          // Rows always start where their container ends.
          if (this.leaves) return this.container._width;

          // Leaves are spread out evenly on the space left by its row.
          var _this$row = this.row,
            leaves = _this$row.leaves,
            xOffset = _this$row.xOffset,
            _width = _this$row._width;
          var index = leaves.indexOf(this) + 1;
          return xOffset + index * _width;
        }
      }]);
    }();
    /**
     * Return true if event a and b is considered to be on the same row.
     */
    function onSameRow(a, b, minimumStartDifference) {
      return (
        // Occupies the same start slot.
        Math.abs(b.start - a.start) < minimumStartDifference ||
        // A's start slot overlaps with b's end slot.
        b.start > a.start && b.start < a.end
      );
    }
    function sortByRender(events) {
      var sortedByTime = (0, _sortBy.default)(events, ['startMs', function (e) {
        return -e.endMs;
      }]);
      var sorted = [];
      while (sortedByTime.length > 0) {
        var event = sortedByTime.shift();
        sorted.push(event);
        for (var i = 0; i < sortedByTime.length; i++) {
          var test = sortedByTime[i];

          // Still inside this event, look for next.
          if (event.endMs > test.startMs) continue;

          // We've found the first event of the next event group.
          // If that event is not right next to our current event, we have to
          // move it here.
          if (i > 0) {
            var _event = sortedByTime.splice(i, 1)[0];
            sorted.push(_event);
          }

          // We've already found the next event group, so stop looking.
          break;
        }
      }
      return sorted;
    }
    function getStyledEvents$1(_ref2) {
      var events = _ref2.events,
        minimumStartDifference = _ref2.minimumStartDifference,
        slotMetrics = _ref2.slotMetrics,
        accessors = _ref2.accessors;
      // Create proxy events and order them so that we don't have
      // to fiddle with z-indexes.
      var proxies = events.map(function (event) {
        return new Event(event, {
          slotMetrics: slotMetrics,
          accessors: accessors
        });
      });
      var eventsInRenderOrder = sortByRender(proxies);

      // Group overlapping events, while keeping order.
      // Every event is always one of: container, row or leaf.
      // Containers can contain rows, and rows can contain leaves.
      var containerEvents = [];
      var _loop = function _loop() {
        var event = eventsInRenderOrder[i];

        // Check if this event can go into a container event.
        var container = containerEvents.find(function (c) {
          return c.end > event.start || Math.abs(event.start - c.start) < minimumStartDifference;
        });

        // Couldn't find a container — that means this event is a container.
        if (!container) {
          event.rows = [];
          containerEvents.push(event);
          return 1; // continue
        }

        // Found a container for the event.
        event.container = container;

        // Check if the event can be placed in an existing row.
        // Start looking from behind.
        var row = null;
        for (var j = container.rows.length - 1; !row && j >= 0; j--) {
          if (onSameRow(container.rows[j], event, minimumStartDifference)) {
            row = container.rows[j];
          }
        }
        if (row) {
          // Found a row, so add it.
          row.leaves.push(event);
          event.row = row;
        } else {
          // Couldn't find a row – that means this event is a row.
          event.leaves = [];
          container.rows.push(event);
        }
      };
      for (var i = 0; i < eventsInRenderOrder.length; i++) {
        if (_loop()) continue;
      }

      // Return the original events, along with their styles.
      return eventsInRenderOrder.map(function (event) {
        return {
          event: event.data,
          style: {
            top: event.top,
            height: event.height,
            width: event.width,
            xOffset: Math.max(0, event.xOffset)
          }
        };
      });
    }

    var noOverlap = {};

    var _interopRequireDefault$m = interopRequireDefaultExports.default;
    Object.defineProperty(noOverlap, "__esModule", {
      value: true
    });
    noOverlap.default = _default$5;
    var _overlap$1 = _interopRequireDefault$m(overlap);
    function getMaxIdxDFS(node, maxIdx, visited) {
      for (var i = 0; i < node.friends.length; ++i) {
        if (visited.indexOf(node.friends[i]) > -1) continue;
        maxIdx = maxIdx > node.friends[i].idx ? maxIdx : node.friends[i].idx;
        // TODO : trace it by not object but kinda index or something for performance
        visited.push(node.friends[i]);
        var newIdx = getMaxIdxDFS(node.friends[i], maxIdx, visited);
        maxIdx = maxIdx > newIdx ? maxIdx : newIdx;
      }
      return maxIdx;
    }
    function _default$5(_ref) {
      var events = _ref.events,
        minimumStartDifference = _ref.minimumStartDifference,
        slotMetrics = _ref.slotMetrics,
        accessors = _ref.accessors;
      var styledEvents = (0, _overlap$1.default)({
        events: events,
        minimumStartDifference: minimumStartDifference,
        slotMetrics: slotMetrics,
        accessors: accessors
      });
      styledEvents.sort(function (a, b) {
        a = a.style;
        b = b.style;
        if (a.top !== b.top) return a.top > b.top ? 1 : -1;else if (a.height !== b.height) return a.top + a.height < b.top + b.height ? 1 : -1;else return 0;
      });
      for (var i = 0; i < styledEvents.length; ++i) {
        styledEvents[i].friends = [];
        delete styledEvents[i].style.left;
        delete styledEvents[i].style.left;
        delete styledEvents[i].idx;
        delete styledEvents[i].size;
      }
      for (var _i2 = 0; _i2 < styledEvents.length - 1; ++_i2) {
        var se1 = styledEvents[_i2];
        var y1 = se1.style.top;
        var y2 = se1.style.top + se1.style.height;
        for (var j = _i2 + 1; j < styledEvents.length; ++j) {
          var se2 = styledEvents[j];
          var y3 = se2.style.top;
          var y4 = se2.style.top + se2.style.height;
          if (y3 >= y1 && y4 <= y2 || y4 > y1 && y4 <= y2 || y3 >= y1 && y3 < y2) {
            // TODO : hashmap would be effective for performance
            se1.friends.push(se2);
            se2.friends.push(se1);
          }
        }
      }
      for (var _i4 = 0; _i4 < styledEvents.length; ++_i4) {
        var se = styledEvents[_i4];
        var bitmap = [];
        for (var _j2 = 0; _j2 < 100; ++_j2) bitmap.push(1); // 1 means available

        for (var _j4 = 0; _j4 < se.friends.length; ++_j4) if (se.friends[_j4].idx !== undefined) bitmap[se.friends[_j4].idx] = 0; // 0 means reserved

        se.idx = bitmap.indexOf(1);
      }
      for (var _i6 = 0; _i6 < styledEvents.length; ++_i6) {
        var size = 0;
        if (styledEvents[_i6].size) continue;
        var allFriends = [];
        var maxIdx = getMaxIdxDFS(styledEvents[_i6], 0, allFriends);
        size = 100 / (maxIdx + 1);
        styledEvents[_i6].size = size;
        for (var _j6 = 0; _j6 < allFriends.length; ++_j6) allFriends[_j6].size = size;
      }
      for (var _i8 = 0; _i8 < styledEvents.length; ++_i8) {
        var e = styledEvents[_i8];
        e.style.left = e.idx * e.size;

        // stretch to maximum
        var _maxIdx = 0;
        for (var _j8 = 0; _j8 < e.friends.length; ++_j8) {
          var idx = e.friends[_j8].idx;
          _maxIdx = _maxIdx > idx ? _maxIdx : idx;
        }
        if (_maxIdx <= e.idx) e.size = 100 - e.idx * e.size;

        // padding between events
        // for this feature, `width` is not percentage based unit anymore
        // it will be used with calc()
        var padding = e.idx === 0 ? 0 : 3;
        e.style.width = "calc(".concat(e.size, "% - ").concat(padding, "px)");
        e.style.height = "calc(".concat(e.style.height, "% - 2px)");
        e.style.xOffset = "calc(".concat(e.style.left, "% + ").concat(padding, "px)");
      }
      return styledEvents;
    }

    var _interopRequireDefault$l = interopRequireDefaultExports.default;
    Object.defineProperty(DayEventLayout$1, "__esModule", {
      value: true
    });
    DayEventLayout$1.getStyledEvents = getStyledEvents;
    var _overlap = _interopRequireDefault$l(overlap);
    var _noOverlap = _interopRequireDefault$l(noOverlap);
    /*eslint no-unused-vars: "off"*/

    var DefaultAlgorithms = {
      overlap: _overlap.default,
      'no-overlap': _noOverlap.default
    };
    function isFunction$1(a) {
      return !!(a && a.constructor && a.call && a.apply);
    }

    //
    function getStyledEvents(_ref) {
      _ref.events;
        _ref.minimumStartDifference;
        _ref.slotMetrics;
        _ref.accessors;
        var dayLayoutAlgorithm = _ref.dayLayoutAlgorithm;
      var algorithm = dayLayoutAlgorithm;
      if (dayLayoutAlgorithm in DefaultAlgorithms) algorithm = DefaultAlgorithms[dayLayoutAlgorithm];
      if (!isFunction$1(algorithm)) {
        // invalid algorithm
        return [];
      }
      return algorithm.apply(this, arguments);
    }

    var TimeSlotGroup = {};

    var _interopRequireWildcard$7 = interopRequireWildcardExports.default;
    var _interopRequireDefault$k = interopRequireDefaultExports.default;
    Object.defineProperty(TimeSlotGroup, "__esModule", {
      value: true
    });
    TimeSlotGroup.default = void 0;
    var _classCallCheck2$8 = _interopRequireDefault$k(classCallCheckExports);
    var _createClass2$8 = _interopRequireDefault$k(createClassExports);
    var _callSuper2$8 = _interopRequireDefault$k(callSuperExports);
    var _inherits2$8 = _interopRequireDefault$k(inheritsExports);
    var _clsx$7 = _interopRequireDefault$k(clsxExports);
    var _react$d = _interopRequireWildcard$7(React__default.default);
    var _BackgroundWrapper = _interopRequireDefault$k(BackgroundWrapper);
    TimeSlotGroup.default = /*#__PURE__*/function (_Component) {
      function TimeSlotGroup() {
        (0, _classCallCheck2$8.default)(this, TimeSlotGroup);
        return (0, _callSuper2$8.default)(this, TimeSlotGroup, arguments);
      }
      (0, _inherits2$8.default)(TimeSlotGroup, _Component);
      return (0, _createClass2$8.default)(TimeSlotGroup, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
            renderSlot = _this$props.renderSlot,
            resource = _this$props.resource,
            group = _this$props.group,
            getters = _this$props.getters,
            _this$props$component = _this$props.components,
            _this$props$component2 = _this$props$component === void 0 ? {} : _this$props$component,
            _this$props$component3 = _this$props$component2.timeSlotWrapper,
            Wrapper = _this$props$component3 === void 0 ? _BackgroundWrapper.default : _this$props$component3;
          var groupProps = getters ? getters.slotGroupProp(group) : {};
          return /*#__PURE__*/_react$d.default.createElement("div", Object.assign({
            className: "rbc-timeslot-group"
          }, groupProps), group.map(function (value, idx) {
            var slotProps = getters ? getters.slotProp(value, resource) : {};
            return /*#__PURE__*/_react$d.default.createElement(Wrapper, {
              key: idx,
              value: value,
              resource: resource
            }, /*#__PURE__*/_react$d.default.createElement("div", Object.assign({}, slotProps, {
              className: (0, _clsx$7.default)('rbc-time-slot', slotProps.className)
            }), renderSlot && renderSlot(value, idx)));
          }));
        }
      }]);
    }(_react$d.Component);

    var TimeGridEvent$1 = {};

    var _interopRequireDefault$j = interopRequireDefaultExports.default;
    Object.defineProperty(TimeGridEvent$1, "__esModule", {
      value: true
    });
    TimeGridEvent$1.default = void 0;
    var _defineProperty2$2 = _interopRequireDefault$j(definePropertyExports);
    var _objectSpread3 = _interopRequireDefault$j(objectSpread2Exports);
    var _clsx$6 = _interopRequireDefault$j(clsxExports);
    var _react$c = _interopRequireDefault$j(React__default.default);
    function stringifyPercent(v) {
      return typeof v === 'string' ? v : v + '%';
    }

    /* eslint-disable react/prop-types */
    function TimeGridEvent(props) {
      var style = props.style,
        className = props.className,
        event = props.event,
        accessors = props.accessors,
        rtl = props.rtl,
        selected = props.selected,
        label = props.label,
        continuesPrior = props.continuesPrior,
        continuesAfter = props.continuesAfter,
        getters = props.getters,
        onClick = props.onClick,
        onDoubleClick = props.onDoubleClick,
        isBackgroundEvent = props.isBackgroundEvent,
        onKeyPress = props.onKeyPress,
        _props$components = props.components,
        Event = _props$components.event,
        EventWrapper = _props$components.eventWrapper;
      var title = accessors.title(event);
      var tooltip = accessors.tooltip(event);
      var end = accessors.end(event);
      var start = accessors.start(event);
      var userProps = getters.eventProp(event, start, end, selected);
      var inner = [/*#__PURE__*/_react$c.default.createElement("div", {
        key: "1",
        className: "rbc-event-label"
      }, label), /*#__PURE__*/_react$c.default.createElement("div", {
        key: "2",
        className: "rbc-event-content"
      }, Event ? /*#__PURE__*/_react$c.default.createElement(Event, {
        event: event,
        title: title
      }) : title)];
      var height = style.height,
        top = style.top,
        width = style.width,
        xOffset = style.xOffset;
      var eventStyle = (0, _objectSpread3.default)((0, _objectSpread3.default)({}, userProps.style), {}, (0, _defineProperty2$2.default)({
        top: stringifyPercent(top),
        height: stringifyPercent(height),
        width: stringifyPercent(width)
      }, rtl ? 'right' : 'left', stringifyPercent(xOffset)));
      return /*#__PURE__*/_react$c.default.createElement(EventWrapper, Object.assign({
        type: "time"
      }, props), /*#__PURE__*/_react$c.default.createElement("div", {
        role: "button",
        tabIndex: 0,
        onClick: onClick,
        onDoubleClick: onDoubleClick,
        style: eventStyle,
        onKeyDown: onKeyPress,
        title: tooltip ? (typeof label === 'string' ? label + ': ' : '') + tooltip : undefined,
        className: (0, _clsx$6.default)(isBackgroundEvent ? 'rbc-background-event' : 'rbc-event', className, userProps.className, {
          'rbc-selected': selected,
          'rbc-event-continues-earlier': continuesPrior,
          'rbc-event-continues-later': continuesAfter
        })
      }, inner));
    }
    TimeGridEvent$1.default = TimeGridEvent;

    var DayColumnWrapper$1 = {};

    var _interopRequireDefault$i = interopRequireDefaultExports.default;
    Object.defineProperty(DayColumnWrapper$1, "__esModule", {
      value: true
    });
    DayColumnWrapper$1.default = void 0;
    var _react$b = _interopRequireDefault$i(React__default.default);
    var DayColumnWrapper = function DayColumnWrapper(_ref) {
      var children = _ref.children,
        className = _ref.className,
        style = _ref.style,
        innerRef = _ref.innerRef;
      return /*#__PURE__*/_react$b.default.createElement("div", {
        className: className,
        style: style,
        ref: innerRef
      }, children);
    };
    DayColumnWrapper$1.default = /*#__PURE__*/_react$b.default.forwardRef(function (props, ref) {
      return /*#__PURE__*/_react$b.default.createElement(DayColumnWrapper, Object.assign({}, props, {
        innerRef: ref
      }));
    });

    var _interopRequireDefault$h = interopRequireDefaultExports.default;
    var _interopRequireWildcard$6 = interopRequireWildcardExports.default;
    Object.defineProperty(DayColumn$1, "__esModule", {
      value: true
    });
    DayColumn$1.default = void 0;
    var _objectWithoutProperties2$5 = _interopRequireDefault$h(objectWithoutPropertiesExports);
    var _objectSpread2$2 = _interopRequireDefault$h(objectSpread2Exports);
    var _classCallCheck2$7 = _interopRequireDefault$h(classCallCheckExports);
    var _createClass2$7 = _interopRequireDefault$h(createClassExports);
    var _callSuper2$7 = _interopRequireDefault$h(callSuperExports);
    var _inherits2$7 = _interopRequireDefault$h(inheritsExports);
    var _react$a = _interopRequireWildcard$6(React__default.default);
    var _clsx$5 = _interopRequireDefault$h(clsxExports);
    var _Selection = _interopRequireWildcard$6(Selection$1);
    var TimeSlotUtils = _interopRequireWildcard$6(TimeSlots);
    var _selection$1 = selection;
    var _helpers$3 = helpers;
    var DayEventLayout = _interopRequireWildcard$6(DayEventLayout$1);
    var _TimeSlotGroup$1 = _interopRequireDefault$h(TimeSlotGroup);
    var _TimeGridEvent = _interopRequireDefault$h(TimeGridEvent$1);
    var _DayColumnWrapper = _interopRequireDefault$h(DayColumnWrapper$1);
    var _excluded$5 = ["dayProp"],
      _excluded2$1 = ["eventContainerWrapper"];
    var DayColumn = /*#__PURE__*/function (_React$Component) {
      function DayColumn() {
        var _this;
        (0, _classCallCheck2$7.default)(this, DayColumn);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = (0, _callSuper2$7.default)(this, DayColumn, [].concat(_args));
        _this.state = {
          selecting: false,
          timeIndicatorPosition: null
        };
        _this.intervalTriggered = false;
        _this.renderEvents = function (_ref) {
          var events = _ref.events,
            isBackgroundEvent = _ref.isBackgroundEvent;
          var _this$props = _this.props,
            rtl = _this$props.rtl,
            selected = _this$props.selected,
            accessors = _this$props.accessors,
            localizer = _this$props.localizer,
            getters = _this$props.getters,
            components = _this$props.components,
            step = _this$props.step,
            timeslots = _this$props.timeslots,
            dayLayoutAlgorithm = _this$props.dayLayoutAlgorithm,
            resizable = _this$props.resizable;
          var _this2 = _this,
            slotMetrics = _this2.slotMetrics;
          var messages = localizer.messages;
          var styledEvents = DayEventLayout.getStyledEvents({
            events: events,
            accessors: accessors,
            slotMetrics: slotMetrics,
            minimumStartDifference: Math.ceil(step * timeslots / 2),
            dayLayoutAlgorithm: dayLayoutAlgorithm
          });
          return styledEvents.map(function (_ref2, idx) {
            var event = _ref2.event,
              style = _ref2.style;
            var end = accessors.end(event);
            var start = accessors.start(event);
            var format = 'eventTimeRangeFormat';
            var label;
            var startsBeforeDay = slotMetrics.startsBeforeDay(start);
            var startsAfterDay = slotMetrics.startsAfterDay(end);
            if (startsBeforeDay) format = 'eventTimeRangeEndFormat';else if (startsAfterDay) format = 'eventTimeRangeStartFormat';
            if (startsBeforeDay && startsAfterDay) label = messages.allDay;else label = localizer.format({
              start: start,
              end: end
            }, format);
            var continuesPrior = startsBeforeDay || slotMetrics.startsBefore(start);
            var continuesAfter = startsAfterDay || slotMetrics.startsAfter(end);
            return /*#__PURE__*/_react$a.default.createElement(_TimeGridEvent.default, {
              style: style,
              event: event,
              label: label,
              key: 'evt_' + idx,
              getters: getters,
              rtl: rtl,
              components: components,
              continuesPrior: continuesPrior,
              continuesAfter: continuesAfter,
              accessors: accessors,
              resource: _this.props.resource,
              selected: (0, _selection$1.isSelected)(event, selected),
              onClick: function onClick(e) {
                return _this._select((0, _objectSpread2$2.default)((0, _objectSpread2$2.default)((0, _objectSpread2$2.default)({}, event), _this.props.resource && {
                  sourceResource: _this.props.resource
                }), isBackgroundEvent && {
                  isBackgroundEvent: true
                }), e);
              },
              onDoubleClick: function onDoubleClick(e) {
                return _this._doubleClick(event, e);
              },
              isBackgroundEvent: isBackgroundEvent,
              onKeyPress: function onKeyPress(e) {
                return _this._keyPress(event, e);
              },
              resizable: resizable
            });
          });
        };
        _this._selectable = function () {
          var node = _this.containerRef.current;
          var _this$props2 = _this.props,
            longPressThreshold = _this$props2.longPressThreshold,
            localizer = _this$props2.localizer;
          var selector = _this._selector = new _Selection.default(function () {
            return node;
          }, {
            longPressThreshold: longPressThreshold
          });
          var maybeSelect = function maybeSelect(box) {
            var onSelecting = _this.props.onSelecting;
            var current = _this.state || {};
            var state = selectionState(box);
            var start = state.startDate,
              end = state.endDate;
            if (onSelecting) {
              if (localizer.eq(current.startDate, start, 'minutes') && localizer.eq(current.endDate, end, 'minutes') || onSelecting({
                start: start,
                end: end,
                resourceId: _this.props.resource
              }) === false) return;
            }
            if (_this.state.start !== state.start || _this.state.end !== state.end || _this.state.selecting !== state.selecting) {
              _this.setState(state);
            }
          };
          var selectionState = function selectionState(point) {
            var currentSlot = _this.slotMetrics.closestSlotFromPoint(point, (0, _Selection.getBoundsForNode)(node));
            if (!_this.state.selecting) {
              _this._initialSlot = currentSlot;
            }
            var initialSlot = _this._initialSlot;
            if (localizer.lte(initialSlot, currentSlot)) {
              currentSlot = _this.slotMetrics.nextSlot(currentSlot);
            } else if (localizer.gt(initialSlot, currentSlot)) {
              initialSlot = _this.slotMetrics.nextSlot(initialSlot);
            }
            var selectRange = _this.slotMetrics.getRange(localizer.min(initialSlot, currentSlot), localizer.max(initialSlot, currentSlot));
            return (0, _objectSpread2$2.default)((0, _objectSpread2$2.default)({}, selectRange), {}, {
              selecting: true,
              top: "".concat(selectRange.top, "%"),
              height: "".concat(selectRange.height, "%")
            });
          };
          var selectorClicksHandler = function selectorClicksHandler(box, actionType) {
            if (!(0, _Selection.isEvent)(_this.containerRef.current, box)) {
              var _selectionState = selectionState(box),
                startDate = _selectionState.startDate,
                endDate = _selectionState.endDate;
              _this._selectSlot({
                startDate: startDate,
                endDate: endDate,
                action: actionType,
                box: box
              });
            }
            _this.setState({
              selecting: false
            });
          };
          selector.on('selecting', maybeSelect);
          selector.on('selectStart', maybeSelect);
          selector.on('beforeSelect', function (box) {
            if (_this.props.selectable !== 'ignoreEvents') return;
            return !(0, _Selection.isEvent)(_this.containerRef.current, box);
          });
          selector.on('click', function (box) {
            return selectorClicksHandler(box, 'click');
          });
          selector.on('doubleClick', function (box) {
            return selectorClicksHandler(box, 'doubleClick');
          });
          selector.on('select', function (bounds) {
            if (_this.state.selecting) {
              _this._selectSlot((0, _objectSpread2$2.default)((0, _objectSpread2$2.default)({}, _this.state), {}, {
                action: 'select',
                bounds: bounds
              }));
              _this.setState({
                selecting: false
              });
            }
          });
          selector.on('reset', function () {
            if (_this.state.selecting) {
              _this.setState({
                selecting: false
              });
            }
          });
        };
        _this._teardownSelectable = function () {
          if (!_this._selector) return;
          _this._selector.teardown();
          _this._selector = null;
        };
        _this._selectSlot = function (_ref3) {
          var startDate = _ref3.startDate,
            endDate = _ref3.endDate,
            action = _ref3.action,
            bounds = _ref3.bounds,
            box = _ref3.box;
          var current = startDate,
            slots = [];
          while (_this.props.localizer.lte(current, endDate)) {
            slots.push(current);
            current = new Date(+current + _this.props.step * 60 * 1000); // using Date ensures not to create an endless loop the day DST begins
          }
          (0, _helpers$3.notify)(_this.props.onSelectSlot, {
            slots: slots,
            start: startDate,
            end: endDate,
            resourceId: _this.props.resource,
            action: action,
            bounds: bounds,
            box: box
          });
        };
        _this._select = function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          (0, _helpers$3.notify)(_this.props.onSelectEvent, args);
        };
        _this._doubleClick = function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          (0, _helpers$3.notify)(_this.props.onDoubleClickEvent, args);
        };
        _this._keyPress = function () {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          (0, _helpers$3.notify)(_this.props.onKeyPressEvent, args);
        };
        _this.slotMetrics = TimeSlotUtils.getSlotMetrics(_this.props);
        _this.containerRef = /*#__PURE__*/(0, _react$a.createRef)();
        return _this;
      }
      (0, _inherits2$7.default)(DayColumn, _React$Component);
      return (0, _createClass2$7.default)(DayColumn, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.selectable && this._selectable();
          if (this.props.isNow) {
            this.setTimeIndicatorPositionUpdateInterval();
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._teardownSelectable();
          this.clearTimeIndicatorInterval();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps, prevState) {
          if (this.props.selectable && !prevProps.selectable) this._selectable();
          if (!this.props.selectable && prevProps.selectable) this._teardownSelectable();
          var _this$props3 = this.props,
            getNow = _this$props3.getNow,
            isNow = _this$props3.isNow,
            localizer = _this$props3.localizer,
            date = _this$props3.date,
            min = _this$props3.min,
            max = _this$props3.max;
          var getNowChanged = localizer.neq(prevProps.getNow(), getNow(), 'minutes');
          if (prevProps.isNow !== isNow || getNowChanged) {
            this.clearTimeIndicatorInterval();
            if (isNow) {
              var tail = !getNowChanged && localizer.eq(prevProps.date, date, 'minutes') && prevState.timeIndicatorPosition === this.state.timeIndicatorPosition;
              this.setTimeIndicatorPositionUpdateInterval(tail);
            }
          } else if (isNow && (localizer.neq(prevProps.min, min, 'minutes') || localizer.neq(prevProps.max, max, 'minutes'))) {
            this.positionTimeIndicator();
          }
        }

        /**
         * @param tail {Boolean} - whether `positionTimeIndicator` call should be
         *   deferred or called upon setting interval (`true` - if deferred);
         */
      }, {
        key: "setTimeIndicatorPositionUpdateInterval",
        value: function setTimeIndicatorPositionUpdateInterval() {
          var _this3 = this;
          var tail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          if (!this.intervalTriggered && !tail) {
            this.positionTimeIndicator();
          }
          this._timeIndicatorTimeout = window.setTimeout(function () {
            _this3.intervalTriggered = true;
            _this3.positionTimeIndicator();
            _this3.setTimeIndicatorPositionUpdateInterval();
          }, 60000);
        }
      }, {
        key: "clearTimeIndicatorInterval",
        value: function clearTimeIndicatorInterval() {
          this.intervalTriggered = false;
          window.clearTimeout(this._timeIndicatorTimeout);
        }
      }, {
        key: "positionTimeIndicator",
        value: function positionTimeIndicator() {
          var _this$props4 = this.props,
            min = _this$props4.min,
            max = _this$props4.max,
            getNow = _this$props4.getNow;
          var current = getNow();
          if (current >= min && current <= max) {
            var top = this.slotMetrics.getCurrentTimePosition(current);
            this.intervalTriggered = true;
            this.setState({
              timeIndicatorPosition: top
            });
          } else {
            this.clearTimeIndicatorInterval();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props5 = this.props,
            date = _this$props5.date,
            max = _this$props5.max,
            rtl = _this$props5.rtl,
            isNow = _this$props5.isNow,
            resource = _this$props5.resource,
            accessors = _this$props5.accessors,
            localizer = _this$props5.localizer,
            _this$props5$getters = _this$props5.getters,
            dayProp = _this$props5$getters.dayProp,
            getters = (0, _objectWithoutProperties2$5.default)(_this$props5$getters, _excluded$5),
            _this$props5$componen = _this$props5.components,
            EventContainer = _this$props5$componen.eventContainerWrapper,
            components = (0, _objectWithoutProperties2$5.default)(_this$props5$componen, _excluded2$1);
          this.slotMetrics = this.slotMetrics.update(this.props);
          var slotMetrics = this.slotMetrics;
          var _this$state = this.state,
            selecting = _this$state.selecting,
            top = _this$state.top,
            height = _this$state.height,
            startDate = _this$state.startDate,
            endDate = _this$state.endDate;
          var selectDates = {
            start: startDate,
            end: endDate
          };
          var _dayProp = dayProp(max, resource),
            className = _dayProp.className,
            style = _dayProp.style;
          var DayColumnWrapperComponent = components.dayColumnWrapper || _DayColumnWrapper.default;
          return /*#__PURE__*/_react$a.default.createElement(DayColumnWrapperComponent, {
            ref: this.containerRef,
            date: date,
            style: style,
            className: (0, _clsx$5.default)(className, 'rbc-day-slot', 'rbc-time-column', isNow && 'rbc-now', isNow && 'rbc-today',
            // WHY
            selecting && 'rbc-slot-selecting'),
            slotMetrics: slotMetrics,
            resource: resource
          }, slotMetrics.groups.map(function (grp, idx) {
            return /*#__PURE__*/_react$a.default.createElement(_TimeSlotGroup$1.default, {
              key: idx,
              group: grp,
              resource: resource,
              getters: getters,
              components: components
            });
          }), /*#__PURE__*/_react$a.default.createElement(EventContainer, {
            localizer: localizer,
            resource: resource,
            accessors: accessors,
            getters: getters,
            components: components,
            slotMetrics: slotMetrics
          }, /*#__PURE__*/_react$a.default.createElement("div", {
            className: (0, _clsx$5.default)('rbc-events-container', rtl && 'rtl')
          }, this.renderEvents({
            events: this.props.backgroundEvents,
            isBackgroundEvent: true
          }), this.renderEvents({
            events: this.props.events
          }))), selecting && /*#__PURE__*/_react$a.default.createElement("div", {
            className: "rbc-slot-selection",
            style: {
              top: top,
              height: height
            }
          }, /*#__PURE__*/_react$a.default.createElement("span", null, localizer.format(selectDates, 'selectRangeFormat'))), isNow && this.intervalTriggered && /*#__PURE__*/_react$a.default.createElement("div", {
            className: "rbc-current-time-indicator",
            style: {
              top: "".concat(this.state.timeIndicatorPosition, "%")
            }
          }));
        }
      }]);
    }(_react$a.default.Component);
    DayColumn.defaultProps = {
      dragThroughEvents: true,
      timeslots: 2
    };
    DayColumn$1.default = DayColumn;

    var TimeGutter$1 = {};

    var _interopRequireWildcard$5 = interopRequireWildcardExports.default;
    var _interopRequireDefault$g = interopRequireDefaultExports.default;
    Object.defineProperty(TimeGutter$1, "__esModule", {
      value: true
    });
    TimeGutter$1.default = void 0;
    var _slicedToArray2$6 = _interopRequireDefault$g(slicedToArrayExports);
    var _react$9 = _interopRequireWildcard$5(React__default.default);
    var _clsx$4 = _interopRequireDefault$g(clsxExports);
    var _TimeSlots = TimeSlots;
    var _TimeSlotGroup = _interopRequireDefault$g(TimeSlotGroup);
    /**
     * Since the TimeGutter only displays the 'times' of slots in a day, and is separate
     * from the Day Columns themselves, we check to see if the range contains an offset difference
     * and, if so, change the beginning and end 'date' by a day to properly display the slots times
     * used.
     */
    function adjustForDST(_ref) {
      var min = _ref.min,
        max = _ref.max,
        localizer = _ref.localizer;
      if (localizer.getTimezoneOffset(min) !== localizer.getTimezoneOffset(max)) {
        return {
          start: localizer.add(min, -1, 'day'),
          end: localizer.add(max, -1, 'day')
        };
      }
      return {
        start: min,
        end: max
      };
    }
    var TimeGutter = function TimeGutter(_ref2) {
      var min = _ref2.min,
        max = _ref2.max,
        timeslots = _ref2.timeslots,
        step = _ref2.step,
        localizer = _ref2.localizer,
        getNow = _ref2.getNow,
        resource = _ref2.resource,
        components = _ref2.components,
        getters = _ref2.getters,
        gutterRef = _ref2.gutterRef;
      var TimeGutterWrapper = components.timeGutterWrapper;
      var _useMemo = (0, _react$9.useMemo)(function () {
          return adjustForDST({
            min: min,
            max: max,
            localizer: localizer
          });
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [min === null || min === void 0 ? void 0 : min.toISOString(), max === null || max === void 0 ? void 0 : max.toISOString(), localizer]),
        start = _useMemo.start,
        end = _useMemo.end;
      var _useState = (0, _react$9.useState)((0, _TimeSlots.getSlotMetrics)({
          min: start,
          max: end,
          timeslots: timeslots,
          step: step,
          localizer: localizer
        })),
        _useState2 = (0, _slicedToArray2$6.default)(_useState, 2),
        slotMetrics = _useState2[0],
        setSlotMetrics = _useState2[1];
      (0, _react$9.useEffect)(function () {
        if (slotMetrics) {
          setSlotMetrics(slotMetrics.update({
            min: start,
            max: end,
            timeslots: timeslots,
            step: step,
            localizer: localizer
          }));
        }
        /**
         * We don't want this to fire when slotMetrics is updated as it would recursively bomb
         */
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, [start === null || start === void 0 ? void 0 : start.toISOString(), end === null || end === void 0 ? void 0 : end.toISOString(), timeslots, step]);
      var renderSlot = (0, _react$9.useCallback)(function (value, idx) {
        if (idx) return null; // don't return the first (0) idx

        var isNow = slotMetrics.dateIsInGroup(getNow(), idx);
        return /*#__PURE__*/_react$9.default.createElement("span", {
          className: (0, _clsx$4.default)('rbc-label', isNow && 'rbc-now')
        }, localizer.format(value, 'timeGutterFormat'));
      }, [slotMetrics, localizer, getNow]);
      return /*#__PURE__*/_react$9.default.createElement(TimeGutterWrapper, {
        slotMetrics: slotMetrics
      }, /*#__PURE__*/_react$9.default.createElement("div", {
        className: "rbc-time-gutter rbc-time-column",
        ref: gutterRef
      }, slotMetrics.groups.map(function (grp, idx) {
        return /*#__PURE__*/_react$9.default.createElement(_TimeSlotGroup.default, {
          key: idx,
          group: grp,
          resource: resource,
          components: components,
          renderSlot: renderSlot,
          getters: getters
        });
      })));
    };
    TimeGutter$1.default = /*#__PURE__*/_react$9.default.forwardRef(function (props, ref) {
      return /*#__PURE__*/_react$9.default.createElement(TimeGutter, Object.assign({
        gutterRef: ref
      }, props));
    });

    var TimeGridHeader$1 = {};

    var ResourceHeader$1 = {};

    var _interopRequireDefault$f = interopRequireDefaultExports.default;
    Object.defineProperty(ResourceHeader$1, "__esModule", {
      value: true
    });
    ResourceHeader$1.default = void 0;
    var _react$8 = _interopRequireDefault$f(React__default.default);
    var ResourceHeader = function ResourceHeader(_ref) {
      var label = _ref.label;
      return /*#__PURE__*/_react$8.default.createElement(_react$8.default.Fragment, null, label);
    };
    ResourceHeader$1.default = ResourceHeader;

    var _interopRequireDefault$e = interopRequireDefaultExports.default;
    Object.defineProperty(TimeGridHeader$1, "__esModule", {
      value: true
    });
    TimeGridHeader$1.default = void 0;
    var _slicedToArray2$5 = _interopRequireDefault$e(slicedToArrayExports);
    var _classCallCheck2$6 = _interopRequireDefault$e(classCallCheckExports);
    var _createClass2$6 = _interopRequireDefault$e(createClassExports);
    var _callSuper2$6 = _interopRequireDefault$e(callSuperExports);
    var _inherits2$6 = _interopRequireDefault$e(inheritsExports);
    var _clsx$3 = _interopRequireDefault$e(clsxExports);
    var _scrollbarSize$1 = _interopRequireDefault$e(scrollbarSizeExports);
    var _react$7 = _interopRequireDefault$e(React__default.default);
    var _DateContentRow = _interopRequireDefault$e(DateContentRow$1);
    var _Header = _interopRequireDefault$e(Header$1);
    var _ResourceHeader = _interopRequireDefault$e(ResourceHeader$1);
    var _helpers$2 = helpers;
    var TimeGridHeader = /*#__PURE__*/function (_React$Component) {
      function TimeGridHeader() {
        var _this;
        (0, _classCallCheck2$6.default)(this, TimeGridHeader);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = (0, _callSuper2$6.default)(this, TimeGridHeader, [].concat(args));
        _this.handleHeaderClick = function (date, view, e) {
          e.preventDefault();
          (0, _helpers$2.notify)(_this.props.onDrillDown, [date, view]);
        };
        _this.renderRow = function (resource) {
          var _this$props = _this.props,
            events = _this$props.events,
            rtl = _this$props.rtl,
            selectable = _this$props.selectable,
            getNow = _this$props.getNow,
            range = _this$props.range,
            getters = _this$props.getters,
            localizer = _this$props.localizer,
            accessors = _this$props.accessors,
            components = _this$props.components,
            resizable = _this$props.resizable;
          var resourceId = accessors.resourceId(resource);
          var eventsToDisplay = resource ? events.filter(function (event) {
            return accessors.resource(event) === resourceId;
          }) : events;
          return /*#__PURE__*/_react$7.default.createElement(_DateContentRow.default, {
            isAllDay: true,
            rtl: rtl,
            getNow: getNow,
            minRows: 2
            // Add +1 to include showMore button row in the row limit
            ,
            maxRows: _this.props.allDayMaxRows + 1,
            range: range,
            events: eventsToDisplay,
            resourceId: resourceId,
            className: "rbc-allday-cell",
            selectable: selectable,
            selected: _this.props.selected,
            components: components,
            accessors: accessors,
            getters: getters,
            localizer: localizer,
            onSelect: _this.props.onSelectEvent,
            onShowMore: _this.props.onShowMore,
            onDoubleClick: _this.props.onDoubleClickEvent,
            onKeyPress: _this.props.onKeyPressEvent,
            onSelectSlot: _this.props.onSelectSlot,
            longPressThreshold: _this.props.longPressThreshold,
            resizable: resizable
          });
        };
        return _this;
      }
      (0, _inherits2$6.default)(TimeGridHeader, _React$Component);
      return (0, _createClass2$6.default)(TimeGridHeader, [{
        key: "renderHeaderCells",
        value: function renderHeaderCells(range) {
          var _this2 = this;
          var _this$props2 = this.props,
            localizer = _this$props2.localizer,
            getDrilldownView = _this$props2.getDrilldownView,
            getNow = _this$props2.getNow,
            dayProp = _this$props2.getters.dayProp,
            _this$props2$componen = _this$props2.components.header,
            HeaderComponent = _this$props2$componen === void 0 ? _Header.default : _this$props2$componen;
          var today = getNow();
          return range.map(function (date, i) {
            var drilldownView = getDrilldownView(date);
            var label = localizer.format(date, 'dayFormat');
            var _dayProp = dayProp(date),
              className = _dayProp.className,
              style = _dayProp.style;
            var header = /*#__PURE__*/_react$7.default.createElement(HeaderComponent, {
              date: date,
              label: label,
              localizer: localizer
            });
            return /*#__PURE__*/_react$7.default.createElement("div", {
              key: i,
              style: style,
              className: (0, _clsx$3.default)('rbc-header', className, localizer.isSameDate(date, today) && 'rbc-today')
            }, drilldownView ? /*#__PURE__*/_react$7.default.createElement("button", {
              type: "button",
              className: "rbc-button-link",
              onClick: function onClick(e) {
                return _this2.handleHeaderClick(date, drilldownView, e);
              }
            }, header) : /*#__PURE__*/_react$7.default.createElement("span", null, header));
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;
          var _this$props3 = this.props,
            width = _this$props3.width,
            rtl = _this$props3.rtl,
            resources = _this$props3.resources,
            range = _this$props3.range,
            events = _this$props3.events,
            getNow = _this$props3.getNow,
            accessors = _this$props3.accessors,
            selectable = _this$props3.selectable,
            components = _this$props3.components,
            getters = _this$props3.getters,
            scrollRef = _this$props3.scrollRef,
            localizer = _this$props3.localizer,
            isOverflowing = _this$props3.isOverflowing,
            _this$props3$componen = _this$props3.components,
            TimeGutterHeader = _this$props3$componen.timeGutterHeader,
            _this$props3$componen2 = _this$props3$componen.resourceHeader,
            ResourceHeaderComponent = _this$props3$componen2 === void 0 ? _ResourceHeader.default : _this$props3$componen2,
            resizable = _this$props3.resizable;
          var style = {};
          if (isOverflowing) {
            style[rtl ? 'marginLeft' : 'marginRight'] = "".concat((0, _scrollbarSize$1.default)() - 1, "px");
          }
          var groupedEvents = resources.groupEvents(events);
          return /*#__PURE__*/_react$7.default.createElement("div", {
            style: style,
            ref: scrollRef,
            className: (0, _clsx$3.default)('rbc-time-header', isOverflowing && 'rbc-overflowing')
          }, /*#__PURE__*/_react$7.default.createElement("div", {
            className: "rbc-label rbc-time-header-gutter",
            style: {
              width: width,
              minWidth: width,
              maxWidth: width
            }
          }, TimeGutterHeader && /*#__PURE__*/_react$7.default.createElement(TimeGutterHeader, null)), resources.map(function (_ref, idx) {
            var _ref2 = (0, _slicedToArray2$5.default)(_ref, 2),
              id = _ref2[0],
              resource = _ref2[1];
            return /*#__PURE__*/_react$7.default.createElement("div", {
              className: "rbc-time-header-content",
              key: id || idx
            }, resource && /*#__PURE__*/_react$7.default.createElement("div", {
              className: "rbc-row rbc-row-resource",
              key: "resource_".concat(idx)
            }, /*#__PURE__*/_react$7.default.createElement("div", {
              className: "rbc-header"
            }, /*#__PURE__*/_react$7.default.createElement(ResourceHeaderComponent, {
              index: idx,
              label: accessors.resourceTitle(resource),
              resource: resource
            }))), /*#__PURE__*/_react$7.default.createElement("div", {
              className: "rbc-row rbc-time-header-cell".concat(range.length <= 1 ? ' rbc-time-header-cell-single-day' : '')
            }, _this3.renderHeaderCells(range)), /*#__PURE__*/_react$7.default.createElement(_DateContentRow.default, {
              isAllDay: true,
              rtl: rtl,
              getNow: getNow,
              minRows: 2
              // Add +1 to include showMore button row in the row limit
              ,
              maxRows: _this3.props.allDayMaxRows + 1,
              range: range,
              events: groupedEvents.get(id) || [],
              resourceId: resource && id,
              className: "rbc-allday-cell",
              selectable: selectable,
              selected: _this3.props.selected,
              components: components,
              accessors: accessors,
              getters: getters,
              localizer: localizer,
              onSelect: _this3.props.onSelectEvent,
              onShowMore: _this3.props.onShowMore,
              onDoubleClick: _this3.props.onDoubleClickEvent,
              onKeyDown: _this3.props.onKeyPressEvent,
              onSelectSlot: _this3.props.onSelectSlot,
              longPressThreshold: _this3.props.longPressThreshold,
              resizable: resizable
            }));
          }));
        }
      }]);
    }(_react$7.default.Component);
    TimeGridHeader$1.default = TimeGridHeader;

    var width = {exports: {}};

    (function (module, exports) {

    	var _interopRequireDefault = interopRequireDefaultExports;

    	exports.__esModule = true;
    	exports.default = getWidth;

    	var _isWindow = _interopRequireDefault(requireIsWindow());

    	var _offset = _interopRequireDefault(requireOffset());

    	/**
    	 * Returns the width of a given element.
    	 * 
    	 * @param node the element
    	 * @param client whether to use `clientWidth` if possible
    	 */
    	function getWidth(node, client) {
    	  var win = (0, _isWindow.default)(node);
    	  return win ? win.innerWidth : client ? node.clientWidth : (0, _offset.default)(node).width;
    	}

    	module.exports = exports["default"]; 
    } (width, width.exports));

    var widthExports = width.exports;

    var Resources$1 = {};

    Object.defineProperty(Resources$1, "__esModule", {
      value: true
    });
    Resources$1.NONE = void 0;
    Resources$1.default = Resources;
    var NONE = Resources$1.NONE = {};
    function Resources(resources, accessors) {
      return {
        map: function map(fn) {
          if (!resources) return [fn([NONE, null], 0)];
          return resources.map(function (resource, idx) {
            return fn([accessors.resourceId(resource), resource], idx);
          });
        },
        groupEvents: function groupEvents(events) {
          var eventsByResource = new Map();
          if (!resources) {
            // Return all events if resources are not provided
            eventsByResource.set(NONE, events);
            return eventsByResource;
          }
          events.forEach(function (event) {
            var id = accessors.resource(event) || NONE;
            if (Array.isArray(id)) {
              id.forEach(function (item) {
                var resourceEvents = eventsByResource.get(item) || [];
                resourceEvents.push(event);
                eventsByResource.set(item, resourceEvents);
              });
            } else {
              var resourceEvents = eventsByResource.get(id) || [];
              resourceEvents.push(event);
              eventsByResource.set(id, resourceEvents);
            }
          });
          return eventsByResource;
        }
      };
    }

    var _interopRequireWildcard$4 = interopRequireWildcardExports.default;
    var _interopRequireDefault$d = interopRequireDefaultExports.default;
    Object.defineProperty(TimeGrid$1, "__esModule", {
      value: true
    });
    TimeGrid$1.default = void 0;
    var _slicedToArray2$4 = _interopRequireDefault$d(slicedToArrayExports);
    var _objectSpread2$1 = _interopRequireDefault$d(objectSpread2Exports);
    var _classCallCheck2$5 = _interopRequireDefault$d(classCallCheckExports);
    var _createClass2$5 = _interopRequireDefault$d(createClassExports);
    var _callSuper2$5 = _interopRequireDefault$d(callSuperExports);
    var _inherits2$5 = _interopRequireDefault$d(inheritsExports);
    var _react$6 = _interopRequireWildcard$4(React__default.default);
    var _clsx$2 = _interopRequireDefault$d(clsxExports);
    var animationFrame = _interopRequireWildcard$4(animationFrame$2);
    var _memoizeOne = _interopRequireDefault$d(memoizeOne_cjs);
    var _DayColumn = _interopRequireDefault$d(DayColumn$1);
    var _TimeGutter = _interopRequireDefault$d(TimeGutter$1);
    var _TimeGridHeader = _interopRequireDefault$d(TimeGridHeader$1);
    var _PopOverlay = _interopRequireDefault$d(PopOverlay$1);
    var _width$1 = _interopRequireDefault$d(widthExports);
    var _position = _interopRequireDefault$d(positionExports);
    var _constants$7 = constants;
    var _eventLevels$1 = eventLevels$1;
    var _helpers$1 = helpers;
    var _Resources = _interopRequireDefault$d(Resources$1);
    var TimeGrid = TimeGrid$1.default = /*#__PURE__*/function (_Component) {
      function TimeGrid(props) {
        var _this;
        (0, _classCallCheck2$5.default)(this, TimeGrid);
        _this = (0, _callSuper2$5.default)(this, TimeGrid, [props]);
        _this.handleScroll = function (e) {
          if (_this.scrollRef.current) {
            _this.scrollRef.current.scrollLeft = e.target.scrollLeft;
          }
        };
        _this.handleResize = function () {
          animationFrame.cancel(_this.rafHandle);
          _this.rafHandle = animationFrame.request(_this.checkOverflow);
        };
        _this.handleKeyPressEvent = function () {
          _this.clearSelection();
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          (0, _helpers$1.notify)(_this.props.onKeyPressEvent, args);
        };
        _this.handleSelectEvent = function () {
          //cancel any pending selections so only the event click goes through.
          _this.clearSelection();
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          (0, _helpers$1.notify)(_this.props.onSelectEvent, args);
        };
        _this.handleDoubleClickEvent = function () {
          _this.clearSelection();
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          (0, _helpers$1.notify)(_this.props.onDoubleClickEvent, args);
        };
        _this.handleShowMore = function (events, date, cell, slot, target) {
          var _this$props = _this.props,
            popup = _this$props.popup,
            onDrillDown = _this$props.onDrillDown,
            onShowMore = _this$props.onShowMore,
            getDrilldownView = _this$props.getDrilldownView,
            doShowMoreDrillDown = _this$props.doShowMoreDrillDown;
          _this.clearSelection();
          if (popup) {
            var position = (0, _position.default)(cell, _this.containerRef.current);
            _this.setState({
              overlay: {
                date: date,
                events: events,
                position: (0, _objectSpread2$1.default)((0, _objectSpread2$1.default)({}, position), {}, {
                  width: '200px'
                }),
                target: target
              }
            });
          } else if (doShowMoreDrillDown) {
            (0, _helpers$1.notify)(onDrillDown, [date, getDrilldownView(date) || _constants$7.views.DAY]);
          }
          (0, _helpers$1.notify)(onShowMore, [events, date, slot]);
        };
        _this.handleSelectAllDaySlot = function (slots, slotInfo) {
          var onSelectSlot = _this.props.onSelectSlot;
          var start = new Date(slots[0]);
          var end = new Date(slots[slots.length - 1]);
          end.setDate(slots[slots.length - 1].getDate() + 1);
          (0, _helpers$1.notify)(onSelectSlot, {
            slots: slots,
            start: start,
            end: end,
            action: slotInfo.action,
            resourceId: slotInfo.resourceId
          });
        };
        _this.overlayDisplay = function () {
          _this.setState({
            overlay: null
          });
        };
        _this.checkOverflow = function () {
          if (_this._updatingOverflow) return;
          var content = _this.contentRef.current;
          if (!(content !== null && content !== void 0 && content.scrollHeight)) return;
          var isOverflowing = content.scrollHeight > content.clientHeight;
          if (_this.state.isOverflowing !== isOverflowing) {
            _this._updatingOverflow = true;
            _this.setState({
              isOverflowing: isOverflowing
            }, function () {
              _this._updatingOverflow = false;
            });
          }
        };
        _this.memoizedResources = (0, _memoizeOne.default)(function (resources, accessors) {
          return (0, _Resources.default)(resources, accessors);
        });
        _this.state = {
          gutterWidth: undefined,
          isOverflowing: null
        };
        _this.scrollRef = /*#__PURE__*/_react$6.default.createRef();
        _this.contentRef = /*#__PURE__*/_react$6.default.createRef();
        _this.containerRef = /*#__PURE__*/_react$6.default.createRef();
        _this._scrollRatio = null;
        _this.gutterRef = /*#__PURE__*/(0, _react$6.createRef)();
        return _this;
      }
      (0, _inherits2$5.default)(TimeGrid, _Component);
      return (0, _createClass2$5.default)(TimeGrid, [{
        key: "getSnapshotBeforeUpdate",
        value: function getSnapshotBeforeUpdate() {
          this.checkOverflow();
          return null;
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this.props.width == null) {
            this.measureGutter();
          }
          this.calculateScroll();
          this.applyScroll();
          window.addEventListener('resize', this.handleResize);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          window.removeEventListener('resize', this.handleResize);
          animationFrame.cancel(this.rafHandle);
          if (this.measureGutterAnimationFrameRequest) {
            window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest);
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          this.applyScroll();
        }
      }, {
        key: "renderEvents",
        value: function renderEvents(range, events, backgroundEvents, now) {
          var _this2 = this;
          var _this$props2 = this.props,
            min = _this$props2.min,
            max = _this$props2.max,
            components = _this$props2.components,
            accessors = _this$props2.accessors,
            localizer = _this$props2.localizer,
            dayLayoutAlgorithm = _this$props2.dayLayoutAlgorithm;
          var resources = this.memoizedResources(this.props.resources, accessors);
          var groupedEvents = resources.groupEvents(events);
          var groupedBackgroundEvents = resources.groupEvents(backgroundEvents);
          return resources.map(function (_ref, i) {
            var _ref2 = (0, _slicedToArray2$4.default)(_ref, 2),
              id = _ref2[0],
              resource = _ref2[1];
            return range.map(function (date, jj) {
              var daysEvents = (groupedEvents.get(id) || []).filter(function (event) {
                return localizer.inRange(date, accessors.start(event), accessors.end(event), 'day');
              });
              var daysBackgroundEvents = (groupedBackgroundEvents.get(id) || []).filter(function (event) {
                return localizer.inRange(date, accessors.start(event), accessors.end(event), 'day');
              });
              return /*#__PURE__*/_react$6.default.createElement(_DayColumn.default, Object.assign({}, _this2.props, {
                localizer: localizer,
                min: localizer.merge(date, min),
                max: localizer.merge(date, max),
                resource: resource && id,
                components: components,
                isNow: localizer.isSameDate(date, now),
                key: i + '-' + jj,
                date: date,
                events: daysEvents,
                backgroundEvents: daysBackgroundEvents,
                dayLayoutAlgorithm: dayLayoutAlgorithm
              }));
            });
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props$allDayMax;
          var _this$props3 = this.props,
            events = _this$props3.events,
            backgroundEvents = _this$props3.backgroundEvents,
            range = _this$props3.range,
            width = _this$props3.width,
            rtl = _this$props3.rtl,
            selected = _this$props3.selected,
            getNow = _this$props3.getNow,
            resources = _this$props3.resources,
            components = _this$props3.components,
            accessors = _this$props3.accessors,
            getters = _this$props3.getters,
            localizer = _this$props3.localizer,
            min = _this$props3.min,
            max = _this$props3.max,
            showMultiDayTimes = _this$props3.showMultiDayTimes,
            longPressThreshold = _this$props3.longPressThreshold,
            resizable = _this$props3.resizable;
          width = width || this.state.gutterWidth;
          var start = range[0],
            end = range[range.length - 1];
          this.slots = range.length;
          var allDayEvents = [],
            rangeEvents = [],
            rangeBackgroundEvents = [];
          events.forEach(function (event) {
            if ((0, _eventLevels$1.inRange)(event, start, end, accessors, localizer)) {
              var eStart = accessors.start(event),
                eEnd = accessors.end(event);
              if (accessors.allDay(event) || localizer.startAndEndAreDateOnly(eStart, eEnd) || !showMultiDayTimes && !localizer.isSameDate(eStart, eEnd)) {
                allDayEvents.push(event);
              } else {
                rangeEvents.push(event);
              }
            }
          });
          backgroundEvents.forEach(function (event) {
            if ((0, _eventLevels$1.inRange)(event, start, end, accessors, localizer)) {
              rangeBackgroundEvents.push(event);
            }
          });
          allDayEvents.sort(function (a, b) {
            return (0, _eventLevels$1.sortEvents)(a, b, accessors, localizer);
          });
          return /*#__PURE__*/_react$6.default.createElement("div", {
            className: (0, _clsx$2.default)('rbc-time-view', resources && 'rbc-time-view-resources'),
            ref: this.containerRef
          }, /*#__PURE__*/_react$6.default.createElement(_TimeGridHeader.default, {
            range: range,
            events: allDayEvents,
            width: width,
            rtl: rtl,
            getNow: getNow,
            localizer: localizer,
            selected: selected,
            allDayMaxRows: this.props.showAllEvents ? Infinity : (_this$props$allDayMax = this.props.allDayMaxRows) !== null && _this$props$allDayMax !== void 0 ? _this$props$allDayMax : Infinity,
            resources: this.memoizedResources(resources, accessors),
            selectable: this.props.selectable,
            accessors: accessors,
            getters: getters,
            components: components,
            scrollRef: this.scrollRef,
            isOverflowing: this.state.isOverflowing,
            longPressThreshold: longPressThreshold,
            onSelectSlot: this.handleSelectAllDaySlot,
            onSelectEvent: this.handleSelectEvent,
            onShowMore: this.handleShowMore,
            onDoubleClickEvent: this.props.onDoubleClickEvent,
            onKeyPressEvent: this.props.onKeyPressEvent,
            onDrillDown: this.props.onDrillDown,
            getDrilldownView: this.props.getDrilldownView,
            resizable: resizable
          }), this.props.popup && this.renderOverlay(), /*#__PURE__*/_react$6.default.createElement("div", {
            ref: this.contentRef,
            className: "rbc-time-content",
            onScroll: this.handleScroll
          }, /*#__PURE__*/_react$6.default.createElement(_TimeGutter.default, {
            date: start,
            ref: this.gutterRef,
            localizer: localizer,
            min: localizer.merge(start, min),
            max: localizer.merge(start, max),
            step: this.props.step,
            getNow: this.props.getNow,
            timeslots: this.props.timeslots,
            components: components,
            className: "rbc-time-gutter",
            getters: getters
          }), this.renderEvents(range, rangeEvents, rangeBackgroundEvents, getNow())));
        }
      }, {
        key: "renderOverlay",
        value: function renderOverlay() {
          var _this$state$overlay,
            _this$state,
            _this3 = this;
          var overlay = (_this$state$overlay = (_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.overlay) !== null && _this$state$overlay !== void 0 ? _this$state$overlay : {};
          var _this$props4 = this.props,
            accessors = _this$props4.accessors,
            localizer = _this$props4.localizer,
            components = _this$props4.components,
            getters = _this$props4.getters,
            selected = _this$props4.selected,
            popupOffset = _this$props4.popupOffset,
            handleDragStart = _this$props4.handleDragStart;
          var onHide = function onHide() {
            return _this3.setState({
              overlay: null
            });
          };
          return /*#__PURE__*/_react$6.default.createElement(_PopOverlay.default, {
            overlay: overlay,
            accessors: accessors,
            localizer: localizer,
            components: components,
            getters: getters,
            selected: selected,
            popupOffset: popupOffset,
            ref: this.containerRef,
            handleKeyPressEvent: this.handleKeyPressEvent,
            handleSelectEvent: this.handleSelectEvent,
            handleDoubleClickEvent: this.handleDoubleClickEvent,
            handleDragStart: handleDragStart,
            show: !!overlay.position,
            overlayDisplay: this.overlayDisplay,
            onHide: onHide
          });
        }
      }, {
        key: "clearSelection",
        value: function clearSelection() {
          clearTimeout(this._selectTimer);
          this._pendingSelection = [];
        }
      }, {
        key: "measureGutter",
        value: function measureGutter() {
          var _this4 = this;
          if (this.measureGutterAnimationFrameRequest) {
            window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest);
          }
          this.measureGutterAnimationFrameRequest = window.requestAnimationFrame(function () {
            var _this4$gutterRef;
            var width = (_this4$gutterRef = _this4.gutterRef) !== null && _this4$gutterRef !== void 0 && _this4$gutterRef.current ? (0, _width$1.default)(_this4.gutterRef.current) : undefined;
            if (width && _this4.state.gutterWidth !== width) {
              _this4.setState({
                gutterWidth: width
              });
            }
          });
        }
      }, {
        key: "applyScroll",
        value: function applyScroll() {
          // If auto-scroll is disabled, we don't actually apply the scroll
          if (this._scrollRatio != null && this.props.enableAutoScroll === true) {
            var content = this.contentRef.current;
            content.scrollTop = content.scrollHeight * this._scrollRatio;
            // Only do this once
            this._scrollRatio = null;
          }
        }
      }, {
        key: "calculateScroll",
        value: function calculateScroll() {
          var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
          var min = props.min,
            max = props.max,
            scrollToTime = props.scrollToTime,
            localizer = props.localizer;
          var diffMillis = localizer.diff(localizer.merge(scrollToTime, min), scrollToTime, 'milliseconds');
          var totalMillis = localizer.diff(min, max, 'milliseconds');
          this._scrollRatio = diffMillis / totalMillis;
        }
      }]);
    }(_react$6.Component);
    TimeGrid.defaultProps = {
      step: 30,
      timeslots: 2
    };

    var _interopRequireDefault$c = interopRequireDefaultExports.default;
    Object.defineProperty(Day$1, "__esModule", {
      value: true
    });
    Day$1.default = void 0;
    var _objectWithoutProperties2$4 = _interopRequireDefault$c(objectWithoutPropertiesExports);
    var _classCallCheck2$4 = _interopRequireDefault$c(classCallCheckExports);
    var _createClass2$4 = _interopRequireDefault$c(createClassExports);
    var _callSuper2$4 = _interopRequireDefault$c(callSuperExports);
    var _inherits2$4 = _interopRequireDefault$c(inheritsExports);
    var _react$5 = _interopRequireDefault$c(React__default.default);
    var _constants$6 = constants;
    var _TimeGrid$2 = _interopRequireDefault$c(TimeGrid$1);
    var _excluded$4 = ["date", "localizer", "min", "max", "scrollToTime", "enableAutoScroll"];
    var Day = /*#__PURE__*/function (_React$Component) {
      function Day() {
        (0, _classCallCheck2$4.default)(this, Day);
        return (0, _callSuper2$4.default)(this, Day, arguments);
      }
      (0, _inherits2$4.default)(Day, _React$Component);
      return (0, _createClass2$4.default)(Day, [{
        key: "render",
        value: function render() {
          /**
           * This allows us to default min, max, and scrollToTime
           * using our localizer. This is necessary until such time
           * as TODO: TimeGrid is converted to a functional component.
           */
          var _this$props = this.props,
            date = _this$props.date,
            localizer = _this$props.localizer,
            _this$props$min = _this$props.min,
            min = _this$props$min === void 0 ? localizer.startOf(new Date(), 'day') : _this$props$min,
            _this$props$max = _this$props.max,
            max = _this$props$max === void 0 ? localizer.endOf(new Date(), 'day') : _this$props$max,
            _this$props$scrollToT = _this$props.scrollToTime,
            scrollToTime = _this$props$scrollToT === void 0 ? localizer.startOf(new Date(), 'day') : _this$props$scrollToT,
            _this$props$enableAut = _this$props.enableAutoScroll,
            enableAutoScroll = _this$props$enableAut === void 0 ? true : _this$props$enableAut,
            props = (0, _objectWithoutProperties2$4.default)(_this$props, _excluded$4);
          var range = Day.range(date, {
            localizer: localizer
          });
          return /*#__PURE__*/_react$5.default.createElement(_TimeGrid$2.default, Object.assign({}, props, {
            range: range,
            eventOffset: 10,
            localizer: localizer,
            min: min,
            max: max,
            scrollToTime: scrollToTime,
            enableAutoScroll: enableAutoScroll
          }));
        }
      }]);
    }(_react$5.default.Component);
    Day.range = function (date, _ref) {
      var localizer = _ref.localizer;
      return [localizer.startOf(date, 'day')];
    };
    Day.navigate = function (date, action, _ref2) {
      var localizer = _ref2.localizer;
      switch (action) {
        case _constants$6.navigate.PREVIOUS:
          return localizer.add(date, -1, 'day');
        case _constants$6.navigate.NEXT:
          return localizer.add(date, 1, 'day');
        default:
          return date;
      }
    };
    Day.title = function (date, _ref3) {
      var localizer = _ref3.localizer;
      return localizer.format(date, 'dayHeaderFormat');
    };
    Day$1.default = Day;

    var Week$1 = {};

    var toArray = {exports: {}};

    (function (module) {
    	var arrayWithHoles = arrayWithHolesExports;
    	var iterableToArray = iterableToArrayExports;
    	var unsupportedIterableToArray = unsupportedIterableToArrayExports;
    	var nonIterableRest = nonIterableRestExports;
    	function _toArray(r) {
    	  return arrayWithHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableRest();
    	}
    	module.exports = _toArray, module.exports.__esModule = true, module.exports["default"] = module.exports; 
    } (toArray));

    var toArrayExports = toArray.exports;

    var _interopRequireDefault$b = interopRequireDefaultExports.default;
    Object.defineProperty(Week$1, "__esModule", {
      value: true
    });
    Week$1.default = void 0;
    var _toArray2$1 = _interopRequireDefault$b(toArrayExports);
    var _objectWithoutProperties2$3 = _interopRequireDefault$b(objectWithoutPropertiesExports);
    var _classCallCheck2$3 = _interopRequireDefault$b(classCallCheckExports);
    var _createClass2$3 = _interopRequireDefault$b(createClassExports);
    var _callSuper2$3 = _interopRequireDefault$b(callSuperExports);
    var _inherits2$3 = _interopRequireDefault$b(inheritsExports);
    var _react$4 = _interopRequireDefault$b(React__default.default);
    var _constants$5 = constants;
    var _TimeGrid$1 = _interopRequireDefault$b(TimeGrid$1);
    var _excluded$3 = ["date", "localizer", "min", "max", "scrollToTime", "enableAutoScroll"];
    var Week = /*#__PURE__*/function (_React$Component) {
      function Week() {
        (0, _classCallCheck2$3.default)(this, Week);
        return (0, _callSuper2$3.default)(this, Week, arguments);
      }
      (0, _inherits2$3.default)(Week, _React$Component);
      return (0, _createClass2$3.default)(Week, [{
        key: "render",
        value: function render() {
          /**
           * This allows us to default min, max, and scrollToTime
           * using our localizer. This is necessary until such time
           * as TimeGrid is converted to a functional component.
           */
          var _this$props = this.props,
            date = _this$props.date,
            localizer = _this$props.localizer,
            _this$props$min = _this$props.min,
            min = _this$props$min === void 0 ? localizer.startOf(new Date(), 'day') : _this$props$min,
            _this$props$max = _this$props.max,
            max = _this$props$max === void 0 ? localizer.endOf(new Date(), 'day') : _this$props$max,
            _this$props$scrollToT = _this$props.scrollToTime,
            scrollToTime = _this$props$scrollToT === void 0 ? localizer.startOf(new Date(), 'day') : _this$props$scrollToT,
            _this$props$enableAut = _this$props.enableAutoScroll,
            enableAutoScroll = _this$props$enableAut === void 0 ? true : _this$props$enableAut,
            props = (0, _objectWithoutProperties2$3.default)(_this$props, _excluded$3);
          var range = Week.range(date, this.props);
          return /*#__PURE__*/_react$4.default.createElement(_TimeGrid$1.default, Object.assign({}, props, {
            range: range,
            eventOffset: 15,
            localizer: localizer,
            min: min,
            max: max,
            scrollToTime: scrollToTime,
            enableAutoScroll: enableAutoScroll
          }));
        }
      }]);
    }(_react$4.default.Component);
    Week.defaultProps = _TimeGrid$1.default.defaultProps;
    Week.navigate = function (date, action, _ref) {
      var localizer = _ref.localizer;
      switch (action) {
        case _constants$5.navigate.PREVIOUS:
          return localizer.add(date, -1, 'week');
        case _constants$5.navigate.NEXT:
          return localizer.add(date, 1, 'week');
        default:
          return date;
      }
    };
    Week.range = function (date, _ref2) {
      var localizer = _ref2.localizer;
      var firstOfWeek = localizer.startOfWeek();
      var start = localizer.startOf(date, 'week', firstOfWeek);
      var end = localizer.endOf(date, 'week', firstOfWeek);
      return localizer.range(start, end);
    };
    Week.title = function (date, _ref3) {
      var localizer = _ref3.localizer;
      var _Week$range = Week.range(date, {
          localizer: localizer
        }),
        _Week$range2 = (0, _toArray2$1.default)(_Week$range),
        start = _Week$range2[0],
        rest = _Week$range2.slice(1);
      return localizer.format({
        start: start,
        end: rest.pop()
      }, 'dayRangeHeaderFormat');
    };
    Week$1.default = Week;

    var WorkWeek$1 = {};

    var _interopRequireDefault$a = interopRequireDefaultExports.default;
    Object.defineProperty(WorkWeek$1, "__esModule", {
      value: true
    });
    WorkWeek$1.default = void 0;
    var _toArray2 = _interopRequireDefault$a(toArrayExports);
    var _objectWithoutProperties2$2 = _interopRequireDefault$a(objectWithoutPropertiesExports);
    var _classCallCheck2$2 = _interopRequireDefault$a(classCallCheckExports);
    var _createClass2$2 = _interopRequireDefault$a(createClassExports);
    var _callSuper2$2 = _interopRequireDefault$a(callSuperExports);
    var _inherits2$2 = _interopRequireDefault$a(inheritsExports);
    var _react$3 = _interopRequireDefault$a(React__default.default);
    var _Week$1 = _interopRequireDefault$a(Week$1);
    var _TimeGrid = _interopRequireDefault$a(TimeGrid$1);
    var _excluded$2 = ["date", "localizer", "min", "max", "scrollToTime", "enableAutoScroll"];
    function workWeekRange(date, options) {
      return _Week$1.default.range(date, options).filter(function (d) {
        return [6, 0].indexOf(d.getDay()) === -1;
      });
    }
    var WorkWeek = /*#__PURE__*/function (_React$Component) {
      function WorkWeek() {
        (0, _classCallCheck2$2.default)(this, WorkWeek);
        return (0, _callSuper2$2.default)(this, WorkWeek, arguments);
      }
      (0, _inherits2$2.default)(WorkWeek, _React$Component);
      return (0, _createClass2$2.default)(WorkWeek, [{
        key: "render",
        value: function render() {
          /**
           * This allows us to default min, max, and scrollToTime
           * using our localizer. This is necessary until such time
           * as TimeGrid is converted to a functional component.
           */
          var _this$props = this.props,
            date = _this$props.date,
            localizer = _this$props.localizer,
            _this$props$min = _this$props.min,
            min = _this$props$min === void 0 ? localizer.startOf(new Date(), 'day') : _this$props$min,
            _this$props$max = _this$props.max,
            max = _this$props$max === void 0 ? localizer.endOf(new Date(), 'day') : _this$props$max,
            _this$props$scrollToT = _this$props.scrollToTime,
            scrollToTime = _this$props$scrollToT === void 0 ? localizer.startOf(new Date(), 'day') : _this$props$scrollToT,
            _this$props$enableAut = _this$props.enableAutoScroll,
            enableAutoScroll = _this$props$enableAut === void 0 ? true : _this$props$enableAut,
            props = (0, _objectWithoutProperties2$2.default)(_this$props, _excluded$2);
          var range = workWeekRange(date, this.props);
          return /*#__PURE__*/_react$3.default.createElement(_TimeGrid.default, Object.assign({}, props, {
            range: range,
            eventOffset: 15,
            localizer: localizer,
            min: min,
            max: max,
            scrollToTime: scrollToTime,
            enableAutoScroll: enableAutoScroll
          }));
        }
      }]);
    }(_react$3.default.Component);
    WorkWeek.defaultProps = _TimeGrid.default.defaultProps;
    WorkWeek.range = workWeekRange;
    WorkWeek.navigate = _Week$1.default.navigate;
    WorkWeek.title = function (date, _ref) {
      var localizer = _ref.localizer;
      var _workWeekRange = workWeekRange(date, {
          localizer: localizer
        }),
        _workWeekRange2 = (0, _toArray2.default)(_workWeekRange),
        start = _workWeekRange2[0],
        rest = _workWeekRange2.slice(1);
      return localizer.format({
        start: start,
        end: rest.pop()
      }, 'dayRangeHeaderFormat');
    };
    WorkWeek$1.default = WorkWeek;

    var Agenda$1 = {};

    var _interopRequireDefault$9 = interopRequireDefaultExports.default;
    var _interopRequireWildcard$3 = interopRequireWildcardExports.default;
    Object.defineProperty(Agenda$1, "__esModule", {
      value: true
    });
    Agenda$1.default = void 0;
    var _react$2 = _interopRequireWildcard$3(React__default.default);
    var _addClass = _interopRequireDefault$9(addClassExports);
    var _removeClass = _interopRequireDefault$9(removeClassExports);
    var _width = _interopRequireDefault$9(widthExports);
    var _scrollbarSize = _interopRequireDefault$9(scrollbarSizeExports);
    var _constants$4 = constants;
    var _eventLevels = eventLevels$1;
    var _selection = selection;
    var DEFAULT_LENGTH = 30;
    function Agenda(_ref) {
      var accessors = _ref.accessors,
        components = _ref.components,
        date = _ref.date,
        events = _ref.events,
        getters = _ref.getters,
        _ref$length = _ref.length,
        length = _ref$length === void 0 ? DEFAULT_LENGTH : _ref$length,
        localizer = _ref.localizer,
        onDoubleClickEvent = _ref.onDoubleClickEvent,
        onSelectEvent = _ref.onSelectEvent,
        selected = _ref.selected;
      var headerRef = (0, _react$2.useRef)(null);
      var dateColRef = (0, _react$2.useRef)(null);
      var timeColRef = (0, _react$2.useRef)(null);
      var contentRef = (0, _react$2.useRef)(null);
      var tbodyRef = (0, _react$2.useRef)(null);
      (0, _react$2.useEffect)(function () {
        _adjustHeader();
      });
      var renderDay = function renderDay(day, events, dayKey) {
        var Event = components.event,
          AgendaDate = components.date;
        events = events.filter(function (e) {
          return (0, _eventLevels.inRange)(e, localizer.startOf(day, 'day'), localizer.endOf(day, 'day'), accessors, localizer);
        });
        return events.map(function (event, idx) {
          var title = accessors.title(event);
          var end = accessors.end(event);
          var start = accessors.start(event);
          var userProps = getters.eventProp(event, start, end, (0, _selection.isSelected)(event, selected));
          var dateLabel = idx === 0 && localizer.format(day, 'agendaDateFormat');
          var first = idx === 0 ? /*#__PURE__*/_react$2.default.createElement("td", {
            rowSpan: events.length,
            className: "rbc-agenda-date-cell"
          }, AgendaDate ? /*#__PURE__*/_react$2.default.createElement(AgendaDate, {
            day: day,
            label: dateLabel
          }) : dateLabel) : false;
          return /*#__PURE__*/_react$2.default.createElement("tr", {
            key: dayKey + '_' + idx,
            className: userProps.className,
            style: userProps.style
          }, first, /*#__PURE__*/_react$2.default.createElement("td", {
            className: "rbc-agenda-time-cell"
          }, timeRangeLabel(day, event)), /*#__PURE__*/_react$2.default.createElement("td", {
            className: "rbc-agenda-event-cell",
            onClick: function onClick(e) {
              return onSelectEvent && onSelectEvent(event, e);
            },
            onDoubleClick: function onDoubleClick(e) {
              return onDoubleClickEvent && onDoubleClickEvent(event, e);
            }
          }, Event ? /*#__PURE__*/_react$2.default.createElement(Event, {
            event: event,
            title: title
          }) : title));
        }, []);
      };
      var timeRangeLabel = function timeRangeLabel(day, event) {
        var labelClass = '',
          TimeComponent = components.time,
          label = localizer.messages.allDay;
        var end = accessors.end(event);
        var start = accessors.start(event);
        if (!accessors.allDay(event)) {
          if (localizer.eq(start, end)) {
            label = localizer.format(start, 'agendaTimeFormat');
          } else if (localizer.isSameDate(start, end)) {
            label = localizer.format({
              start: start,
              end: end
            }, 'agendaTimeRangeFormat');
          } else if (localizer.isSameDate(day, start)) {
            label = localizer.format(start, 'agendaTimeFormat');
          } else if (localizer.isSameDate(day, end)) {
            label = localizer.format(end, 'agendaTimeFormat');
          }
        }
        if (localizer.gt(day, start, 'day')) labelClass = 'rbc-continues-prior';
        if (localizer.lt(day, end, 'day')) labelClass += ' rbc-continues-after';
        return /*#__PURE__*/_react$2.default.createElement("span", {
          className: labelClass.trim()
        }, TimeComponent ? /*#__PURE__*/_react$2.default.createElement(TimeComponent, {
          event: event,
          day: day,
          label: label
        }) : label);
      };
      var _adjustHeader = function _adjustHeader() {
        if (!tbodyRef.current) return;
        var header = headerRef.current;
        var firstRow = tbodyRef.current.firstChild;
        if (!firstRow) return;
        var isOverflowing = contentRef.current.scrollHeight > contentRef.current.clientHeight;
        var _widths = [];
        var widths = _widths;
        _widths = [(0, _width.default)(firstRow.children[0]), (0, _width.default)(firstRow.children[1])];
        if (widths[0] !== _widths[0] || widths[1] !== _widths[1]) {
          dateColRef.current.style.width = _widths[0] + 'px';
          timeColRef.current.style.width = _widths[1] + 'px';
        }
        if (isOverflowing) {
          (0, _addClass.default)(header, 'rbc-header-overflowing');
          header.style.marginRight = (0, _scrollbarSize.default)() + 'px';
        } else {
          (0, _removeClass.default)(header, 'rbc-header-overflowing');
        }
      };
      var messages = localizer.messages;
      var end = localizer.add(date, length, 'day');
      var range = localizer.range(date, end, 'day');
      events = events.filter(function (event) {
        return (0, _eventLevels.inRange)(event, localizer.startOf(date, 'day'), localizer.endOf(end, 'day'), accessors, localizer);
      });
      events.sort(function (a, b) {
        return +accessors.start(a) - +accessors.start(b);
      });
      return /*#__PURE__*/_react$2.default.createElement("div", {
        className: "rbc-agenda-view"
      }, events.length !== 0 ? /*#__PURE__*/_react$2.default.createElement(_react$2.default.Fragment, null, /*#__PURE__*/_react$2.default.createElement("table", {
        ref: headerRef,
        className: "rbc-agenda-table"
      }, /*#__PURE__*/_react$2.default.createElement("thead", null, /*#__PURE__*/_react$2.default.createElement("tr", null, /*#__PURE__*/_react$2.default.createElement("th", {
        className: "rbc-header",
        ref: dateColRef
      }, messages.date), /*#__PURE__*/_react$2.default.createElement("th", {
        className: "rbc-header",
        ref: timeColRef
      }, messages.time), /*#__PURE__*/_react$2.default.createElement("th", {
        className: "rbc-header"
      }, messages.event)))), /*#__PURE__*/_react$2.default.createElement("div", {
        className: "rbc-agenda-content",
        ref: contentRef
      }, /*#__PURE__*/_react$2.default.createElement("table", {
        className: "rbc-agenda-table"
      }, /*#__PURE__*/_react$2.default.createElement("tbody", {
        ref: tbodyRef
      }, range.map(function (day, idx) {
        return renderDay(day, events, idx);
      }))))) : /*#__PURE__*/_react$2.default.createElement("span", {
        className: "rbc-agenda-empty"
      }, messages.noEventsInRange));
    }
    Agenda.range = function (start, _ref2) {
      var _ref2$length = _ref2.length,
        length = _ref2$length === void 0 ? DEFAULT_LENGTH : _ref2$length,
        localizer = _ref2.localizer;
      var end = localizer.add(start, length, 'day');
      return {
        start: start,
        end: end
      };
    };
    Agenda.navigate = function (date, action, _ref3) {
      var _ref3$length = _ref3.length,
        length = _ref3$length === void 0 ? DEFAULT_LENGTH : _ref3$length,
        localizer = _ref3.localizer;
      switch (action) {
        case _constants$4.navigate.PREVIOUS:
          return localizer.add(date, -length, 'day');
        case _constants$4.navigate.NEXT:
          return localizer.add(date, length, 'day');
        default:
          return date;
      }
    };
    Agenda.title = function (start, _ref4) {
      var _ref4$length = _ref4.length,
        length = _ref4$length === void 0 ? DEFAULT_LENGTH : _ref4$length,
        localizer = _ref4.localizer;
      var end = localizer.add(start, length, 'day');
      return localizer.format({
        start: start,
        end: end
      }, 'agendaHeaderFormat');
    };
    Agenda$1.default = Agenda;

    var _interopRequireDefault$8 = interopRequireDefaultExports.default;
    Object.defineProperty(Views, "__esModule", {
      value: true
    });
    Views.default = void 0;
    var _defineProperty2$1 = _interopRequireDefault$8(definePropertyExports);
    var _constants$3 = constants;
    var _Month = _interopRequireDefault$8(Month);
    var _Day = _interopRequireDefault$8(Day$1);
    var _Week = _interopRequireDefault$8(Week$1);
    var _WorkWeek = _interopRequireDefault$8(WorkWeek$1);
    var _Agenda = _interopRequireDefault$8(Agenda$1);
    var VIEWS = (0, _defineProperty2$1.default)((0, _defineProperty2$1.default)((0, _defineProperty2$1.default)((0, _defineProperty2$1.default)((0, _defineProperty2$1.default)({}, _constants$3.views.MONTH, _Month.default), _constants$3.views.WEEK, _Week.default), _constants$3.views.WORK_WEEK, _WorkWeek.default), _constants$3.views.DAY, _Day.default), _constants$3.views.AGENDA, _Agenda.default);
    Views.default = VIEWS;

    var _interopRequireDefault$7 = interopRequireDefaultExports.default;
    Object.defineProperty(move, "__esModule", {
      value: true
    });
    move.default = moveDate;
    var _objectWithoutProperties2$1 = _interopRequireDefault$7(objectWithoutPropertiesExports);
    var _invariant = _interopRequireDefault$7(browser);
    var _constants$2 = constants;
    var _Views$1 = _interopRequireDefault$7(Views);
    var _excluded$1 = ["action", "date", "today"];
    function moveDate(View, _ref) {
      var action = _ref.action,
        date = _ref.date,
        today = _ref.today,
        props = (0, _objectWithoutProperties2$1.default)(_ref, _excluded$1);
      View = typeof View === 'string' ? _Views$1.default[View] : View;
      switch (action) {
        case _constants$2.navigate.TODAY:
          date = today || new Date();
          break;
        case _constants$2.navigate.DATE:
          break;
        default:
          (0, _invariant.default)(View && typeof View.navigate === 'function', 'Calendar View components must implement a static `.navigate(date, action)` method.s');
          date = View.navigate(date, action, props);
      }
      return date;
    }

    var Toolbar$1 = {};

    var _interopRequireDefault$6 = interopRequireDefaultExports.default;
    Object.defineProperty(Toolbar$1, "__esModule", {
      value: true
    });
    Toolbar$1.default = void 0;
    var _classCallCheck2$1 = _interopRequireDefault$6(classCallCheckExports);
    var _createClass2$1 = _interopRequireDefault$6(createClassExports);
    var _callSuper2$1 = _interopRequireDefault$6(callSuperExports);
    var _inherits2$1 = _interopRequireDefault$6(inheritsExports);
    var _react$1 = _interopRequireDefault$6(React__default.default);
    var _clsx$1 = _interopRequireDefault$6(clsxExports);
    var _constants$1 = constants;
    var Toolbar = /*#__PURE__*/function (_React$Component) {
      function Toolbar() {
        var _this;
        (0, _classCallCheck2$1.default)(this, Toolbar);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = (0, _callSuper2$1.default)(this, Toolbar, [].concat(args));
        _this.navigate = function (action) {
          _this.props.onNavigate(action);
        };
        _this.view = function (view) {
          _this.props.onView(view);
        };
        return _this;
      }
      (0, _inherits2$1.default)(Toolbar, _React$Component);
      return (0, _createClass2$1.default)(Toolbar, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
            messages = _this$props.localizer.messages,
            label = _this$props.label;
          return /*#__PURE__*/_react$1.default.createElement("div", {
            className: "rbc-toolbar"
          }, /*#__PURE__*/_react$1.default.createElement("span", {
            className: "rbc-btn-group"
          }, /*#__PURE__*/_react$1.default.createElement("button", {
            type: "button",
            onClick: this.navigate.bind(null, _constants$1.navigate.TODAY)
          }, messages.today), /*#__PURE__*/_react$1.default.createElement("button", {
            type: "button",
            onClick: this.navigate.bind(null, _constants$1.navigate.PREVIOUS)
          }, messages.previous), /*#__PURE__*/_react$1.default.createElement("button", {
            type: "button",
            onClick: this.navigate.bind(null, _constants$1.navigate.NEXT)
          }, messages.next)), /*#__PURE__*/_react$1.default.createElement("span", {
            className: "rbc-toolbar-label"
          }, label), /*#__PURE__*/_react$1.default.createElement("span", {
            className: "rbc-btn-group"
          }, this.viewNamesGroup(messages)));
        }
      }, {
        key: "viewNamesGroup",
        value: function viewNamesGroup(messages) {
          var _this2 = this;
          var viewNames = this.props.views;
          var view = this.props.view;
          if (viewNames.length > 1) {
            return viewNames.map(function (name) {
              return /*#__PURE__*/_react$1.default.createElement("button", {
                type: "button",
                key: name,
                className: (0, _clsx$1.default)({
                  'rbc-active': view === name
                }),
                onClick: _this2.view.bind(null, name)
              }, messages[name]);
            });
          }
        }
      }]);
    }(_react$1.default.Component);
    Toolbar$1.default = Toolbar;

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */

    function arrayEach$2(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    var _arrayEach = arrayEach$2;

    var defineProperty = _defineProperty;

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue$3(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    var _baseAssignValue = baseAssignValue$3;

    var baseAssignValue$2 = _baseAssignValue,
        eq$1 = eq_1;

    /** Used for built-in method references. */
    var objectProto$4 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue$2(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty$4.call(object, key) && eq$1(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue$2(object, key, value);
      }
    }

    var _assignValue = assignValue$2;

    var assignValue$1 = _assignValue,
        baseAssignValue$1 = _baseAssignValue;

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject$5(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue$1(object, key, newValue);
        } else {
          assignValue$1(object, key, newValue);
        }
      }
      return object;
    }

    var _copyObject = copyObject$5;

    var copyObject$4 = _copyObject,
        keys$1 = keys_1;

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign$1(object, source) {
      return object && copyObject$4(source, keys$1(source), object);
    }

    var _baseAssign = baseAssign$1;

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

    function nativeKeysIn$1(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    var _nativeKeysIn = nativeKeysIn$1;

    var isObject$3 = isObject_1,
        isPrototype$1 = _isPrototype,
        nativeKeysIn = _nativeKeysIn;

    /** Used for built-in method references. */
    var objectProto$3 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn$1(object) {
      if (!isObject$3(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype$1(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty$3.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeysIn = baseKeysIn$1;

    var arrayLikeKeys = _arrayLikeKeys,
        baseKeysIn = _baseKeysIn,
        isArrayLike = isArrayLike_1;

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn$4(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    var keysIn_1 = keysIn$4;

    var copyObject$3 = _copyObject,
        keysIn$3 = keysIn_1;

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn$1(object, source) {
      return object && copyObject$3(source, keysIn$3(source), object);
    }

    var _baseAssignIn = baseAssignIn$1;

    var _cloneBuffer = {exports: {}};

    _cloneBuffer.exports;

    (function (module, exports) {
    	var root = _root;

    	/** Detect free variable `exports`. */
    	var freeExports = exports && !exports.nodeType && exports;

    	/** Detect free variable `module`. */
    	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    	/** Detect the popular CommonJS extension `module.exports`. */
    	var moduleExports = freeModule && freeModule.exports === freeExports;

    	/** Built-in value references. */
    	var Buffer = moduleExports ? root.Buffer : undefined,
    	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

    	/**
    	 * Creates a clone of  `buffer`.
    	 *
    	 * @private
    	 * @param {Buffer} buffer The buffer to clone.
    	 * @param {boolean} [isDeep] Specify a deep clone.
    	 * @returns {Buffer} Returns the cloned buffer.
    	 */
    	function cloneBuffer(buffer, isDeep) {
    	  if (isDeep) {
    	    return buffer.slice();
    	  }
    	  var length = buffer.length,
    	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    	  buffer.copy(result);
    	  return result;
    	}

    	module.exports = cloneBuffer; 
    } (_cloneBuffer, _cloneBuffer.exports));

    var _cloneBufferExports = _cloneBuffer.exports;

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */

    function copyArray$1(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    var _copyArray = copyArray$1;

    var copyObject$2 = _copyObject,
        getSymbols$1 = _getSymbols;

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols$1(source, object) {
      return copyObject$2(source, getSymbols$1(source), object);
    }

    var _copySymbols = copySymbols$1;

    var overArg = _overArg;

    /** Built-in value references. */
    var getPrototype$4 = overArg(Object.getPrototypeOf, Object);

    var _getPrototype = getPrototype$4;

    var arrayPush = _arrayPush,
        getPrototype$3 = _getPrototype,
        getSymbols = _getSymbols,
        stubArray = stubArray_1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype$3(object);
      }
      return result;
    };

    var _getSymbolsIn = getSymbolsIn$2;

    var copyObject$1 = _copyObject,
        getSymbolsIn$1 = _getSymbolsIn;

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn$1(source, object) {
      return copyObject$1(source, getSymbolsIn$1(source), object);
    }

    var _copySymbolsIn = copySymbolsIn$1;

    var baseGetAllKeys = _baseGetAllKeys,
        getSymbolsIn = _getSymbolsIn,
        keysIn$2 = keysIn_1;

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn$2(object) {
      return baseGetAllKeys(object, keysIn$2, getSymbolsIn);
    }

    var _getAllKeysIn = getAllKeysIn$2;

    /** Used for built-in method references. */

    var objectProto$2 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray$1(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty$2.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    var _initCloneArray = initCloneArray$1;

    var Uint8Array$1 = _Uint8Array;

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer$3(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
      return result;
    }

    var _cloneArrayBuffer = cloneArrayBuffer$3;

    var cloneArrayBuffer$2 = _cloneArrayBuffer;

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView$1(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    var _cloneDataView = cloneDataView$1;

    /** Used to match `RegExp` flags from their coerced string values. */

    var reFlags = /\w*$/;

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp$1(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    var _cloneRegExp = cloneRegExp$1;

    var Symbol$1 = _Symbol;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol$1(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    var _cloneSymbol = cloneSymbol$1;

    var cloneArrayBuffer$1 = _cloneArrayBuffer;

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray$1(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    var _cloneTypedArray = cloneTypedArray$1;

    var cloneArrayBuffer = _cloneArrayBuffer,
        cloneDataView = _cloneDataView,
        cloneRegExp = _cloneRegExp,
        cloneSymbol = _cloneSymbol,
        cloneTypedArray = _cloneTypedArray;

    /** `Object#toString` result references. */
    var boolTag$1 = '[object Boolean]',
        dateTag$1 = '[object Date]',
        mapTag$2 = '[object Map]',
        numberTag$1 = '[object Number]',
        regexpTag$1 = '[object RegExp]',
        setTag$2 = '[object Set]',
        stringTag$1 = '[object String]',
        symbolTag$1 = '[object Symbol]';

    var arrayBufferTag$1 = '[object ArrayBuffer]',
        dataViewTag$1 = '[object DataView]',
        float32Tag$1 = '[object Float32Array]',
        float64Tag$1 = '[object Float64Array]',
        int8Tag$1 = '[object Int8Array]',
        int16Tag$1 = '[object Int16Array]',
        int32Tag$1 = '[object Int32Array]',
        uint8Tag$1 = '[object Uint8Array]',
        uint8ClampedTag$1 = '[object Uint8ClampedArray]',
        uint16Tag$1 = '[object Uint16Array]',
        uint32Tag$1 = '[object Uint32Array]';

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag$1(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$1:
          return cloneArrayBuffer(object);

        case boolTag$1:
        case dateTag$1:
          return new Ctor(+object);

        case dataViewTag$1:
          return cloneDataView(object, isDeep);

        case float32Tag$1: case float64Tag$1:
        case int8Tag$1: case int16Tag$1: case int32Tag$1:
        case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
          return cloneTypedArray(object, isDeep);

        case mapTag$2:
          return new Ctor;

        case numberTag$1:
        case stringTag$1:
          return new Ctor(object);

        case regexpTag$1:
          return cloneRegExp(object);

        case setTag$2:
          return new Ctor;

        case symbolTag$1:
          return cloneSymbol(object);
      }
    }

    var _initCloneByTag = initCloneByTag$1;

    var isObject$2 = isObject_1;

    /** Built-in value references. */
    var objectCreate = Object.create;

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate$2 = (function() {
      function object() {}
      return function(proto) {
        if (!isObject$2(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    var _baseCreate = baseCreate$2;

    var baseCreate$1 = _baseCreate,
        getPrototype$2 = _getPrototype,
        isPrototype = _isPrototype;

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject$1(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate$1(getPrototype$2(object))
        : {};
    }

    var _initCloneObject = initCloneObject$1;

    var getTag$2 = _getTag,
        isObjectLike$2 = isObjectLike_1;

    /** `Object#toString` result references. */
    var mapTag$1 = '[object Map]';

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap$1(value) {
      return isObjectLike$2(value) && getTag$2(value) == mapTag$1;
    }

    var _baseIsMap = baseIsMap$1;

    var baseIsMap = _baseIsMap,
        baseUnary$1 = _baseUnary,
        nodeUtil$1 = _nodeUtilExports;

    /* Node.js helper references. */
    var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;

    var isMap_1 = isMap$1;

    var getTag$1 = _getTag,
        isObjectLike$1 = isObjectLike_1;

    /** `Object#toString` result references. */
    var setTag$1 = '[object Set]';

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet$1(value) {
      return isObjectLike$1(value) && getTag$1(value) == setTag$1;
    }

    var _baseIsSet = baseIsSet$1;

    var baseIsSet = _baseIsSet,
        baseUnary = _baseUnary,
        nodeUtil = _nodeUtilExports;

    /* Node.js helper references. */
    var nodeIsSet = nodeUtil && nodeUtil.isSet;

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    var isSet_1 = isSet$1;

    var Stack = _Stack,
        arrayEach$1 = _arrayEach,
        assignValue = _assignValue,
        baseAssign = _baseAssign,
        baseAssignIn = _baseAssignIn,
        cloneBuffer = _cloneBufferExports,
        copyArray = _copyArray,
        copySymbols = _copySymbols,
        copySymbolsIn = _copySymbolsIn,
        getAllKeys = _getAllKeys,
        getAllKeysIn$1 = _getAllKeysIn,
        getTag = _getTag,
        initCloneArray = _initCloneArray,
        initCloneByTag = _initCloneByTag,
        initCloneObject = _initCloneObject,
        isArray$1 = isArray_1,
        isBuffer$1 = isBufferExports,
        isMap = isMap_1,
        isObject$1 = isObject_1,
        isSet = isSet_1,
        keys = keys_1,
        keysIn$1 = keysIn_1;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$1 = 1,
        CLONE_FLAT_FLAG$1 = 2,
        CLONE_SYMBOLS_FLAG$1 = 4;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag$1 = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    cloneableTags[boolTag] = cloneableTags[dateTag] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag] =
    cloneableTags[numberTag] = cloneableTags[objectTag$1] =
    cloneableTags[regexpTag] = cloneableTags[setTag] =
    cloneableTags[stringTag] = cloneableTags[symbolTag] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone$1(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG$1,
          isFlat = bitmask & CLONE_FLAT_FLAG$1,
          isFull = bitmask & CLONE_SYMBOLS_FLAG$1;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject$1(value)) {
        return value;
      }
      var isArr = isArray$1(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer$1(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag$1 || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone$1(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone$1(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn$1 : getAllKeys)
        : (isFlat ? keysIn$1 : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach$1(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone$1(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    var _baseClone = baseClone$1;

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */

    function last$1(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    var last_1 = last$1;

    var baseGet = _baseGet,
        baseSlice = _baseSlice;

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent$1(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    var _parent = parent$1;

    var castPath$1 = _castPath,
        last = last_1,
        parent = _parent,
        toKey = _toKey;

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset$1(object, path) {
      path = castPath$1(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    var _baseUnset = baseUnset$1;

    var baseGetTag = _baseGetTag,
        getPrototype$1 = _getPrototype,
        isObjectLike = isObjectLike_1;

    /** `Object#toString` result references. */
    var objectTag = '[object Object]';

    /** Used for built-in method references. */
    var funcProto = Function.prototype,
        objectProto$1 = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject$1(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype$1(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty$1.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    var isPlainObject_1 = isPlainObject$1;

    var isPlainObject = isPlainObject_1;

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone$1(value) {
      return isPlainObject(value) ? undefined : value;
    }

    var _customOmitClone = customOmitClone$1;

    var baseFlatten = _baseFlatten;

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten$1(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    var flatten_1 = flatten$1;

    var flatten = flatten_1,
        overRest = _overRest,
        setToString = _setToString;

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest$1(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    var _flatRest = flatRest$1;

    var arrayMap = _arrayMap,
        baseClone = _baseClone,
        baseUnset = _baseUnset,
        castPath = _castPath,
        copyObject = _copyObject,
        customOmitClone = _customOmitClone,
        flatRest = _flatRest,
        getAllKeysIn = _getAllKeysIn;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    var omit_1 = omit;

    var baseRest = _baseRest,
        eq = eq_1,
        isIterateeCall = _isIterateeCall,
        keysIn = keysIn_1;

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    var defaults_1 = defaults;

    var arrayEach = _arrayEach,
        baseCreate = _baseCreate,
        baseForOwn$1 = _baseForOwn,
        baseIteratee$1 = _baseIteratee,
        getPrototype = _getPrototype,
        isArray = isArray_1,
        isBuffer = isBufferExports,
        isFunction = isFunction_1,
        isObject = isObject_1,
        isTypedArray = isTypedArray_1;

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = baseIteratee$1(iteratee);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn$1)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    var transform_1 = transform;

    var baseAssignValue = _baseAssignValue,
        baseForOwn = _baseForOwn,
        baseIteratee = _baseIteratee;

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = baseIteratee(iteratee);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    var mapValues_1 = mapValues;

    var accessors = {};

    var _interopRequireDefault$5 = interopRequireDefaultExports.default;
    Object.defineProperty(accessors, "__esModule", {
      value: true
    });
    accessors.accessor = accessor;
    accessors.wrapAccessor = void 0;
    var _typeof2$1 = _interopRequireDefault$5(_typeofExports);
    /**
     * Retrieve via an accessor-like property
     *
     *    accessor(obj, 'name')   // => retrieves obj['name']
     *    accessor(data, func)    // => retrieves func(data)
     *    ... otherwise null
     */
    function accessor(data, field) {
      var value = null;
      if (typeof field === 'function') value = field(data);else if (typeof field === 'string' && (0, _typeof2$1.default)(data) === 'object' && data != null && field in data) value = data[field];
      return value;
    }
    accessors.wrapAccessor = function wrapAccessor(acc) {
      return function (data) {
        return accessor(data, acc);
      };
    };

    var _interopRequireDefault$4 = interopRequireDefaultExports.default;
    Object.defineProperty(Calendar$1, "__esModule", {
      value: true
    });
    Calendar$1.default = void 0;
    var _objectSpread2 = _interopRequireDefault$4(objectSpread2Exports);
    var _objectWithoutProperties2 = _interopRequireDefault$4(objectWithoutPropertiesExports);
    var _typeof2 = _interopRequireDefault$4(_typeofExports);
    var _classCallCheck2 = _interopRequireDefault$4(classCallCheckExports);
    var _createClass2 = _interopRequireDefault$4(createClassExports);
    var _callSuper2 = _interopRequireDefault$4(callSuperExports);
    var _inherits2 = _interopRequireDefault$4(inheritsExports);
    var _slicedToArray2$3 = _interopRequireDefault$4(slicedToArrayExports);
    var _react = _interopRequireDefault$4(React__default.default);
    var _uncontrollable = cjs$1;
    var _clsx = _interopRequireDefault$4(clsxExports);
    var _helpers = helpers;
    var _constants = constants;
    var _localizer$6 = localizer$1;
    var _messages = _interopRequireDefault$4(messages$1);
    var _move = _interopRequireDefault$4(move);
    var _Views = _interopRequireDefault$4(Views);
    var _Toolbar = _interopRequireDefault$4(Toolbar$1);
    var _NoopWrapper = _interopRequireDefault$4(NoopWrapper$1);
    var _omit = _interopRequireDefault$4(omit_1);
    var _defaults = _interopRequireDefault$4(defaults_1);
    var _transform = _interopRequireDefault$4(transform_1);
    var _mapValues = _interopRequireDefault$4(mapValues_1);
    var _accessors = accessors;
    var _excluded = ["view", "date", "getNow", "onNavigate"],
      _excluded2 = ["view", "toolbar", "events", "backgroundEvents", "style", "className", "elementProps", "date", "getNow", "length", "showMultiDayTimes", "onShowMore", "doShowMoreDrillDown", "components", "formats", "messages", "culture"];
    function viewNames(_views) {
      if (Array.isArray(_views)) {
        return _views;
      }
      var views = [];
      for (var _i = 0, _Object$entries = Object.entries(_views); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = (0, _slicedToArray2$3.default)(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
        if (value) {
          views.push(key);
        }
      }
      return views;
    }
    function isValidView(view, _ref) {
      var _views = _ref.views;
      var names = viewNames(_views);
      return names.indexOf(view) !== -1;
    }
    var Calendar = /*#__PURE__*/function (_React$Component) {
      function Calendar() {
        var _this;
        (0, _classCallCheck2.default)(this, Calendar);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = (0, _callSuper2.default)(this, Calendar, [].concat(_args));
        _this.getViews = function () {
          var views = _this.props.views;
          if (Array.isArray(views)) {
            return (0, _transform.default)(views, function (obj, name) {
              return obj[name] = _Views.default[name];
            }, {});
          }
          if ((0, _typeof2.default)(views) === 'object') {
            return (0, _mapValues.default)(views, function (value, key) {
              if (value === true) {
                return _Views.default[key];
              }
              return value;
            });
          }
          return _Views.default;
        };
        _this.getView = function () {
          var views = _this.getViews();
          return views[_this.props.view];
        };
        _this.getDrilldownView = function (date) {
          var _this$props = _this.props,
            view = _this$props.view,
            drilldownView = _this$props.drilldownView,
            getDrilldownView = _this$props.getDrilldownView;
          if (!getDrilldownView) return drilldownView;
          return getDrilldownView(date, view, Object.keys(_this.getViews()));
        };
        /**
         *
         * @param date
         * @param viewComponent
         * @param {'month'|'week'|'work_week'|'day'|'agenda'} [view] - optional
         * parameter. It appears when range change on view changing. It could be handy
         * when you need to have both: range and view type at once, i.e. for manage rbc
         * state via url
         */
        _this.handleRangeChange = function (date, viewComponent, view) {
          var _this$props2 = _this.props,
            onRangeChange = _this$props2.onRangeChange,
            localizer = _this$props2.localizer;
          if (onRangeChange) {
            if (viewComponent.range) {
              onRangeChange(viewComponent.range(date, {
                localizer: localizer
              }), view);
            } else {
              {
                console.error('onRangeChange prop not supported for this view');
              }
            }
          }
        };
        _this.handleNavigate = function (action, newDate) {
          var _this$props3 = _this.props,
            view = _this$props3.view,
            date = _this$props3.date,
            getNow = _this$props3.getNow,
            onNavigate = _this$props3.onNavigate,
            props = (0, _objectWithoutProperties2.default)(_this$props3, _excluded);
          var ViewComponent = _this.getView();
          var today = getNow();
          date = (0, _move.default)(ViewComponent, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
            action: action,
            date: newDate || date || today,
            today: today
          }));
          onNavigate(date, view, action);
          _this.handleRangeChange(date, ViewComponent);
        };
        _this.handleViewChange = function (view) {
          if (view !== _this.props.view && isValidView(view, _this.props)) {
            _this.props.onView(view);
          }
          var views = _this.getViews();
          _this.handleRangeChange(_this.props.date || _this.props.getNow(), views[view], view);
        };
        _this.handleSelectEvent = function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          (0, _helpers.notify)(_this.props.onSelectEvent, args);
        };
        _this.handleDoubleClickEvent = function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          (0, _helpers.notify)(_this.props.onDoubleClickEvent, args);
        };
        _this.handleKeyPressEvent = function () {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          (0, _helpers.notify)(_this.props.onKeyPressEvent, args);
        };
        _this.handleSelectSlot = function (slotInfo) {
          (0, _helpers.notify)(_this.props.onSelectSlot, slotInfo);
        };
        _this.handleDrillDown = function (date, view) {
          var onDrillDown = _this.props.onDrillDown;
          if (onDrillDown) {
            onDrillDown(date, view, _this.drilldownView);
            return;
          }
          if (view) _this.handleViewChange(view);
          _this.handleNavigate(_constants.navigate.DATE, date);
        };
        _this.state = {
          context: Calendar.getContext(_this.props)
        };
        return _this;
      }
      (0, _inherits2.default)(Calendar, _React$Component);
      return (0, _createClass2.default)(Calendar, [{
        key: "render",
        value: function render() {
          var _this$props4 = this.props,
            view = _this$props4.view,
            toolbar = _this$props4.toolbar,
            events = _this$props4.events,
            backgroundEvents = _this$props4.backgroundEvents,
            style = _this$props4.style,
            className = _this$props4.className,
            elementProps = _this$props4.elementProps,
            current = _this$props4.date,
            getNow = _this$props4.getNow,
            length = _this$props4.length,
            showMultiDayTimes = _this$props4.showMultiDayTimes,
            onShowMore = _this$props4.onShowMore,
            doShowMoreDrillDown = _this$props4.doShowMoreDrillDown;
            _this$props4.components;
            _this$props4.formats;
            _this$props4.messages;
            _this$props4.culture;
            var props = (0, _objectWithoutProperties2.default)(_this$props4, _excluded2);
          current = current || getNow();
          var View = this.getView();
          var _this$state$context = this.state.context,
            accessors = _this$state$context.accessors,
            components = _this$state$context.components,
            getters = _this$state$context.getters,
            localizer = _this$state$context.localizer,
            viewNames = _this$state$context.viewNames;
          var CalToolbar = components.toolbar || _Toolbar.default;
          var label = View.title(current, {
            localizer: localizer,
            length: length
          });
          return /*#__PURE__*/_react.default.createElement("div", Object.assign({}, elementProps, {
            className: (0, _clsx.default)(className, 'rbc-calendar', props.rtl && 'rbc-rtl'),
            style: style
          }), toolbar && /*#__PURE__*/_react.default.createElement(CalToolbar, {
            date: current,
            view: view,
            views: viewNames,
            label: label,
            onView: this.handleViewChange,
            onNavigate: this.handleNavigate,
            localizer: localizer
          }), /*#__PURE__*/_react.default.createElement(View, Object.assign({}, props, {
            events: events,
            backgroundEvents: backgroundEvents,
            date: current,
            getNow: getNow,
            length: length,
            localizer: localizer,
            getters: getters,
            components: components,
            accessors: accessors,
            showMultiDayTimes: showMultiDayTimes,
            getDrilldownView: this.getDrilldownView,
            onNavigate: this.handleNavigate,
            onDrillDown: this.handleDrillDown,
            onSelectEvent: this.handleSelectEvent,
            onDoubleClickEvent: this.handleDoubleClickEvent,
            onKeyPressEvent: this.handleKeyPressEvent,
            onSelectSlot: this.handleSelectSlot,
            onShowMore: onShowMore,
            doShowMoreDrillDown: doShowMoreDrillDown
          })));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps) {
          return {
            context: Calendar.getContext(nextProps)
          };
        }
      }, {
        key: "getContext",
        value: function getContext(_ref2) {
          var startAccessor = _ref2.startAccessor,
            endAccessor = _ref2.endAccessor,
            allDayAccessor = _ref2.allDayAccessor,
            tooltipAccessor = _ref2.tooltipAccessor,
            titleAccessor = _ref2.titleAccessor,
            resourceAccessor = _ref2.resourceAccessor,
            resourceIdAccessor = _ref2.resourceIdAccessor,
            resourceTitleAccessor = _ref2.resourceTitleAccessor,
            eventPropGetter = _ref2.eventPropGetter,
            backgroundEventPropGetter = _ref2.backgroundEventPropGetter,
            slotPropGetter = _ref2.slotPropGetter,
            slotGroupPropGetter = _ref2.slotGroupPropGetter,
            dayPropGetter = _ref2.dayPropGetter,
            view = _ref2.view,
            views = _ref2.views,
            localizer = _ref2.localizer,
            culture = _ref2.culture,
            _ref2$messages = _ref2.messages,
            messages = _ref2$messages === void 0 ? {} : _ref2$messages,
            _ref2$components = _ref2.components,
            components = _ref2$components === void 0 ? {} : _ref2$components,
            _ref2$formats = _ref2.formats,
            formats = _ref2$formats === void 0 ? {} : _ref2$formats;
          var names = viewNames(views);
          var msgs = (0, _messages.default)(messages);
          return {
            viewNames: names,
            localizer: (0, _localizer$6.mergeWithDefaults)(localizer, culture, formats, msgs),
            getters: {
              eventProp: function eventProp() {
                return eventPropGetter && eventPropGetter.apply(void 0, arguments) || {};
              },
              backgroundEventProp: function backgroundEventProp() {
                return backgroundEventPropGetter && backgroundEventPropGetter.apply(void 0, arguments) || {};
              },
              slotProp: function slotProp() {
                return slotPropGetter && slotPropGetter.apply(void 0, arguments) || {};
              },
              slotGroupProp: function slotGroupProp() {
                return slotGroupPropGetter && slotGroupPropGetter.apply(void 0, arguments) || {};
              },
              dayProp: function dayProp() {
                return dayPropGetter && dayPropGetter.apply(void 0, arguments) || {};
              }
            },
            components: (0, _defaults.default)(components[view] || {}, (0, _omit.default)(components, names), {
              eventWrapper: _NoopWrapper.default,
              backgroundEventWrapper: _NoopWrapper.default,
              eventContainerWrapper: _NoopWrapper.default,
              dateCellWrapper: _NoopWrapper.default,
              weekWrapper: _NoopWrapper.default,
              timeSlotWrapper: _NoopWrapper.default,
              timeGutterWrapper: _NoopWrapper.default
            }),
            accessors: {
              start: (0, _accessors.wrapAccessor)(startAccessor),
              end: (0, _accessors.wrapAccessor)(endAccessor),
              allDay: (0, _accessors.wrapAccessor)(allDayAccessor),
              tooltip: (0, _accessors.wrapAccessor)(tooltipAccessor),
              title: (0, _accessors.wrapAccessor)(titleAccessor),
              resource: (0, _accessors.wrapAccessor)(resourceAccessor),
              resourceId: (0, _accessors.wrapAccessor)(resourceIdAccessor),
              resourceTitle: (0, _accessors.wrapAccessor)(resourceTitleAccessor)
            }
          };
        }
      }]);
    }(_react.default.Component);
    Calendar.defaultProps = {
      events: [],
      backgroundEvents: [],
      elementProps: {},
      popup: false,
      toolbar: true,
      view: _constants.views.MONTH,
      views: [_constants.views.MONTH, _constants.views.WEEK, _constants.views.DAY, _constants.views.AGENDA],
      step: 30,
      length: 30,
      allDayMaxRows: Infinity,
      doShowMoreDrillDown: true,
      drilldownView: _constants.views.DAY,
      titleAccessor: 'title',
      tooltipAccessor: 'title',
      allDayAccessor: 'allDay',
      startAccessor: 'start',
      endAccessor: 'end',
      resourceAccessor: 'resourceId',
      resourceIdAccessor: 'id',
      resourceTitleAccessor: 'title',
      longPressThreshold: 250,
      getNow: function getNow() {
        return new Date();
      },
      dayLayoutAlgorithm: 'overlap'
    };
    Calendar$1.default = (0, _uncontrollable.uncontrollable)(Calendar, {
      view: 'onView',
      date: 'onNavigate',
      selected: 'onSelectEvent'
    });

    var moment$2 = {};

    var _interopRequireDefault$3 = interopRequireDefaultExports.default;
    Object.defineProperty(moment$2, "__esModule", {
      value: true
    });
    moment$2.default = _default$4;
    moment$2.formats = void 0;
    var _slicedToArray2$2 = _interopRequireDefault$3(slicedToArrayExports);
    var _localizer$5 = localizer$1;
    var weekRangeFormat$5 = function weekRangeFormat(_ref, culture, local) {
      var start = _ref.start,
        end = _ref.end;
      return local.format(start, 'MMMM DD', culture) + ' – ' +
      // updated to use this localizer 'eq()' method
      local.format(end, local.eq(start, end, 'month') ? 'DD' : 'MMMM DD', culture);
    };
    var dateRangeFormat$5 = function dateRangeFormat(_ref2, culture, local) {
      var start = _ref2.start,
        end = _ref2.end;
      return local.format(start, 'L', culture) + ' – ' + local.format(end, 'L', culture);
    };
    var timeRangeFormat$5 = function timeRangeFormat(_ref3, culture, local) {
      var start = _ref3.start,
        end = _ref3.end;
      return local.format(start, 'LT', culture) + ' – ' + local.format(end, 'LT', culture);
    };
    var timeRangeStartFormat$5 = function timeRangeStartFormat(_ref4, culture, local) {
      var start = _ref4.start;
      return local.format(start, 'LT', culture) + ' – ';
    };
    var timeRangeEndFormat$5 = function timeRangeEndFormat(_ref5, culture, local) {
      var end = _ref5.end;
      return ' – ' + local.format(end, 'LT', culture);
    };
    var formats$5 = moment$2.formats = {
      dateFormat: 'DD',
      dayFormat: 'DD ddd',
      weekdayFormat: 'ddd',
      selectRangeFormat: timeRangeFormat$5,
      eventTimeRangeFormat: timeRangeFormat$5,
      eventTimeRangeStartFormat: timeRangeStartFormat$5,
      eventTimeRangeEndFormat: timeRangeEndFormat$5,
      timeGutterFormat: 'LT',
      monthHeaderFormat: 'MMMM YYYY',
      dayHeaderFormat: 'dddd MMM DD',
      dayRangeHeaderFormat: weekRangeFormat$5,
      agendaHeaderFormat: dateRangeFormat$5,
      agendaDateFormat: 'ddd MMM DD',
      agendaTimeFormat: 'LT',
      agendaTimeRangeFormat: timeRangeFormat$5
    };
    function fixUnit$2(unit) {
      var datePart = unit ? unit.toLowerCase() : unit;
      if (datePart === 'FullYear') {
        datePart = 'year';
      } else if (!datePart) {
        datePart = undefined;
      }
      return datePart;
    }
    function _default$4(moment) {
      var locale = function locale(m, c) {
        return c ? m.locale(c) : m;
      };
      function getTimezoneOffset(date) {
        // ensures this gets cast to timezone
        return moment(date).toDate().getTimezoneOffset();
      }
      function getDstOffset(start, end) {
        var _st$_z$name, _st$_z;
        // convert to moment, in case
        // Calculate the offset in the timezone of the Events (local)
        // not in the timezone of the calendar (moment.tz)
        var st = moment(start).local();
        var ed = moment(end).local();
        // if not using moment timezone
        if (!moment.tz) {
          return st.toDate().getTimezoneOffset() - ed.toDate().getTimezoneOffset();
        }
        /**
         * If using moment-timezone, and a timezone has been applied, then
         * use this to get the proper timezone offset, otherwise default
         * the timezone to the browser local
         */
        var tzName = (_st$_z$name = st === null || st === void 0 ? void 0 : (_st$_z = st._z) === null || _st$_z === void 0 ? void 0 : _st$_z.name) !== null && _st$_z$name !== void 0 ? _st$_z$name : moment.tz.guess();
        var startOffset = moment.tz.zone(tzName).utcOffset(+st);
        var endOffset = moment.tz.zone(tzName).utcOffset(+ed);
        return startOffset - endOffset;
      }
      function getDayStartDstOffset(start) {
        var dayStart = moment(start).startOf('day');
        return getDstOffset(dayStart, start);
      }

      /*** BEGIN localized date arithmetic methods with moment ***/
      function defineComparators(a, b, unit) {
        var datePart = fixUnit$2(unit);
        var dtA = datePart ? moment(a).startOf(datePart) : moment(a);
        var dtB = datePart ? moment(b).startOf(datePart) : moment(b);
        return [dtA, dtB, datePart];
      }
      function startOf() {
        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var unit = arguments.length > 1 ? arguments[1] : undefined;
        var datePart = fixUnit$2(unit);
        if (datePart) {
          return moment(date).startOf(datePart).toDate();
        }
        return moment(date).toDate();
      }
      function endOf() {
        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var unit = arguments.length > 1 ? arguments[1] : undefined;
        var datePart = fixUnit$2(unit);
        if (datePart) {
          return moment(date).endOf(datePart).toDate();
        }
        return moment(date).toDate();
      }

      // moment comparison operations *always* convert both sides to moment objects
      // prior to running the comparisons
      function eq(a, b, unit) {
        var _defineComparators = defineComparators(a, b, unit),
          _defineComparators2 = (0, _slicedToArray2$2.default)(_defineComparators, 3),
          dtA = _defineComparators2[0],
          dtB = _defineComparators2[1],
          datePart = _defineComparators2[2];
        return dtA.isSame(dtB, datePart);
      }
      function neq(a, b, unit) {
        return !eq(a, b, unit);
      }
      function gt(a, b, unit) {
        var _defineComparators3 = defineComparators(a, b, unit),
          _defineComparators4 = (0, _slicedToArray2$2.default)(_defineComparators3, 3),
          dtA = _defineComparators4[0],
          dtB = _defineComparators4[1],
          datePart = _defineComparators4[2];
        return dtA.isAfter(dtB, datePart);
      }
      function lt(a, b, unit) {
        var _defineComparators5 = defineComparators(a, b, unit),
          _defineComparators6 = (0, _slicedToArray2$2.default)(_defineComparators5, 3),
          dtA = _defineComparators6[0],
          dtB = _defineComparators6[1],
          datePart = _defineComparators6[2];
        return dtA.isBefore(dtB, datePart);
      }
      function gte(a, b, unit) {
        var _defineComparators7 = defineComparators(a, b, unit),
          _defineComparators8 = (0, _slicedToArray2$2.default)(_defineComparators7, 3),
          dtA = _defineComparators8[0],
          dtB = _defineComparators8[1],
          datePart = _defineComparators8[2];
        return dtA.isSameOrBefore(dtB, datePart);
      }
      function lte(a, b, unit) {
        var _defineComparators9 = defineComparators(a, b, unit),
          _defineComparators10 = (0, _slicedToArray2$2.default)(_defineComparators9, 3),
          dtA = _defineComparators10[0],
          dtB = _defineComparators10[1],
          datePart = _defineComparators10[2];
        return dtA.isSameOrBefore(dtB, datePart);
      }
      function inRange(day, min, max) {
        var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'day';
        var datePart = fixUnit$2(unit);
        var mDay = moment(day);
        var mMin = moment(min);
        var mMax = moment(max);
        return mDay.isBetween(mMin, mMax, datePart, '[]');
      }
      function min(dateA, dateB) {
        var dtA = moment(dateA);
        var dtB = moment(dateB);
        var minDt = moment.min(dtA, dtB);
        return minDt.toDate();
      }
      function max(dateA, dateB) {
        var dtA = moment(dateA);
        var dtB = moment(dateB);
        var maxDt = moment.max(dtA, dtB);
        return maxDt.toDate();
      }
      function merge(date, time) {
        if (!date && !time) return null;
        var tm = moment(time).format('HH:mm:ss');
        var dt = moment(date).startOf('day').format('MM/DD/YYYY');
        // We do it this way to avoid issues when timezone switching
        return moment("".concat(dt, " ").concat(tm), 'MM/DD/YYYY HH:mm:ss').toDate();
      }
      function add(date, adder, unit) {
        var datePart = fixUnit$2(unit);
        return moment(date).add(adder, datePart).toDate();
      }
      function range(start, end) {
        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';
        var datePart = fixUnit$2(unit);
        // because the add method will put these in tz, we have to start that way
        var current = moment(start).toDate();
        var days = [];
        while (lte(current, end)) {
          days.push(current);
          current = add(current, 1, datePart);
        }
        return days;
      }
      function ceil(date, unit) {
        var datePart = fixUnit$2(unit);
        var floor = startOf(date, datePart);
        return eq(floor, date) ? floor : add(floor, 1, datePart);
      }
      function diff(a, b) {
        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';
        var datePart = fixUnit$2(unit);
        // don't use 'defineComparators' here, as we don't want to mutate the values
        var dtA = moment(a);
        var dtB = moment(b);
        return dtB.diff(dtA, datePart);
      }
      function minutes(date) {
        var dt = moment(date);
        return dt.minutes();
      }
      function firstOfWeek(culture) {
        var data = culture ? moment.localeData(culture) : moment.localeData();
        return data ? data.firstDayOfWeek() : 0;
      }
      function firstVisibleDay(date) {
        return moment(date).startOf('month').startOf('week').toDate();
      }
      function lastVisibleDay(date) {
        return moment(date).endOf('month').endOf('week').toDate();
      }
      function visibleDays(date) {
        var current = firstVisibleDay(date);
        var last = lastVisibleDay(date);
        var days = [];
        while (lte(current, last)) {
          days.push(current);
          current = add(current, 1, 'd');
        }
        return days;
      }
      /*** END localized date arithmetic methods with moment ***/

      /**
       * Moved from TimeSlots.js, this method overrides the method of the same name
       * in the localizer.js, using moment to construct the js Date
       * @param {Date} dt - date to start with
       * @param {Number} minutesFromMidnight
       * @param {Number} offset
       * @returns {Date}
       */
      function getSlotDate(dt, minutesFromMidnight, offset) {
        return moment(dt).startOf('day').minute(minutesFromMidnight + offset).toDate();
      }

      // moment will automatically handle DST differences in it's calculations
      function getTotalMin(start, end) {
        return diff(start, end, 'minutes');
      }
      function getMinutesFromMidnight(start) {
        var dayStart = moment(start).startOf('day');
        var day = moment(start);
        return day.diff(dayStart, 'minutes') + getDayStartDstOffset(start);
      }

      // These two are used by DateSlotMetrics
      function continuesPrior(start, first) {
        var mStart = moment(start);
        var mFirst = moment(first);
        return mStart.isBefore(mFirst, 'day');
      }
      function continuesAfter(start, end, last) {
        var mEnd = moment(end);
        var mLast = moment(last);
        return mEnd.isSameOrAfter(mLast, 'minutes');
      }
      function daySpan(start, end) {
        var mStart = moment(start);
        var mEnd = moment(end);
        var dur = moment.duration(mEnd.diff(mStart));
        return dur.days();
      }

      // These two are used by eventLevels
      function sortEvents(_ref6) {
        var _ref6$evtA = _ref6.evtA,
          aStart = _ref6$evtA.start,
          aEnd = _ref6$evtA.end,
          aAllDay = _ref6$evtA.allDay,
          _ref6$evtB = _ref6.evtB,
          bStart = _ref6$evtB.start,
          bEnd = _ref6$evtB.end,
          bAllDay = _ref6$evtB.allDay;
        var startSort = +startOf(aStart, 'day') - +startOf(bStart, 'day');
        var durA = daySpan(aStart, aEnd);
        var durB = daySpan(bStart, bEnd);
        return startSort ||
        // sort by start Day first
        durB - durA ||
        // events spanning multiple days go first
        !!bAllDay - !!aAllDay ||
        // then allDay single day events
        +aStart - +bStart ||
        // then sort by start time *don't need moment conversion here
        +aEnd - +bEnd // then sort by end time *don't need moment conversion here either
        ;
      }
      function inEventRange(_ref7) {
        var _ref7$event = _ref7.event,
          start = _ref7$event.start,
          end = _ref7$event.end,
          _ref7$range = _ref7.range,
          rangeStart = _ref7$range.start,
          rangeEnd = _ref7$range.end;
        var startOfDay = moment(start).startOf('day');
        var eEnd = moment(end);
        var rStart = moment(rangeStart);
        var rEnd = moment(rangeEnd);
        var startsBeforeEnd = startOfDay.isSameOrBefore(rEnd, 'day');
        // when the event is zero duration we need to handle a bit differently
        var sameMin = !startOfDay.isSame(eEnd, 'minutes');
        var endsAfterStart = sameMin ? eEnd.isAfter(rStart, 'minutes') : eEnd.isSameOrAfter(rStart, 'minutes');
        return startsBeforeEnd && endsAfterStart;
      }
      function isSameDate(date1, date2) {
        var dt = moment(date1);
        var dt2 = moment(date2);
        return dt.isSame(dt2, 'day');
      }

      /**
       * This method, called once in the localizer constructor, is used by eventLevels
       * 'eventSegments()' to assist in determining the 'span' of the event in the display,
       * specifically when using a timezone that is greater than the browser native timezone.
       * @returns number
       */
      function browserTZOffset() {
        /**
         * Date.prototype.getTimezoneOffset horrifically flips the positive/negative from
         * what you see in it's string, so we have to jump through some hoops to get a value
         * we can actually compare.
         */
        var dt = new Date();
        var neg = /-/.test(dt.toString()) ? '-' : '';
        var dtOffset = dt.getTimezoneOffset();
        var comparator = Number("".concat(neg).concat(Math.abs(dtOffset)));
        // moment correctly provides positive/negative offset, as expected
        var mtOffset = moment().utcOffset();
        return mtOffset > comparator ? 1 : 0;
      }
      return new _localizer$5.DateLocalizer({
        formats: formats$5,
        firstOfWeek: firstOfWeek,
        firstVisibleDay: firstVisibleDay,
        lastVisibleDay: lastVisibleDay,
        visibleDays: visibleDays,
        format: function format(value, _format, culture) {
          return locale(moment(value), culture).format(_format);
        },
        lt: lt,
        lte: lte,
        gt: gt,
        gte: gte,
        eq: eq,
        neq: neq,
        merge: merge,
        inRange: inRange,
        startOf: startOf,
        endOf: endOf,
        range: range,
        add: add,
        diff: diff,
        ceil: ceil,
        min: min,
        max: max,
        minutes: minutes,
        getSlotDate: getSlotDate,
        getTimezoneOffset: getTimezoneOffset,
        getDstOffset: getDstOffset,
        getTotalMin: getTotalMin,
        getMinutesFromMidnight: getMinutesFromMidnight,
        continuesPrior: continuesPrior,
        continuesAfter: continuesAfter,
        sortEvents: sortEvents,
        inEventRange: inEventRange,
        isSameDate: isSameDate,
        daySpan: daySpan,
        browserTZOffset: browserTZOffset
      });
    }

    var luxon = {};

    var _interopRequireDefault$2 = interopRequireDefaultExports.default;
    Object.defineProperty(luxon, "__esModule", {
      value: true
    });
    luxon.default = _default$3;
    luxon.formats = void 0;
    var _defineProperty2 = _interopRequireDefault$2(definePropertyExports);
    var _slicedToArray2$1 = _interopRequireDefault$2(slicedToArrayExports);
    var _localizer$4 = localizer$1;
    function pluralizeUnit(unit) {
      return /s$/.test(unit) ? unit : unit + 's';
    }
    var weekRangeFormat$4 = function weekRangeFormat(_ref, culture, local) {
      var start = _ref.start,
        end = _ref.end;
      return local.format(start, 'MMMM dd', culture) + ' – ' +
      // updated to use this localizer 'eq()' method
      local.format(end, local.eq(start, end, 'month') ? 'dd' : 'MMMM dd', culture);
    };
    var dateRangeFormat$4 = function dateRangeFormat(_ref2, culture, local) {
      var start = _ref2.start,
        end = _ref2.end;
      return local.format(start, 'D', culture) + ' – ' + local.format(end, 'D', culture);
    };
    var timeRangeFormat$4 = function timeRangeFormat(_ref3, culture, local) {
      var start = _ref3.start,
        end = _ref3.end;
      return local.format(start, 't', culture) + ' – ' + local.format(end, 't', culture);
    };
    var timeRangeStartFormat$4 = function timeRangeStartFormat(_ref4, culture, local) {
      var start = _ref4.start;
      return local.format(start, 't', culture) + ' – ';
    };
    var timeRangeEndFormat$4 = function timeRangeEndFormat(_ref5, culture, local) {
      var end = _ref5.end;
      return ' – ' + local.format(end, 't', culture);
    };
    var formats$4 = luxon.formats = {
      dateFormat: 'dd',
      dayFormat: 'dd EEE',
      weekdayFormat: 'EEE',
      selectRangeFormat: timeRangeFormat$4,
      eventTimeRangeFormat: timeRangeFormat$4,
      eventTimeRangeStartFormat: timeRangeStartFormat$4,
      eventTimeRangeEndFormat: timeRangeEndFormat$4,
      timeGutterFormat: 't',
      monthHeaderFormat: 'MMMM yyyy',
      dayHeaderFormat: 'EEEE MMM dd',
      dayRangeHeaderFormat: weekRangeFormat$4,
      agendaHeaderFormat: dateRangeFormat$4,
      agendaDateFormat: 'EEE MMM dd',
      agendaTimeFormat: 't',
      agendaTimeRangeFormat: timeRangeFormat$4
    };
    function fixUnit$1(unit) {
      var datePart = unit ? pluralizeUnit(unit.toLowerCase()) : unit;
      if (datePart === 'FullYear') {
        datePart = 'year';
      } else if (!datePart) {
        datePart = undefined;
      }
      return datePart;
    }

    // Luxon does not currently have weekInfo by culture
    // Luxon uses 1 based values for month and weekday
    // So we default to Sunday (7)
    function _default$3(DateTime) {
      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref6$firstDayOfWeek = _ref6.firstDayOfWeek,
        firstDayOfWeek = _ref6$firstDayOfWeek === void 0 ? 7 : _ref6$firstDayOfWeek;
      function formatDate(value, format) {
        return DateTime.fromJSDate(value).toFormat(format);
      }
      function formatDateWithCulture(value, culture, format) {
        return DateTime.fromJSDate(value).setLocale(culture).toFormat(format);
      }

      /*** BEGIN localized date arithmetic methods with Luxon ***/
      function defineComparators(a, b, unit) {
        var datePart = fixUnit$1(unit);
        var dtA = datePart ? DateTime.fromJSDate(a).startOf(datePart) : DateTime.fromJSDate(a);
        var dtB = datePart ? DateTime.fromJSDate(b).startOf(datePart) : DateTime.fromJSDate(b);
        return [dtA, dtB, datePart];
      }

      // Since Luxon (and current Intl API) has no support
      // for culture based weekInfo, we need to handle
      // the start of the week differently
      // depending on locale, the firstDayOfWeek could also be Saturday, Sunday or Monday
      function startOfDTWeek(dtObj) {
        var weekday = dtObj.weekday;
        if (weekday === firstDayOfWeek) {
          return dtObj.startOf('day'); // already beginning of week
        } else if (firstDayOfWeek === 1) {
          return dtObj.startOf('week'); // fow is Monday, which is Luxon default
        }
        var diff = firstDayOfWeek === 7 ? weekday : weekday + (7 - firstDayOfWeek);
        return dtObj.minus({
          day: diff
        }).startOf('day');
      }
      function endOfDTWeek(dtObj) {
        var weekday = dtObj.weekday;
        var eow = firstDayOfWeek === 1 ? 7 : firstDayOfWeek - 1;
        if (weekday === eow) {
          return dtObj.endOf('day'); // already last day of the week
        } else if (firstDayOfWeek === 1) {
          return dtObj.endOf('week'); // use Luxon default (Sunday)
        }
        var fromDate = firstDayOfWeek > eow ? dtObj.plus({
          day: firstDayOfWeek - eow
        }) : dtObj;
        return fromDate.set({
          weekday: eow
        }).endOf('day');
      }

      // This returns a DateTime instance
      function startOfDT() {
        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
        var unit = arguments.length > 1 ? arguments[1] : undefined;
        var datePart = fixUnit$1(unit);
        if (datePart) {
          var dt = DateTime.fromJSDate(date);
          return datePart.includes('week') ? startOfDTWeek(dt) : dt.startOf(datePart);
        }
        return DateTime.fromJSDate(date);
      }
      function firstOfWeek() {
        return firstDayOfWeek;
      }

      // This returns a JS Date from a DateTime instance
      function startOf() {
        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
        var unit = arguments.length > 1 ? arguments[1] : undefined;
        return startOfDT(date, unit).toJSDate();
      }

      // This returns a DateTime instance
      function endOfDT() {
        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
        var unit = arguments.length > 1 ? arguments[1] : undefined;
        var datePart = fixUnit$1(unit);
        if (datePart) {
          var dt = DateTime.fromJSDate(date);
          return datePart.includes('week') ? endOfDTWeek(dt) : dt.endOf(datePart);
        }
        return DateTime.fromJSDate(date);
      }
      function endOf() {
        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
        var unit = arguments.length > 1 ? arguments[1] : undefined;
        return endOfDT(date, unit).toJSDate();
      }
      function eq(a, b, unit) {
        var _defineComparators = defineComparators(a, b, unit),
          _defineComparators2 = (0, _slicedToArray2$1.default)(_defineComparators, 2),
          dtA = _defineComparators2[0],
          dtB = _defineComparators2[1];
        return +dtA == +dtB;
      }
      function neq(a, b, unit) {
        return !eq(a, b, unit);
      }
      function gt(a, b, unit) {
        var _defineComparators3 = defineComparators(a, b, unit),
          _defineComparators4 = (0, _slicedToArray2$1.default)(_defineComparators3, 2),
          dtA = _defineComparators4[0],
          dtB = _defineComparators4[1];
        return +dtA > +dtB;
      }
      function lt(a, b, unit) {
        var _defineComparators5 = defineComparators(a, b, unit),
          _defineComparators6 = (0, _slicedToArray2$1.default)(_defineComparators5, 2),
          dtA = _defineComparators6[0],
          dtB = _defineComparators6[1];
        return +dtA < +dtB;
      }
      function gte(a, b, unit) {
        var _defineComparators7 = defineComparators(a, b, unit),
          _defineComparators8 = (0, _slicedToArray2$1.default)(_defineComparators7, 2),
          dtA = _defineComparators8[0],
          dtB = _defineComparators8[1];
        return +dtA >= +dtB;
      }
      function lte(a, b, unit) {
        var _defineComparators9 = defineComparators(a, b, unit),
          _defineComparators10 = (0, _slicedToArray2$1.default)(_defineComparators9, 2),
          dtA = _defineComparators10[0],
          dtB = _defineComparators10[1];
        return +dtA <= +dtB;
      }
      function inRange(day, min, max) {
        var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'day';
        var datePart = fixUnit$1(unit);
        var mDay = startOfDT(day, datePart);
        var mMin = startOfDT(min, datePart);
        var mMax = startOfDT(max, datePart);
        return +mDay >= +mMin && +mDay <= +mMax;
      }
      function min(dateA, dateB) {
        var dtA = DateTime.fromJSDate(dateA);
        var dtB = DateTime.fromJSDate(dateB);
        var minDt = DateTime.min(dtA, dtB);
        return minDt.toJSDate();
      }
      function max(dateA, dateB) {
        var dtA = DateTime.fromJSDate(dateA);
        var dtB = DateTime.fromJSDate(dateB);
        var maxDt = DateTime.max(dtA, dtB);
        return maxDt.toJSDate();
      }
      function merge(date, time) {
        if (!date && !time) return null;
        var tm = DateTime.fromJSDate(time);
        var dt = startOfDT(date, 'day');
        return dt.set({
          hour: tm.hour,
          minute: tm.minute,
          second: tm.second,
          millisecond: tm.millisecond
        }).toJSDate();
      }
      function add(date, adder, unit) {
        var datePart = fixUnit$1(unit);
        return DateTime.fromJSDate(date).plus((0, _defineProperty2.default)({}, datePart, adder)).toJSDate();
      }
      function range(start, end) {
        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';
        var datePart = fixUnit$1(unit);
        var current = DateTime.fromJSDate(start).toJSDate(); // this is to get it to tz
        var days = [];
        while (lte(current, end)) {
          days.push(current);
          current = add(current, 1, datePart);
        }
        return days;
      }
      function ceil(date, unit) {
        var datePart = fixUnit$1(unit);
        var floor = startOf(date, datePart);
        return eq(floor, date) ? floor : add(floor, 1, datePart);
      }
      function diff(a, b) {
        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';
        var datePart = fixUnit$1(unit);
        // don't use 'defineComparators' here, as we don't want to mutate the values
        var dtA = DateTime.fromJSDate(a);
        var dtB = DateTime.fromJSDate(b);
        return Math.floor(dtB.diff(dtA, datePart, {
          conversionAccuracy: 'longterm'
        }).toObject()[datePart]);
      }
      function firstVisibleDay(date) {
        var startOfMonth = startOfDT(date, 'month');
        return startOfDTWeek(startOfMonth).toJSDate();
      }
      function lastVisibleDay(date) {
        var endOfMonth = endOfDT(date, 'month');
        return endOfDTWeek(endOfMonth).toJSDate();
      }
      function visibleDays(date) {
        var current = firstVisibleDay(date);
        var last = lastVisibleDay(date);
        var days = [];
        while (lte(current, last)) {
          days.push(current);
          current = add(current, 1, 'day');
        }
        return days;
      }
      /*** END localized date arithmetic methods with moment ***/

      /**
       * Moved from TimeSlots.js, this method overrides the method of the same name
       * in the localizer.js, using moment to construct the js Date
       * @param {Date} dt - date to start with
       * @param {Number} minutesFromMidnight
       * @param {Number} offset
       * @returns {Date}
       */
      function getSlotDate(dt, minutesFromMidnight, offset) {
        return startOfDT(dt, 'day').set({
          minutes: minutesFromMidnight + offset
        }).toJSDate();
      }

      // Luxon will automatically handle DST differences in it's calculations
      function getTotalMin(start, end) {
        return diff(start, end, 'minutes');
      }
      function getMinutesFromMidnight(start) {
        var dayStart = startOfDT(start, 'day');
        var day = DateTime.fromJSDate(start);
        return Math.round(day.diff(dayStart, 'minutes', {
          conversionAccuracy: 'longterm'
        }).toObject().minutes);
      }

      // These two are used by DateSlotMetrics
      function continuesPrior(start, first) {
        return lt(start, first);
      }
      function continuesAfter(start, end, last) {
        return gte(end, last);
      }
      function daySpan(start, end) {
        var dtStart = DateTime.fromJSDate(start);
        var dtEnd = DateTime.fromJSDate(end);
        return dtEnd.diff(dtStart).as('days');
      }

      // These two are used by eventLevels
      function sortEvents(_ref7) {
        var _ref7$evtA = _ref7.evtA,
          aStart = _ref7$evtA.start,
          aEnd = _ref7$evtA.end,
          aAllDay = _ref7$evtA.allDay,
          _ref7$evtB = _ref7.evtB,
          bStart = _ref7$evtB.start,
          bEnd = _ref7$evtB.end,
          bAllDay = _ref7$evtB.allDay;
        var startSort = +startOf(aStart, 'day') - +startOf(bStart, 'day');
        var durA = daySpan(aStart, aEnd);
        var durB = daySpan(bStart, bEnd);
        return startSort ||
        // sort by start Day first
        durB - durA ||
        // events spanning multiple days go first
        !!bAllDay - !!aAllDay ||
        // then allDay single day events
        +aStart - +bStart ||
        // then sort by start time *don't need moment conversion here
        +aEnd - +bEnd // then sort by end time *don't need moment conversion here either
        ;
      }
      function inEventRange(_ref8) {
        var _ref8$event = _ref8.event,
          start = _ref8$event.start,
          end = _ref8$event.end,
          _ref8$range = _ref8.range,
          rangeStart = _ref8$range.start,
          rangeEnd = _ref8$range.end;
        var eStart = startOf(start, 'day');
        var startsBeforeEnd = lte(eStart, rangeEnd, 'day');
        // when the event is zero duration we need to handle a bit differently
        var sameMin = neq(eStart, end, 'minutes');
        var endsAfterStart = sameMin ? gt(end, rangeStart, 'minutes') : gte(end, rangeStart, 'minutes');
        return startsBeforeEnd && endsAfterStart;
      }

      // moment treats 'day' and 'date' equality very different
      // moment(date1).isSame(date2, 'day') would test that they were both the same day of the week
      // moment(date1).isSame(date2, 'date') would test that they were both the same date of the month of the year
      function isSameDate(date1, date2) {
        var dt = DateTime.fromJSDate(date1);
        var dt2 = DateTime.fromJSDate(date2);
        return dt.hasSame(dt2, 'day');
      }

      /**
       * This method, called once in the localizer constructor, is used by eventLevels
       * 'eventSegments()' to assist in determining the 'span' of the event in the display,
       * specifically when using a timezone that is greater than the browser native timezone.
       * @returns number
       */
      function browserTZOffset() {
        /**
         * Date.prototype.getTimezoneOffset horrifically flips the positive/negative from
         * what you see in it's string, so we have to jump through some hoops to get a value
         * we can actually compare.
         */
        var dt = new Date();
        var neg = /-/.test(dt.toString()) ? '-' : '';
        var dtOffset = dt.getTimezoneOffset();
        var comparator = Number("".concat(neg).concat(Math.abs(dtOffset)));
        // moment correctly provides positive/negative offset, as expected
        var mtOffset = DateTime.local().offset;
        return mtOffset > comparator ? 1 : 0;
      }
      return new _localizer$4.DateLocalizer({
        format: function format(value, _format, culture) {
          if (culture) {
            return formatDateWithCulture(value, culture, _format);
          }
          return formatDate(value, _format);
        },
        formats: formats$4,
        firstOfWeek: firstOfWeek,
        firstVisibleDay: firstVisibleDay,
        lastVisibleDay: lastVisibleDay,
        visibleDays: visibleDays,
        lt: lt,
        lte: lte,
        gt: gt,
        gte: gte,
        eq: eq,
        neq: neq,
        merge: merge,
        inRange: inRange,
        startOf: startOf,
        endOf: endOf,
        range: range,
        add: add,
        diff: diff,
        ceil: ceil,
        min: min,
        max: max,
        getSlotDate: getSlotDate,
        getTotalMin: getTotalMin,
        getMinutesFromMidnight: getMinutesFromMidnight,
        continuesPrior: continuesPrior,
        continuesAfter: continuesAfter,
        sortEvents: sortEvents,
        inEventRange: inEventRange,
        isSameDate: isSameDate,
        daySpan: daySpan,
        browserTZOffset: browserTZOffset
      });
    }

    var globalize = {};

    var oldGlobalize = {};

    var _interopRequireWildcard$2 = interopRequireWildcardExports.default;
    Object.defineProperty(oldGlobalize, "__esModule", {
      value: true
    });
    oldGlobalize.default = _default$2;
    oldGlobalize.formats = void 0;
    var dates$2 = _interopRequireWildcard$2(dates$3);
    var _localizer$3 = localizer$1;
    var dateRangeFormat$3 = function dateRangeFormat(_ref, culture, local) {
      var start = _ref.start,
        end = _ref.end;
      return local.format(start, 'd', culture) + ' – ' + local.format(end, 'd', culture);
    };
    var timeRangeFormat$3 = function timeRangeFormat(_ref2, culture, local) {
      var start = _ref2.start,
        end = _ref2.end;
      return local.format(start, 't', culture) + ' – ' + local.format(end, 't', culture);
    };
    var timeRangeStartFormat$3 = function timeRangeStartFormat(_ref3, culture, local) {
      var start = _ref3.start;
      return local.format(start, 't', culture) + ' – ';
    };
    var timeRangeEndFormat$3 = function timeRangeEndFormat(_ref4, culture, local) {
      var end = _ref4.end;
      return ' – ' + local.format(end, 't', culture);
    };
    var weekRangeFormat$3 = function weekRangeFormat(_ref5, culture, local) {
      var start = _ref5.start,
        end = _ref5.end;
      return local.format(start, 'MMM dd', culture) + ' – ' + local.format(end, dates$2.eq(start, end, 'month') ? 'dd' : 'MMM dd', culture);
    };
    var formats$3 = oldGlobalize.formats = {
      dateFormat: 'dd',
      dayFormat: 'ddd dd/MM',
      weekdayFormat: 'ddd',
      selectRangeFormat: timeRangeFormat$3,
      eventTimeRangeFormat: timeRangeFormat$3,
      eventTimeRangeStartFormat: timeRangeStartFormat$3,
      eventTimeRangeEndFormat: timeRangeEndFormat$3,
      timeGutterFormat: 't',
      monthHeaderFormat: 'Y',
      dayHeaderFormat: 'dddd MMM dd',
      dayRangeHeaderFormat: weekRangeFormat$3,
      agendaHeaderFormat: dateRangeFormat$3,
      agendaDateFormat: 'ddd MMM dd',
      agendaTimeFormat: 't',
      agendaTimeRangeFormat: timeRangeFormat$3
    };
    function _default$2(globalize) {
      function getCulture(culture) {
        return culture ? globalize.findClosestCulture(culture) : globalize.culture();
      }
      function firstOfWeek(culture) {
        culture = getCulture(culture);
        return culture && culture.calendar.firstDay || 0;
      }
      return new _localizer$3.DateLocalizer({
        firstOfWeek: firstOfWeek,
        formats: formats$3,
        format: function format(value, _format, culture) {
          return globalize.format(value, _format, culture);
        }
      });
    }

    var _interopRequireDefault$1 = interopRequireDefaultExports.default;
    var _interopRequireWildcard$1 = interopRequireWildcardExports.default;
    Object.defineProperty(globalize, "__esModule", {
      value: true
    });
    globalize.default = _default$1;
    globalize.formats = void 0;
    var dates$1 = _interopRequireWildcard$1(dates$3);
    var _oldGlobalize = _interopRequireDefault$1(oldGlobalize);
    var _localizer$2 = localizer$1;
    // TODO: fix the globalizeLocalizer to work with globalize 1.x

    var dateRangeFormat$2 = function dateRangeFormat(_ref, culture, local) {
      var start = _ref.start,
        end = _ref.end;
      return local.format(start, {
        date: 'short'
      }, culture) + ' – ' + local.format(end, {
        date: 'short'
      }, culture);
    };
    var timeRangeFormat$2 = function timeRangeFormat(_ref2, culture, local) {
      var start = _ref2.start,
        end = _ref2.end;
      return local.format(start, {
        time: 'short'
      }, culture) + ' – ' + local.format(end, {
        time: 'short'
      }, culture);
    };
    var timeRangeStartFormat$2 = function timeRangeStartFormat(_ref3, culture, local) {
      var start = _ref3.start;
      return local.format(start, {
        time: 'short'
      }, culture) + ' – ';
    };
    var timeRangeEndFormat$2 = function timeRangeEndFormat(_ref4, culture, local) {
      var end = _ref4.end;
      return ' – ' + local.format(end, {
        time: 'short'
      }, culture);
    };
    var weekRangeFormat$2 = function weekRangeFormat(_ref5, culture, local) {
      var start = _ref5.start,
        end = _ref5.end;
      return local.format(start, 'MMM dd', culture) + ' – ' + local.format(end, dates$1.eq(start, end, 'month') ? 'dd' : 'MMM dd', culture);
    };
    var formats$2 = globalize.formats = {
      dateFormat: 'dd',
      dayFormat: 'eee dd/MM',
      weekdayFormat: 'eee',
      selectRangeFormat: timeRangeFormat$2,
      eventTimeRangeFormat: timeRangeFormat$2,
      eventTimeRangeStartFormat: timeRangeStartFormat$2,
      eventTimeRangeEndFormat: timeRangeEndFormat$2,
      timeGutterFormat: {
        time: 'short'
      },
      monthHeaderFormat: 'MMMM yyyy',
      dayHeaderFormat: 'eeee MMM dd',
      dayRangeHeaderFormat: weekRangeFormat$2,
      agendaHeaderFormat: dateRangeFormat$2,
      agendaDateFormat: 'eee MMM dd',
      agendaTimeFormat: {
        time: 'short'
      },
      agendaTimeRangeFormat: timeRangeFormat$2
    };
    function _default$1(globalize) {
      var locale = function locale(culture) {
        return culture ? globalize(culture) : globalize;
      };

      // return the first day of the week from the locale data. Defaults to 'world'
      // territory if no territory is derivable from CLDR.
      // Failing to use CLDR supplemental (not loaded?), revert to the original
      // method of getting first day of week.
      function firstOfWeek(culture) {
        try {
          var days = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
          var cldr = locale(culture).cldr;
          var territory = cldr.attributes.territory;
          var weekData = cldr.get('supplemental').weekData;
          var firstDay = weekData.firstDay[territory || '001'];
          return days.indexOf(firstDay);
        } catch (e) {
          {
            console.error('Failed to accurately determine first day of the week.' + ' Is supplemental data loaded into CLDR?');
          }
          // maybe cldr supplemental is not loaded? revert to original method
          var date = new Date();
          //cldr-data doesn't seem to be zero based
          var localeDay = Math.max(parseInt(locale(culture).formatDate(date, {
            raw: 'e'
          }), 10) - 1, 0);
          return Math.abs(date.getDay() - localeDay);
        }
      }
      if (!globalize.load) return (0, _oldGlobalize.default)(globalize);
      return new _localizer$2.DateLocalizer({
        firstOfWeek: firstOfWeek,
        formats: formats$2,
        format: function format(value, _format, culture) {
          _format = typeof _format === 'string' ? {
            raw: _format
          } : _format;
          return locale(culture).formatDate(value, _format);
        }
      });
    }

    var dateFns = {};

    var _interopRequireWildcard = interopRequireWildcardExports.default;
    Object.defineProperty(dateFns, "__esModule", {
      value: true
    });
    dateFns.formats = dateFns.default = void 0;
    var dates = _interopRequireWildcard(dates$3);
    var _localizer$1 = localizer$1;
    var dateRangeFormat$1 = function dateRangeFormat(_ref, culture, local) {
      var start = _ref.start,
        end = _ref.end;
      return "".concat(local.format(start, 'P', culture), " \u2013 ").concat(local.format(end, 'P', culture));
    };
    var timeRangeFormat$1 = function timeRangeFormat(_ref2, culture, local) {
      var start = _ref2.start,
        end = _ref2.end;
      return "".concat(local.format(start, 'p', culture), " \u2013 ").concat(local.format(end, 'p', culture));
    };
    var timeRangeStartFormat$1 = function timeRangeStartFormat(_ref3, culture, local) {
      var start = _ref3.start;
      return "".concat(local.format(start, 'h:mma', culture), " \u2013 ");
    };
    var timeRangeEndFormat$1 = function timeRangeEndFormat(_ref4, culture, local) {
      var end = _ref4.end;
      return " \u2013 ".concat(local.format(end, 'h:mma', culture));
    };
    var weekRangeFormat$1 = function weekRangeFormat(_ref5, culture, local) {
      var start = _ref5.start,
        end = _ref5.end;
      return "".concat(local.format(start, 'MMMM dd', culture), " \u2013 ").concat(local.format(end, dates.eq(start, end, 'month') ? 'dd' : 'MMMM dd', culture));
    };
    var formats$1 = dateFns.formats = {
      dateFormat: 'dd',
      dayFormat: 'dd eee',
      weekdayFormat: 'cccc',
      selectRangeFormat: timeRangeFormat$1,
      eventTimeRangeFormat: timeRangeFormat$1,
      eventTimeRangeStartFormat: timeRangeStartFormat$1,
      eventTimeRangeEndFormat: timeRangeEndFormat$1,
      timeGutterFormat: 'p',
      monthHeaderFormat: 'MMMM yyyy',
      dayHeaderFormat: 'cccc MMM dd',
      dayRangeHeaderFormat: weekRangeFormat$1,
      agendaHeaderFormat: dateRangeFormat$1,
      agendaDateFormat: 'ccc MMM dd',
      agendaTimeFormat: 'p',
      agendaTimeRangeFormat: timeRangeFormat$1
    };
    var dateFnsLocalizer = function dateFnsLocalizer(_ref6) {
      var startOfWeek = _ref6.startOfWeek,
        getDay = _ref6.getDay,
        _format = _ref6.format,
        locales = _ref6.locales;
      return new _localizer$1.DateLocalizer({
        formats: formats$1,
        firstOfWeek: function firstOfWeek(culture) {
          return getDay(startOfWeek(new Date(), {
            locale: locales[culture]
          }));
        },
        format: function format(value, formatString, culture) {
          return _format(new Date(value), formatString, {
            locale: locales[culture]
          });
        }
      });
    };
    dateFns.default = dateFnsLocalizer;

    var dayjs = {};

    var isBetween = {exports: {}};

    (function (module, exports) {
    	!function(e,i){module.exports=i();}(commonjsGlobal,(function(){return function(e,i,t){i.prototype.isBetween=function(e,i,s,f){var n=t(e),o=t(i),r="("===(f=f||"()")[0],u=")"===f[1];return (r?this.isAfter(n,s):!this.isBefore(n,s))&&(u?this.isBefore(o,s):!this.isAfter(o,s))||(r?this.isBefore(n,s):!this.isAfter(n,s))&&(u?this.isAfter(o,s):!this.isBefore(o,s))};}})); 
    } (isBetween));

    var isBetweenExports = isBetween.exports;

    var isSameOrAfter = {exports: {}};

    (function (module, exports) {
    	!function(e,t){module.exports=t();}(commonjsGlobal,(function(){return function(e,t){t.prototype.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)};}})); 
    } (isSameOrAfter));

    var isSameOrAfterExports = isSameOrAfter.exports;

    var isSameOrBefore = {exports: {}};

    (function (module, exports) {
    	!function(e,i){module.exports=i();}(commonjsGlobal,(function(){return function(e,i){i.prototype.isSameOrBefore=function(e,i){return this.isSame(e,i)||this.isBefore(e,i)};}})); 
    } (isSameOrBefore));

    var isSameOrBeforeExports = isSameOrBefore.exports;

    var localeData = {exports: {}};

    (function (module, exports) {
    	!function(n,e){module.exports=e();}(commonjsGlobal,(function(){return function(n,e,t){var r=e.prototype,o=function(n){return n&&(n.indexOf?n:n.s)},u=function(n,e,t,r,u){var i=n.name?n:n.$locale(),a=o(i[e]),s=o(i[t]),f=a||s.map((function(n){return n.slice(0,r)}));if(!u)return f;var d=i.weekStart;return f.map((function(n,e){return f[(e+(d||0))%7]}))},i=function(){return t.Ls[t.locale()]},a=function(n,e){return n.formats[e]||function(n){return n.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(n,e,t){return e||t.slice(1)}))}(n.formats[e.toUpperCase()])},s=function(){var n=this;return {months:function(e){return e?e.format("MMMM"):u(n,"months")},monthsShort:function(e){return e?e.format("MMM"):u(n,"monthsShort","months",3)},firstDayOfWeek:function(){return n.$locale().weekStart||0},weekdays:function(e){return e?e.format("dddd"):u(n,"weekdays")},weekdaysMin:function(e){return e?e.format("dd"):u(n,"weekdaysMin","weekdays",2)},weekdaysShort:function(e){return e?e.format("ddd"):u(n,"weekdaysShort","weekdays",3)},longDateFormat:function(e){return a(n.$locale(),e)},meridiem:this.$locale().meridiem,ordinal:this.$locale().ordinal}};r.localeData=function(){return s.bind(this)()},t.localeData=function(){var n=i();return {firstDayOfWeek:function(){return n.weekStart||0},weekdays:function(){return t.weekdays()},weekdaysShort:function(){return t.weekdaysShort()},weekdaysMin:function(){return t.weekdaysMin()},months:function(){return t.months()},monthsShort:function(){return t.monthsShort()},longDateFormat:function(e){return a(n,e)},meridiem:n.meridiem,ordinal:n.ordinal}},t.months=function(){return u(i(),"months")},t.monthsShort=function(){return u(i(),"monthsShort","months",3)},t.weekdays=function(n){return u(i(),"weekdays",null,null,n)},t.weekdaysShort=function(n){return u(i(),"weekdaysShort","weekdays",3,n)},t.weekdaysMin=function(n){return u(i(),"weekdaysMin","weekdays",2,n)};}})); 
    } (localeData));

    var localeDataExports = localeData.exports;

    var localizedFormat = {exports: {}};

    (function (module, exports) {
    	!function(e,t){module.exports=t();}(commonjsGlobal,(function(){var e={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};return function(t,o,n){var r=o.prototype,i=r.format;n.en.formats=e,r.format=function(t){void 0===t&&(t="YYYY-MM-DDTHH:mm:ssZ");var o=this.$locale().formats,n=function(t,o){return t.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(t,n,r){var i=r&&r.toUpperCase();return n||o[r]||e[r]||o[i].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,o){return t||o.slice(1)}))}))}(t,void 0===o?{}:o);return i.call(this,n)};}})); 
    } (localizedFormat));

    var localizedFormatExports = localizedFormat.exports;

    var minMax = {exports: {}};

    (function (module, exports) {
    	!function(e,n){module.exports=n();}(commonjsGlobal,(function(){return function(e,n,t){var i=function(e,n){if(!n||!n.length||1===n.length&&!n[0]||1===n.length&&Array.isArray(n[0])&&!n[0].length)return null;var t;1===n.length&&n[0].length>0&&(n=n[0]);t=(n=n.filter((function(e){return e})))[0];for(var i=1;i<n.length;i+=1)n[i].isValid()&&!n[i][e](t)||(t=n[i]);return t};t.max=function(){var e=[].slice.call(arguments,0);return i("isAfter",e)},t.min=function(){var e=[].slice.call(arguments,0);return i("isBefore",e)};}})); 
    } (minMax));

    var minMaxExports = minMax.exports;

    var utc = {exports: {}};

    (function (module, exports) {
    	!function(t,i){module.exports=i();}(commonjsGlobal,(function(){var t="minute",i=/[+-]\d\d(?::?\d\d)?/g,e=/([+-]|\d\d)/g;return function(s,f,n){var u=f.prototype;n.utc=function(t){var i={date:t,utc:!0,args:arguments};return new f(i)},u.utc=function(i){var e=n(this.toDate(),{locale:this.$L,utc:!0});return i?e.add(this.utcOffset(),t):e},u.local=function(){return n(this.toDate(),{locale:this.$L,utc:!1})};var o=u.parse;u.parse=function(t){t.utc&&(this.$u=!0),this.$utils().u(t.$offset)||(this.$offset=t.$offset),o.call(this,t);};var r=u.init;u.init=function(){if(this.$u){var t=this.$d;this.$y=t.getUTCFullYear(),this.$M=t.getUTCMonth(),this.$D=t.getUTCDate(),this.$W=t.getUTCDay(),this.$H=t.getUTCHours(),this.$m=t.getUTCMinutes(),this.$s=t.getUTCSeconds(),this.$ms=t.getUTCMilliseconds();}else r.call(this);};var a=u.utcOffset;u.utcOffset=function(s,f){var n=this.$utils().u;if(n(s))return this.$u?0:n(this.$offset)?a.call(this):this.$offset;if("string"==typeof s&&(s=function(t){void 0===t&&(t="");var s=t.match(i);if(!s)return null;var f=(""+s[0]).match(e)||["-",0,0],n=f[0],u=60*+f[1]+ +f[2];return 0===u?0:"+"===n?u:-u}(s),null===s))return this;var u=Math.abs(s)<=16?60*s:s,o=this;if(f)return o.$offset=u,o.$u=0===s,o;if(0!==s){var r=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(o=this.local().add(u+r,t)).$offset=u,o.$x.$localOffset=r;}else o=this.utc();return o};var h=u.format;u.format=function(t){var i=t||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return h.call(this,i)},u.valueOf=function(){var t=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||this.$d.getTimezoneOffset());return this.$d.valueOf()-6e4*t},u.isUTC=function(){return !!this.$u},u.toISOString=function(){return this.toDate().toISOString()},u.toString=function(){return this.toDate().toUTCString()};var l=u.toDate;u.toDate=function(t){return "s"===t&&this.$offset?n(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():l.call(this)};var c=u.diff;u.diff=function(t,i,e){if(t&&this.$u===t.$u)return c.call(this,t,i,e);var s=this.local(),f=n(t).local();return c.call(s,f,i,e)};}})); 
    } (utc));

    var utcExports = utc.exports;

    var _interopRequireDefault = interopRequireDefaultExports.default;
    Object.defineProperty(dayjs, "__esModule", {
      value: true
    });
    dayjs.default = _default;
    dayjs.formats = void 0;
    var _slicedToArray2 = _interopRequireDefault(slicedToArrayExports);
    var _localizer = localizer$1;
    var _isBetween = _interopRequireDefault(isBetweenExports);
    var _isSameOrAfter = _interopRequireDefault(isSameOrAfterExports);
    var _isSameOrBefore = _interopRequireDefault(isSameOrBeforeExports);
    var _localeData = _interopRequireDefault(localeDataExports);
    var _localizedFormat = _interopRequireDefault(localizedFormatExports);
    var _minMax = _interopRequireDefault(minMaxExports);
    var _utc = _interopRequireDefault(utcExports);
    // import dayjs plugins
    // Note that the timezone plugin is not imported here
    // this plugin can be optionally loaded by the user

    var weekRangeFormat = function weekRangeFormat(_ref, culture, local) {
      var start = _ref.start,
        end = _ref.end;
      return local.format(start, 'MMMM DD', culture) + ' – ' +
      // updated to use this localizer 'eq()' method
      local.format(end, local.eq(start, end, 'month') ? 'DD' : 'MMMM DD', culture);
    };
    var dateRangeFormat = function dateRangeFormat(_ref2, culture, local) {
      var start = _ref2.start,
        end = _ref2.end;
      return local.format(start, 'L', culture) + ' – ' + local.format(end, 'L', culture);
    };
    var timeRangeFormat = function timeRangeFormat(_ref3, culture, local) {
      var start = _ref3.start,
        end = _ref3.end;
      return local.format(start, 'LT', culture) + ' – ' + local.format(end, 'LT', culture);
    };
    var timeRangeStartFormat = function timeRangeStartFormat(_ref4, culture, local) {
      var start = _ref4.start;
      return local.format(start, 'LT', culture) + ' – ';
    };
    var timeRangeEndFormat = function timeRangeEndFormat(_ref5, culture, local) {
      var end = _ref5.end;
      return ' – ' + local.format(end, 'LT', culture);
    };
    var formats = dayjs.formats = {
      dateFormat: 'DD',
      dayFormat: 'DD ddd',
      weekdayFormat: 'ddd',
      selectRangeFormat: timeRangeFormat,
      eventTimeRangeFormat: timeRangeFormat,
      eventTimeRangeStartFormat: timeRangeStartFormat,
      eventTimeRangeEndFormat: timeRangeEndFormat,
      timeGutterFormat: 'LT',
      monthHeaderFormat: 'MMMM YYYY',
      dayHeaderFormat: 'dddd MMM DD',
      dayRangeHeaderFormat: weekRangeFormat,
      agendaHeaderFormat: dateRangeFormat,
      agendaDateFormat: 'ddd MMM DD',
      agendaTimeFormat: 'LT',
      agendaTimeRangeFormat: timeRangeFormat
    };
    function fixUnit(unit) {
      var datePart = unit ? unit.toLowerCase() : unit;
      if (datePart === 'FullYear') {
        datePart = 'year';
      } else if (!datePart) {
        datePart = undefined;
      }
      return datePart;
    }
    function _default(dayjsLib) {
      // load dayjs plugins
      dayjsLib.extend(_isBetween.default);
      dayjsLib.extend(_isSameOrAfter.default);
      dayjsLib.extend(_isSameOrBefore.default);
      dayjsLib.extend(_localeData.default);
      dayjsLib.extend(_localizedFormat.default);
      dayjsLib.extend(_minMax.default);
      dayjsLib.extend(_utc.default);
      var locale = function locale(dj, c) {
        return c ? dj.locale(c) : dj;
      };

      // if the timezone plugin is loaded,
      // then use the timezone aware version
      var dayjs = dayjsLib.tz ? dayjsLib.tz : dayjsLib;
      function getTimezoneOffset(date) {
        // ensures this gets cast to timezone
        return dayjs(date).toDate().getTimezoneOffset();
      }
      function getDstOffset(start, end) {
        var _st$tz$$x$$timezone;
        // convert to dayjs, in case
        var st = dayjs(start);
        var ed = dayjs(end);
        // if not using the dayjs timezone plugin
        if (!dayjs.tz) {
          return st.toDate().getTimezoneOffset() - ed.toDate().getTimezoneOffset();
        }
        /**
         * If a default timezone has been applied, then
         * use this to get the proper timezone offset, otherwise default
         * the timezone to the browser local
         */
        var tzName = (_st$tz$$x$$timezone = st.tz().$x.$timezone) !== null && _st$tz$$x$$timezone !== void 0 ? _st$tz$$x$$timezone : dayjsLib.tz.guess();
        // invert offsets to be inline with moment.js
        var startOffset = -dayjs.tz(+st, tzName).utcOffset();
        var endOffset = -dayjs.tz(+ed, tzName).utcOffset();
        return startOffset - endOffset;
      }
      function getDayStartDstOffset(start) {
        var dayStart = dayjs(start).startOf('day');
        return getDstOffset(dayStart, start);
      }

      /*** BEGIN localized date arithmetic methods with dayjs ***/
      function defineComparators(a, b, unit) {
        var datePart = fixUnit(unit);
        var dtA = datePart ? dayjs(a).startOf(datePart) : dayjs(a);
        var dtB = datePart ? dayjs(b).startOf(datePart) : dayjs(b);
        return [dtA, dtB, datePart];
      }
      function startOf() {
        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var unit = arguments.length > 1 ? arguments[1] : undefined;
        var datePart = fixUnit(unit);
        if (datePart) {
          return dayjs(date).startOf(datePart).toDate();
        }
        return dayjs(date).toDate();
      }
      function endOf() {
        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var unit = arguments.length > 1 ? arguments[1] : undefined;
        var datePart = fixUnit(unit);
        if (datePart) {
          return dayjs(date).endOf(datePart).toDate();
        }
        return dayjs(date).toDate();
      }

      // dayjs comparison operations *always* convert both sides to dayjs objects
      // prior to running the comparisons
      function eq(a, b, unit) {
        var _defineComparators = defineComparators(a, b, unit),
          _defineComparators2 = (0, _slicedToArray2.default)(_defineComparators, 3),
          dtA = _defineComparators2[0],
          dtB = _defineComparators2[1],
          datePart = _defineComparators2[2];
        return dtA.isSame(dtB, datePart);
      }
      function neq(a, b, unit) {
        return !eq(a, b, unit);
      }
      function gt(a, b, unit) {
        var _defineComparators3 = defineComparators(a, b, unit),
          _defineComparators4 = (0, _slicedToArray2.default)(_defineComparators3, 3),
          dtA = _defineComparators4[0],
          dtB = _defineComparators4[1],
          datePart = _defineComparators4[2];
        return dtA.isAfter(dtB, datePart);
      }
      function lt(a, b, unit) {
        var _defineComparators5 = defineComparators(a, b, unit),
          _defineComparators6 = (0, _slicedToArray2.default)(_defineComparators5, 3),
          dtA = _defineComparators6[0],
          dtB = _defineComparators6[1],
          datePart = _defineComparators6[2];
        return dtA.isBefore(dtB, datePart);
      }
      function gte(a, b, unit) {
        var _defineComparators7 = defineComparators(a, b, unit),
          _defineComparators8 = (0, _slicedToArray2.default)(_defineComparators7, 3),
          dtA = _defineComparators8[0],
          dtB = _defineComparators8[1],
          datePart = _defineComparators8[2];
        return dtA.isSameOrBefore(dtB, datePart);
      }
      function lte(a, b, unit) {
        var _defineComparators9 = defineComparators(a, b, unit),
          _defineComparators10 = (0, _slicedToArray2.default)(_defineComparators9, 3),
          dtA = _defineComparators10[0],
          dtB = _defineComparators10[1],
          datePart = _defineComparators10[2];
        return dtA.isSameOrBefore(dtB, datePart);
      }
      function inRange(day, min, max) {
        var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'day';
        var datePart = fixUnit(unit);
        var djDay = dayjs(day);
        var djMin = dayjs(min);
        var djMax = dayjs(max);
        return djDay.isBetween(djMin, djMax, datePart, '[]');
      }
      function min(dateA, dateB) {
        var dtA = dayjs(dateA);
        var dtB = dayjs(dateB);
        var minDt = dayjsLib.min(dtA, dtB);
        return minDt.toDate();
      }
      function max(dateA, dateB) {
        var dtA = dayjs(dateA);
        var dtB = dayjs(dateB);
        var maxDt = dayjsLib.max(dtA, dtB);
        return maxDt.toDate();
      }
      function merge(date, time) {
        if (!date && !time) return null;
        var tm = dayjs(time).format('HH:mm:ss');
        var dt = dayjs(date).startOf('day').format('MM/DD/YYYY');
        // We do it this way to avoid issues when timezone switching
        return dayjsLib("".concat(dt, " ").concat(tm), 'MM/DD/YYYY HH:mm:ss').toDate();
      }
      function add(date, adder, unit) {
        var datePart = fixUnit(unit);
        return dayjs(date).add(adder, datePart).toDate();
      }
      function range(start, end) {
        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';
        var datePart = fixUnit(unit);
        // because the add method will put these in tz, we have to start that way
        var current = dayjs(start).toDate();
        var days = [];
        while (lte(current, end)) {
          days.push(current);
          current = add(current, 1, datePart);
        }
        return days;
      }
      function ceil(date, unit) {
        var datePart = fixUnit(unit);
        var floor = startOf(date, datePart);
        return eq(floor, date) ? floor : add(floor, 1, datePart);
      }
      function diff(a, b) {
        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';
        var datePart = fixUnit(unit);
        // don't use 'defineComparators' here, as we don't want to mutate the values
        var dtA = dayjs(a);
        var dtB = dayjs(b);
        return dtB.diff(dtA, datePart);
      }
      function minutes(date) {
        var dt = dayjs(date);
        return dt.minutes();
      }
      function firstOfWeek(culture) {
        var data = culture ? dayjsLib.localeData(culture) : dayjsLib.localeData();
        return data ? data.firstDayOfWeek() : 0;
      }
      function firstVisibleDay(date) {
        return dayjs(date).startOf('month').startOf('week').toDate();
      }
      function lastVisibleDay(date) {
        return dayjs(date).endOf('month').endOf('week').toDate();
      }
      function visibleDays(date) {
        var current = firstVisibleDay(date);
        var last = lastVisibleDay(date);
        var days = [];
        while (lte(current, last)) {
          days.push(current);
          current = add(current, 1, 'd');
        }
        return days;
      }
      /*** END localized date arithmetic methods with dayjs ***/

      /**
       * Moved from TimeSlots.js, this method overrides the method of the same name
       * in the localizer.js, using dayjs to construct the js Date
       * @param {Date} dt - date to start with
       * @param {Number} minutesFromMidnight
       * @param {Number} offset
       * @returns {Date}
       */
      function getSlotDate(dt, minutesFromMidnight, offset) {
        return dayjs(dt).startOf('day').minute(minutesFromMidnight + offset).toDate();
      }

      // dayjs will automatically handle DST differences in it's calculations
      function getTotalMin(start, end) {
        return diff(start, end, 'minutes');
      }
      function getMinutesFromMidnight(start) {
        var dayStart = dayjs(start).startOf('day');
        var day = dayjs(start);
        return day.diff(dayStart, 'minutes') + getDayStartDstOffset(start);
      }

      // These two are used by DateSlotMetrics
      function continuesPrior(start, first) {
        var djStart = dayjs(start);
        var djFirst = dayjs(first);
        return djStart.isBefore(djFirst, 'day');
      }
      function continuesAfter(start, end, last) {
        var djEnd = dayjs(end);
        var djLast = dayjs(last);
        return djEnd.isSameOrAfter(djLast, 'minutes');
      }
      function daySpan(start, end) {
        var startDay = dayjs(start);
        var endDay = dayjs(end);
        return endDay.diff(startDay, 'day');
      }

      // These two are used by eventLevels
      function sortEvents(_ref6) {
        var _ref6$evtA = _ref6.evtA,
          aStart = _ref6$evtA.start,
          aEnd = _ref6$evtA.end,
          aAllDay = _ref6$evtA.allDay,
          _ref6$evtB = _ref6.evtB,
          bStart = _ref6$evtB.start,
          bEnd = _ref6$evtB.end,
          bAllDay = _ref6$evtB.allDay;
        var startSort = +startOf(aStart, 'day') - +startOf(bStart, 'day');
        var durA = daySpan(aStart, aEnd);
        var durB = daySpan(bStart, bEnd);
        return startSort ||
        // sort by start Day first
        durB - durA ||
        // events spanning multiple days go first
        !!bAllDay - !!aAllDay ||
        // then allDay single day events
        +aStart - +bStart ||
        // then sort by start time *don't need dayjs conversion here
        +aEnd - +bEnd // then sort by end time *don't need dayjs conversion here either
        ;
      }
      function inEventRange(_ref7) {
        var _ref7$event = _ref7.event,
          start = _ref7$event.start,
          end = _ref7$event.end,
          _ref7$range = _ref7.range,
          rangeStart = _ref7$range.start,
          rangeEnd = _ref7$range.end;
        var startOfDay = dayjs(start).startOf('day');
        var eEnd = dayjs(end);
        var rStart = dayjs(rangeStart);
        var rEnd = dayjs(rangeEnd);
        var startsBeforeEnd = startOfDay.isSameOrBefore(rEnd, 'day');
        // when the event is zero duration we need to handle a bit differently
        var sameMin = !startOfDay.isSame(eEnd, 'minutes');
        var endsAfterStart = sameMin ? eEnd.isAfter(rStart, 'minutes') : eEnd.isSameOrAfter(rStart, 'minutes');
        return startsBeforeEnd && endsAfterStart;
      }
      function isSameDate(date1, date2) {
        var dt = dayjs(date1);
        var dt2 = dayjs(date2);
        return dt.isSame(dt2, 'day');
      }

      /**
       * This method, called once in the localizer constructor, is used by eventLevels
       * 'eventSegments()' to assist in determining the 'span' of the event in the display,
       * specifically when using a timezone that is greater than the browser native timezone.
       * @returns number
       */
      function browserTZOffset() {
        /**
         * Date.prototype.getTimezoneOffset horrifically flips the positive/negative from
         * what you see in it's string, so we have to jump through some hoops to get a value
         * we can actually compare.
         */
        var dt = new Date();
        var neg = /-/.test(dt.toString()) ? '-' : '';
        var dtOffset = dt.getTimezoneOffset();
        var comparator = Number("".concat(neg).concat(Math.abs(dtOffset)));
        // dayjs correctly provides positive/negative offset, as expected
        var mtOffset = dayjs().utcOffset();
        return mtOffset > comparator ? 1 : 0;
      }
      return new _localizer.DateLocalizer({
        formats: formats,
        firstOfWeek: firstOfWeek,
        firstVisibleDay: firstVisibleDay,
        lastVisibleDay: lastVisibleDay,
        visibleDays: visibleDays,
        format: function format(value, _format, culture) {
          return locale(dayjs(value), culture).format(_format);
        },
        lt: lt,
        lte: lte,
        gt: gt,
        gte: gte,
        eq: eq,
        neq: neq,
        merge: merge,
        inRange: inRange,
        startOf: startOf,
        endOf: endOf,
        range: range,
        add: add,
        diff: diff,
        ceil: ceil,
        min: min,
        max: max,
        minutes: minutes,
        getSlotDate: getSlotDate,
        getTimezoneOffset: getTimezoneOffset,
        getDstOffset: getDstOffset,
        getTotalMin: getTotalMin,
        getMinutesFromMidnight: getMinutesFromMidnight,
        continuesPrior: continuesPrior,
        continuesAfter: continuesAfter,
        sortEvents: sortEvents,
        inEventRange: inEventRange,
        isSameDate: isSameDate,
        browserTZOffset: browserTZOffset
      });
    }

    (function (exports) {

    	var _interopRequireDefault = interopRequireDefaultExports.default;
    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	Object.defineProperty(exports, "Calendar", {
    	  enumerable: true,
    	  get: function get() {
    	    return _Calendar.default;
    	  }
    	});
    	Object.defineProperty(exports, "DateLocalizer", {
    	  enumerable: true,
    	  get: function get() {
    	    return _localizer.DateLocalizer;
    	  }
    	});
    	Object.defineProperty(exports, "Navigate", {
    	  enumerable: true,
    	  get: function get() {
    	    return _constants.navigate;
    	  }
    	});
    	Object.defineProperty(exports, "Views", {
    	  enumerable: true,
    	  get: function get() {
    	    return _constants.views;
    	  }
    	});
    	exports.components = void 0;
    	Object.defineProperty(exports, "dateFnsLocalizer", {
    	  enumerable: true,
    	  get: function get() {
    	    return _dateFns.default;
    	  }
    	});
    	Object.defineProperty(exports, "dayjsLocalizer", {
    	  enumerable: true,
    	  get: function get() {
    	    return _dayjs.default;
    	  }
    	});
    	Object.defineProperty(exports, "globalizeLocalizer", {
    	  enumerable: true,
    	  get: function get() {
    	    return _globalize.default;
    	  }
    	});
    	Object.defineProperty(exports, "luxonLocalizer", {
    	  enumerable: true,
    	  get: function get() {
    	    return _luxon.default;
    	  }
    	});
    	Object.defineProperty(exports, "momentLocalizer", {
    	  enumerable: true,
    	  get: function get() {
    	    return _moment.default;
    	  }
    	});
    	Object.defineProperty(exports, "move", {
    	  enumerable: true,
    	  get: function get() {
    	    return _move.default;
    	  }
    	});
    	var _EventWrapper = _interopRequireDefault(EventWrapper);
    	var _BackgroundWrapper = _interopRequireDefault(BackgroundWrapper);
    	var _Calendar = _interopRequireDefault(Calendar$1);
    	var _localizer = localizer$1;
    	var _moment = _interopRequireDefault(moment$2);
    	var _luxon = _interopRequireDefault(luxon);
    	var _globalize = _interopRequireDefault(globalize);
    	var _dateFns = _interopRequireDefault(dateFns);
    	var _dayjs = _interopRequireDefault(dayjs);
    	var _move = _interopRequireDefault(move);
    	var _constants = constants;
    	exports.components = {
    	  eventWrapper: _EventWrapper.default,
    	  timeSlotWrapper: _BackgroundWrapper.default,
    	  dateCellWrapper: _BackgroundWrapper.default
    	}; 
    } (lib));

    function commonjsRequire(path) {
    	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
    }

    var moment$1 = {exports: {}};

    (function (module, exports) {
    (function (global, factory) {
    	    module.exports = factory() ;
    	}(commonjsGlobal, (function () {
    	    var hookCallback;

    	    function hooks() {
    	        return hookCallback.apply(null, arguments);
    	    }

    	    // This is done to register the method called with moment()
    	    // without creating circular dependencies.
    	    function setHookCallback(callback) {
    	        hookCallback = callback;
    	    }

    	    function isArray(input) {
    	        return (
    	            input instanceof Array ||
    	            Object.prototype.toString.call(input) === '[object Array]'
    	        );
    	    }

    	    function isObject(input) {
    	        // IE8 will treat undefined and null as object if it wasn't for
    	        // input != null
    	        return (
    	            input != null &&
    	            Object.prototype.toString.call(input) === '[object Object]'
    	        );
    	    }

    	    function hasOwnProp(a, b) {
    	        return Object.prototype.hasOwnProperty.call(a, b);
    	    }

    	    function isObjectEmpty(obj) {
    	        if (Object.getOwnPropertyNames) {
    	            return Object.getOwnPropertyNames(obj).length === 0;
    	        } else {
    	            var k;
    	            for (k in obj) {
    	                if (hasOwnProp(obj, k)) {
    	                    return false;
    	                }
    	            }
    	            return true;
    	        }
    	    }

    	    function isUndefined(input) {
    	        return input === void 0;
    	    }

    	    function isNumber(input) {
    	        return (
    	            typeof input === 'number' ||
    	            Object.prototype.toString.call(input) === '[object Number]'
    	        );
    	    }

    	    function isDate(input) {
    	        return (
    	            input instanceof Date ||
    	            Object.prototype.toString.call(input) === '[object Date]'
    	        );
    	    }

    	    function map(arr, fn) {
    	        var res = [],
    	            i,
    	            arrLen = arr.length;
    	        for (i = 0; i < arrLen; ++i) {
    	            res.push(fn(arr[i], i));
    	        }
    	        return res;
    	    }

    	    function extend(a, b) {
    	        for (var i in b) {
    	            if (hasOwnProp(b, i)) {
    	                a[i] = b[i];
    	            }
    	        }

    	        if (hasOwnProp(b, 'toString')) {
    	            a.toString = b.toString;
    	        }

    	        if (hasOwnProp(b, 'valueOf')) {
    	            a.valueOf = b.valueOf;
    	        }

    	        return a;
    	    }

    	    function createUTC(input, format, locale, strict) {
    	        return createLocalOrUTC(input, format, locale, strict, true).utc();
    	    }

    	    function defaultParsingFlags() {
    	        // We need to deep clone this object.
    	        return {
    	            empty: false,
    	            unusedTokens: [],
    	            unusedInput: [],
    	            overflow: -2,
    	            charsLeftOver: 0,
    	            nullInput: false,
    	            invalidEra: null,
    	            invalidMonth: null,
    	            invalidFormat: false,
    	            userInvalidated: false,
    	            iso: false,
    	            parsedDateParts: [],
    	            era: null,
    	            meridiem: null,
    	            rfc2822: false,
    	            weekdayMismatch: false,
    	        };
    	    }

    	    function getParsingFlags(m) {
    	        if (m._pf == null) {
    	            m._pf = defaultParsingFlags();
    	        }
    	        return m._pf;
    	    }

    	    var some;
    	    if (Array.prototype.some) {
    	        some = Array.prototype.some;
    	    } else {
    	        some = function (fun) {
    	            var t = Object(this),
    	                len = t.length >>> 0,
    	                i;

    	            for (i = 0; i < len; i++) {
    	                if (i in t && fun.call(this, t[i], i, t)) {
    	                    return true;
    	                }
    	            }

    	            return false;
    	        };
    	    }

    	    function isValid(m) {
    	        var flags = null,
    	            parsedParts = false,
    	            isNowValid = m._d && !isNaN(m._d.getTime());
    	        if (isNowValid) {
    	            flags = getParsingFlags(m);
    	            parsedParts = some.call(flags.parsedDateParts, function (i) {
    	                return i != null;
    	            });
    	            isNowValid =
    	                flags.overflow < 0 &&
    	                !flags.empty &&
    	                !flags.invalidEra &&
    	                !flags.invalidMonth &&
    	                !flags.invalidWeekday &&
    	                !flags.weekdayMismatch &&
    	                !flags.nullInput &&
    	                !flags.invalidFormat &&
    	                !flags.userInvalidated &&
    	                (!flags.meridiem || (flags.meridiem && parsedParts));
    	            if (m._strict) {
    	                isNowValid =
    	                    isNowValid &&
    	                    flags.charsLeftOver === 0 &&
    	                    flags.unusedTokens.length === 0 &&
    	                    flags.bigHour === undefined;
    	            }
    	        }
    	        if (Object.isFrozen == null || !Object.isFrozen(m)) {
    	            m._isValid = isNowValid;
    	        } else {
    	            return isNowValid;
    	        }
    	        return m._isValid;
    	    }

    	    function createInvalid(flags) {
    	        var m = createUTC(NaN);
    	        if (flags != null) {
    	            extend(getParsingFlags(m), flags);
    	        } else {
    	            getParsingFlags(m).userInvalidated = true;
    	        }

    	        return m;
    	    }

    	    // Plugins that add properties should also add the key here (null value),
    	    // so we can properly clone ourselves.
    	    var momentProperties = (hooks.momentProperties = []),
    	        updateInProgress = false;

    	    function copyConfig(to, from) {
    	        var i,
    	            prop,
    	            val,
    	            momentPropertiesLen = momentProperties.length;

    	        if (!isUndefined(from._isAMomentObject)) {
    	            to._isAMomentObject = from._isAMomentObject;
    	        }
    	        if (!isUndefined(from._i)) {
    	            to._i = from._i;
    	        }
    	        if (!isUndefined(from._f)) {
    	            to._f = from._f;
    	        }
    	        if (!isUndefined(from._l)) {
    	            to._l = from._l;
    	        }
    	        if (!isUndefined(from._strict)) {
    	            to._strict = from._strict;
    	        }
    	        if (!isUndefined(from._tzm)) {
    	            to._tzm = from._tzm;
    	        }
    	        if (!isUndefined(from._isUTC)) {
    	            to._isUTC = from._isUTC;
    	        }
    	        if (!isUndefined(from._offset)) {
    	            to._offset = from._offset;
    	        }
    	        if (!isUndefined(from._pf)) {
    	            to._pf = getParsingFlags(from);
    	        }
    	        if (!isUndefined(from._locale)) {
    	            to._locale = from._locale;
    	        }

    	        if (momentPropertiesLen > 0) {
    	            for (i = 0; i < momentPropertiesLen; i++) {
    	                prop = momentProperties[i];
    	                val = from[prop];
    	                if (!isUndefined(val)) {
    	                    to[prop] = val;
    	                }
    	            }
    	        }

    	        return to;
    	    }

    	    // Moment prototype object
    	    function Moment(config) {
    	        copyConfig(this, config);
    	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    	        if (!this.isValid()) {
    	            this._d = new Date(NaN);
    	        }
    	        // Prevent infinite loop in case updateOffset creates new moment
    	        // objects.
    	        if (updateInProgress === false) {
    	            updateInProgress = true;
    	            hooks.updateOffset(this);
    	            updateInProgress = false;
    	        }
    	    }

    	    function isMoment(obj) {
    	        return (
    	            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
    	        );
    	    }

    	    function warn(msg) {
    	        if (
    	            hooks.suppressDeprecationWarnings === false &&
    	            typeof console !== 'undefined' &&
    	            console.warn
    	        ) {
    	            console.warn('Deprecation warning: ' + msg);
    	        }
    	    }

    	    function deprecate(msg, fn) {
    	        var firstTime = true;

    	        return extend(function () {
    	            if (hooks.deprecationHandler != null) {
    	                hooks.deprecationHandler(null, msg);
    	            }
    	            if (firstTime) {
    	                var args = [],
    	                    arg,
    	                    i,
    	                    key,
    	                    argLen = arguments.length;
    	                for (i = 0; i < argLen; i++) {
    	                    arg = '';
    	                    if (typeof arguments[i] === 'object') {
    	                        arg += '\n[' + i + '] ';
    	                        for (key in arguments[0]) {
    	                            if (hasOwnProp(arguments[0], key)) {
    	                                arg += key + ': ' + arguments[0][key] + ', ';
    	                            }
    	                        }
    	                        arg = arg.slice(0, -2); // Remove trailing comma and space
    	                    } else {
    	                        arg = arguments[i];
    	                    }
    	                    args.push(arg);
    	                }
    	                warn(
    	                    msg +
    	                        '\nArguments: ' +
    	                        Array.prototype.slice.call(args).join('') +
    	                        '\n' +
    	                        new Error().stack
    	                );
    	                firstTime = false;
    	            }
    	            return fn.apply(this, arguments);
    	        }, fn);
    	    }

    	    var deprecations = {};

    	    function deprecateSimple(name, msg) {
    	        if (hooks.deprecationHandler != null) {
    	            hooks.deprecationHandler(name, msg);
    	        }
    	        if (!deprecations[name]) {
    	            warn(msg);
    	            deprecations[name] = true;
    	        }
    	    }

    	    hooks.suppressDeprecationWarnings = false;
    	    hooks.deprecationHandler = null;

    	    function isFunction(input) {
    	        return (
    	            (typeof Function !== 'undefined' && input instanceof Function) ||
    	            Object.prototype.toString.call(input) === '[object Function]'
    	        );
    	    }

    	    function set(config) {
    	        var prop, i;
    	        for (i in config) {
    	            if (hasOwnProp(config, i)) {
    	                prop = config[i];
    	                if (isFunction(prop)) {
    	                    this[i] = prop;
    	                } else {
    	                    this['_' + i] = prop;
    	                }
    	            }
    	        }
    	        this._config = config;
    	        // Lenient ordinal parsing accepts just a number in addition to
    	        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    	        // TODO: Remove "ordinalParse" fallback in next major release.
    	        this._dayOfMonthOrdinalParseLenient = new RegExp(
    	            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
    	                '|' +
    	                /\d{1,2}/.source
    	        );
    	    }

    	    function mergeConfigs(parentConfig, childConfig) {
    	        var res = extend({}, parentConfig),
    	            prop;
    	        for (prop in childConfig) {
    	            if (hasOwnProp(childConfig, prop)) {
    	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
    	                    res[prop] = {};
    	                    extend(res[prop], parentConfig[prop]);
    	                    extend(res[prop], childConfig[prop]);
    	                } else if (childConfig[prop] != null) {
    	                    res[prop] = childConfig[prop];
    	                } else {
    	                    delete res[prop];
    	                }
    	            }
    	        }
    	        for (prop in parentConfig) {
    	            if (
    	                hasOwnProp(parentConfig, prop) &&
    	                !hasOwnProp(childConfig, prop) &&
    	                isObject(parentConfig[prop])
    	            ) {
    	                // make sure changes to properties don't modify parent config
    	                res[prop] = extend({}, res[prop]);
    	            }
    	        }
    	        return res;
    	    }

    	    function Locale(config) {
    	        if (config != null) {
    	            this.set(config);
    	        }
    	    }

    	    var keys;

    	    if (Object.keys) {
    	        keys = Object.keys;
    	    } else {
    	        keys = function (obj) {
    	            var i,
    	                res = [];
    	            for (i in obj) {
    	                if (hasOwnProp(obj, i)) {
    	                    res.push(i);
    	                }
    	            }
    	            return res;
    	        };
    	    }

    	    var defaultCalendar = {
    	        sameDay: '[Today at] LT',
    	        nextDay: '[Tomorrow at] LT',
    	        nextWeek: 'dddd [at] LT',
    	        lastDay: '[Yesterday at] LT',
    	        lastWeek: '[Last] dddd [at] LT',
    	        sameElse: 'L',
    	    };

    	    function calendar(key, mom, now) {
    	        var output = this._calendar[key] || this._calendar['sameElse'];
    	        return isFunction(output) ? output.call(mom, now) : output;
    	    }

    	    function zeroFill(number, targetLength, forceSign) {
    	        var absNumber = '' + Math.abs(number),
    	            zerosToFill = targetLength - absNumber.length,
    	            sign = number >= 0;
    	        return (
    	            (sign ? (forceSign ? '+' : '') : '-') +
    	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
    	            absNumber
    	        );
    	    }

    	    var formattingTokens =
    	            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
    	        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
    	        formatFunctions = {},
    	        formatTokenFunctions = {};

    	    // token:    'M'
    	    // padded:   ['MM', 2]
    	    // ordinal:  'Mo'
    	    // callback: function () { this.month() + 1 }
    	    function addFormatToken(token, padded, ordinal, callback) {
    	        var func = callback;
    	        if (typeof callback === 'string') {
    	            func = function () {
    	                return this[callback]();
    	            };
    	        }
    	        if (token) {
    	            formatTokenFunctions[token] = func;
    	        }
    	        if (padded) {
    	            formatTokenFunctions[padded[0]] = function () {
    	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
    	            };
    	        }
    	        if (ordinal) {
    	            formatTokenFunctions[ordinal] = function () {
    	                return this.localeData().ordinal(
    	                    func.apply(this, arguments),
    	                    token
    	                );
    	            };
    	        }
    	    }

    	    function removeFormattingTokens(input) {
    	        if (input.match(/\[[\s\S]/)) {
    	            return input.replace(/^\[|\]$/g, '');
    	        }
    	        return input.replace(/\\/g, '');
    	    }

    	    function makeFormatFunction(format) {
    	        var array = format.match(formattingTokens),
    	            i,
    	            length;

    	        for (i = 0, length = array.length; i < length; i++) {
    	            if (formatTokenFunctions[array[i]]) {
    	                array[i] = formatTokenFunctions[array[i]];
    	            } else {
    	                array[i] = removeFormattingTokens(array[i]);
    	            }
    	        }

    	        return function (mom) {
    	            var output = '',
    	                i;
    	            for (i = 0; i < length; i++) {
    	                output += isFunction(array[i])
    	                    ? array[i].call(mom, format)
    	                    : array[i];
    	            }
    	            return output;
    	        };
    	    }

    	    // format date using native date object
    	    function formatMoment(m, format) {
    	        if (!m.isValid()) {
    	            return m.localeData().invalidDate();
    	        }

    	        format = expandFormat(format, m.localeData());
    	        formatFunctions[format] =
    	            formatFunctions[format] || makeFormatFunction(format);

    	        return formatFunctions[format](m);
    	    }

    	    function expandFormat(format, locale) {
    	        var i = 5;

    	        function replaceLongDateFormatTokens(input) {
    	            return locale.longDateFormat(input) || input;
    	        }

    	        localFormattingTokens.lastIndex = 0;
    	        while (i >= 0 && localFormattingTokens.test(format)) {
    	            format = format.replace(
    	                localFormattingTokens,
    	                replaceLongDateFormatTokens
    	            );
    	            localFormattingTokens.lastIndex = 0;
    	            i -= 1;
    	        }

    	        return format;
    	    }

    	    var defaultLongDateFormat = {
    	        LTS: 'h:mm:ss A',
    	        LT: 'h:mm A',
    	        L: 'MM/DD/YYYY',
    	        LL: 'MMMM D, YYYY',
    	        LLL: 'MMMM D, YYYY h:mm A',
    	        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    	    };

    	    function longDateFormat(key) {
    	        var format = this._longDateFormat[key],
    	            formatUpper = this._longDateFormat[key.toUpperCase()];

    	        if (format || !formatUpper) {
    	            return format;
    	        }

    	        this._longDateFormat[key] = formatUpper
    	            .match(formattingTokens)
    	            .map(function (tok) {
    	                if (
    	                    tok === 'MMMM' ||
    	                    tok === 'MM' ||
    	                    tok === 'DD' ||
    	                    tok === 'dddd'
    	                ) {
    	                    return tok.slice(1);
    	                }
    	                return tok;
    	            })
    	            .join('');

    	        return this._longDateFormat[key];
    	    }

    	    var defaultInvalidDate = 'Invalid date';

    	    function invalidDate() {
    	        return this._invalidDate;
    	    }

    	    var defaultOrdinal = '%d',
    	        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    	    function ordinal(number) {
    	        return this._ordinal.replace('%d', number);
    	    }

    	    var defaultRelativeTime = {
    	        future: 'in %s',
    	        past: '%s ago',
    	        s: 'a few seconds',
    	        ss: '%d seconds',
    	        m: 'a minute',
    	        mm: '%d minutes',
    	        h: 'an hour',
    	        hh: '%d hours',
    	        d: 'a day',
    	        dd: '%d days',
    	        w: 'a week',
    	        ww: '%d weeks',
    	        M: 'a month',
    	        MM: '%d months',
    	        y: 'a year',
    	        yy: '%d years',
    	    };

    	    function relativeTime(number, withoutSuffix, string, isFuture) {
    	        var output = this._relativeTime[string];
    	        return isFunction(output)
    	            ? output(number, withoutSuffix, string, isFuture)
    	            : output.replace(/%d/i, number);
    	    }

    	    function pastFuture(diff, output) {
    	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    	    }

    	    var aliases = {
    	        D: 'date',
    	        dates: 'date',
    	        date: 'date',
    	        d: 'day',
    	        days: 'day',
    	        day: 'day',
    	        e: 'weekday',
    	        weekdays: 'weekday',
    	        weekday: 'weekday',
    	        E: 'isoWeekday',
    	        isoweekdays: 'isoWeekday',
    	        isoweekday: 'isoWeekday',
    	        DDD: 'dayOfYear',
    	        dayofyears: 'dayOfYear',
    	        dayofyear: 'dayOfYear',
    	        h: 'hour',
    	        hours: 'hour',
    	        hour: 'hour',
    	        ms: 'millisecond',
    	        milliseconds: 'millisecond',
    	        millisecond: 'millisecond',
    	        m: 'minute',
    	        minutes: 'minute',
    	        minute: 'minute',
    	        M: 'month',
    	        months: 'month',
    	        month: 'month',
    	        Q: 'quarter',
    	        quarters: 'quarter',
    	        quarter: 'quarter',
    	        s: 'second',
    	        seconds: 'second',
    	        second: 'second',
    	        gg: 'weekYear',
    	        weekyears: 'weekYear',
    	        weekyear: 'weekYear',
    	        GG: 'isoWeekYear',
    	        isoweekyears: 'isoWeekYear',
    	        isoweekyear: 'isoWeekYear',
    	        w: 'week',
    	        weeks: 'week',
    	        week: 'week',
    	        W: 'isoWeek',
    	        isoweeks: 'isoWeek',
    	        isoweek: 'isoWeek',
    	        y: 'year',
    	        years: 'year',
    	        year: 'year',
    	    };

    	    function normalizeUnits(units) {
    	        return typeof units === 'string'
    	            ? aliases[units] || aliases[units.toLowerCase()]
    	            : undefined;
    	    }

    	    function normalizeObjectUnits(inputObject) {
    	        var normalizedInput = {},
    	            normalizedProp,
    	            prop;

    	        for (prop in inputObject) {
    	            if (hasOwnProp(inputObject, prop)) {
    	                normalizedProp = normalizeUnits(prop);
    	                if (normalizedProp) {
    	                    normalizedInput[normalizedProp] = inputObject[prop];
    	                }
    	            }
    	        }

    	        return normalizedInput;
    	    }

    	    var priorities = {
    	        date: 9,
    	        day: 11,
    	        weekday: 11,
    	        isoWeekday: 11,
    	        dayOfYear: 4,
    	        hour: 13,
    	        millisecond: 16,
    	        minute: 14,
    	        month: 8,
    	        quarter: 7,
    	        second: 15,
    	        weekYear: 1,
    	        isoWeekYear: 1,
    	        week: 5,
    	        isoWeek: 5,
    	        year: 1,
    	    };

    	    function getPrioritizedUnits(unitsObj) {
    	        var units = [],
    	            u;
    	        for (u in unitsObj) {
    	            if (hasOwnProp(unitsObj, u)) {
    	                units.push({ unit: u, priority: priorities[u] });
    	            }
    	        }
    	        units.sort(function (a, b) {
    	            return a.priority - b.priority;
    	        });
    	        return units;
    	    }

    	    var match1 = /\d/, //       0 - 9
    	        match2 = /\d\d/, //      00 - 99
    	        match3 = /\d{3}/, //     000 - 999
    	        match4 = /\d{4}/, //    0000 - 9999
    	        match6 = /[+-]?\d{6}/, // -999999 - 999999
    	        match1to2 = /\d\d?/, //       0 - 99
    	        match3to4 = /\d\d\d\d?/, //     999 - 9999
    	        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
    	        match1to3 = /\d{1,3}/, //       0 - 999
    	        match1to4 = /\d{1,4}/, //       0 - 9999
    	        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
    	        matchUnsigned = /\d+/, //       0 - inf
    	        matchSigned = /[+-]?\d+/, //    -inf - inf
    	        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
    	        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
    	        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
    	        // any word (or two) characters or numbers including two/three word month in arabic.
    	        // includes scottish gaelic two word and hyphenated months
    	        matchWord =
    	            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
    	        match1to2NoLeadingZero = /^[1-9]\d?/, //         1-99
    	        match1to2HasZero = /^([1-9]\d|\d)/, //           0-99
    	        regexes;

    	    regexes = {};

    	    function addRegexToken(token, regex, strictRegex) {
    	        regexes[token] = isFunction(regex)
    	            ? regex
    	            : function (isStrict, localeData) {
    	                  return isStrict && strictRegex ? strictRegex : regex;
    	              };
    	    }

    	    function getParseRegexForToken(token, config) {
    	        if (!hasOwnProp(regexes, token)) {
    	            return new RegExp(unescapeFormat(token));
    	        }

    	        return regexes[token](config._strict, config._locale);
    	    }

    	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    	    function unescapeFormat(s) {
    	        return regexEscape(
    	            s
    	                .replace('\\', '')
    	                .replace(
    	                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
    	                    function (matched, p1, p2, p3, p4) {
    	                        return p1 || p2 || p3 || p4;
    	                    }
    	                )
    	        );
    	    }

    	    function regexEscape(s) {
    	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    	    }

    	    function absFloor(number) {
    	        if (number < 0) {
    	            // -0 -> 0
    	            return Math.ceil(number) || 0;
    	        } else {
    	            return Math.floor(number);
    	        }
    	    }

    	    function toInt(argumentForCoercion) {
    	        var coercedNumber = +argumentForCoercion,
    	            value = 0;

    	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
    	            value = absFloor(coercedNumber);
    	        }

    	        return value;
    	    }

    	    var tokens = {};

    	    function addParseToken(token, callback) {
    	        var i,
    	            func = callback,
    	            tokenLen;
    	        if (typeof token === 'string') {
    	            token = [token];
    	        }
    	        if (isNumber(callback)) {
    	            func = function (input, array) {
    	                array[callback] = toInt(input);
    	            };
    	        }
    	        tokenLen = token.length;
    	        for (i = 0; i < tokenLen; i++) {
    	            tokens[token[i]] = func;
    	        }
    	    }

    	    function addWeekParseToken(token, callback) {
    	        addParseToken(token, function (input, array, config, token) {
    	            config._w = config._w || {};
    	            callback(input, config._w, config, token);
    	        });
    	    }

    	    function addTimeToArrayFromToken(token, input, config) {
    	        if (input != null && hasOwnProp(tokens, token)) {
    	            tokens[token](input, config._a, config, token);
    	        }
    	    }

    	    function isLeapYear(year) {
    	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    	    }

    	    var YEAR = 0,
    	        MONTH = 1,
    	        DATE = 2,
    	        HOUR = 3,
    	        MINUTE = 4,
    	        SECOND = 5,
    	        MILLISECOND = 6,
    	        WEEK = 7,
    	        WEEKDAY = 8;

    	    // FORMATTING

    	    addFormatToken('Y', 0, 0, function () {
    	        var y = this.year();
    	        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    	    });

    	    addFormatToken(0, ['YY', 2], 0, function () {
    	        return this.year() % 100;
    	    });

    	    addFormatToken(0, ['YYYY', 4], 0, 'year');
    	    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    	    // PARSING

    	    addRegexToken('Y', matchSigned);
    	    addRegexToken('YY', match1to2, match2);
    	    addRegexToken('YYYY', match1to4, match4);
    	    addRegexToken('YYYYY', match1to6, match6);
    	    addRegexToken('YYYYYY', match1to6, match6);

    	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    	    addParseToken('YYYY', function (input, array) {
    	        array[YEAR] =
    	            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    	    });
    	    addParseToken('YY', function (input, array) {
    	        array[YEAR] = hooks.parseTwoDigitYear(input);
    	    });
    	    addParseToken('Y', function (input, array) {
    	        array[YEAR] = parseInt(input, 10);
    	    });

    	    // HELPERS

    	    function daysInYear(year) {
    	        return isLeapYear(year) ? 366 : 365;
    	    }

    	    // HOOKS

    	    hooks.parseTwoDigitYear = function (input) {
    	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    	    };

    	    // MOMENTS

    	    var getSetYear = makeGetSet('FullYear', true);

    	    function getIsLeapYear() {
    	        return isLeapYear(this.year());
    	    }

    	    function makeGetSet(unit, keepTime) {
    	        return function (value) {
    	            if (value != null) {
    	                set$1(this, unit, value);
    	                hooks.updateOffset(this, keepTime);
    	                return this;
    	            } else {
    	                return get(this, unit);
    	            }
    	        };
    	    }

    	    function get(mom, unit) {
    	        if (!mom.isValid()) {
    	            return NaN;
    	        }

    	        var d = mom._d,
    	            isUTC = mom._isUTC;

    	        switch (unit) {
    	            case 'Milliseconds':
    	                return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
    	            case 'Seconds':
    	                return isUTC ? d.getUTCSeconds() : d.getSeconds();
    	            case 'Minutes':
    	                return isUTC ? d.getUTCMinutes() : d.getMinutes();
    	            case 'Hours':
    	                return isUTC ? d.getUTCHours() : d.getHours();
    	            case 'Date':
    	                return isUTC ? d.getUTCDate() : d.getDate();
    	            case 'Day':
    	                return isUTC ? d.getUTCDay() : d.getDay();
    	            case 'Month':
    	                return isUTC ? d.getUTCMonth() : d.getMonth();
    	            case 'FullYear':
    	                return isUTC ? d.getUTCFullYear() : d.getFullYear();
    	            default:
    	                return NaN; // Just in case
    	        }
    	    }

    	    function set$1(mom, unit, value) {
    	        var d, isUTC, year, month, date;

    	        if (!mom.isValid() || isNaN(value)) {
    	            return;
    	        }

    	        d = mom._d;
    	        isUTC = mom._isUTC;

    	        switch (unit) {
    	            case 'Milliseconds':
    	                return void (isUTC
    	                    ? d.setUTCMilliseconds(value)
    	                    : d.setMilliseconds(value));
    	            case 'Seconds':
    	                return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
    	            case 'Minutes':
    	                return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
    	            case 'Hours':
    	                return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
    	            case 'Date':
    	                return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
    	            // case 'Day': // Not real
    	            //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
    	            // case 'Month': // Not used because we need to pass two variables
    	            //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
    	            case 'FullYear':
    	                break; // See below ...
    	            default:
    	                return; // Just in case
    	        }

    	        year = value;
    	        month = mom.month();
    	        date = mom.date();
    	        date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
    	        void (isUTC
    	            ? d.setUTCFullYear(year, month, date)
    	            : d.setFullYear(year, month, date));
    	    }

    	    // MOMENTS

    	    function stringGet(units) {
    	        units = normalizeUnits(units);
    	        if (isFunction(this[units])) {
    	            return this[units]();
    	        }
    	        return this;
    	    }

    	    function stringSet(units, value) {
    	        if (typeof units === 'object') {
    	            units = normalizeObjectUnits(units);
    	            var prioritized = getPrioritizedUnits(units),
    	                i,
    	                prioritizedLen = prioritized.length;
    	            for (i = 0; i < prioritizedLen; i++) {
    	                this[prioritized[i].unit](units[prioritized[i].unit]);
    	            }
    	        } else {
    	            units = normalizeUnits(units);
    	            if (isFunction(this[units])) {
    	                return this[units](value);
    	            }
    	        }
    	        return this;
    	    }

    	    function mod(n, x) {
    	        return ((n % x) + x) % x;
    	    }

    	    var indexOf;

    	    if (Array.prototype.indexOf) {
    	        indexOf = Array.prototype.indexOf;
    	    } else {
    	        indexOf = function (o) {
    	            // I know
    	            var i;
    	            for (i = 0; i < this.length; ++i) {
    	                if (this[i] === o) {
    	                    return i;
    	                }
    	            }
    	            return -1;
    	        };
    	    }

    	    function daysInMonth(year, month) {
    	        if (isNaN(year) || isNaN(month)) {
    	            return NaN;
    	        }
    	        var modMonth = mod(month, 12);
    	        year += (month - modMonth) / 12;
    	        return modMonth === 1
    	            ? isLeapYear(year)
    	                ? 29
    	                : 28
    	            : 31 - ((modMonth % 7) % 2);
    	    }

    	    // FORMATTING

    	    addFormatToken('M', ['MM', 2], 'Mo', function () {
    	        return this.month() + 1;
    	    });

    	    addFormatToken('MMM', 0, 0, function (format) {
    	        return this.localeData().monthsShort(this, format);
    	    });

    	    addFormatToken('MMMM', 0, 0, function (format) {
    	        return this.localeData().months(this, format);
    	    });

    	    // PARSING

    	    addRegexToken('M', match1to2, match1to2NoLeadingZero);
    	    addRegexToken('MM', match1to2, match2);
    	    addRegexToken('MMM', function (isStrict, locale) {
    	        return locale.monthsShortRegex(isStrict);
    	    });
    	    addRegexToken('MMMM', function (isStrict, locale) {
    	        return locale.monthsRegex(isStrict);
    	    });

    	    addParseToken(['M', 'MM'], function (input, array) {
    	        array[MONTH] = toInt(input) - 1;
    	    });

    	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    	        var month = config._locale.monthsParse(input, token, config._strict);
    	        // if we didn't find a month name, mark the date as invalid.
    	        if (month != null) {
    	            array[MONTH] = month;
    	        } else {
    	            getParsingFlags(config).invalidMonth = input;
    	        }
    	    });

    	    // LOCALES

    	    var defaultLocaleMonths =
    	            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
    	                '_'
    	            ),
    	        defaultLocaleMonthsShort =
    	            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    	        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
    	        defaultMonthsShortRegex = matchWord,
    	        defaultMonthsRegex = matchWord;

    	    function localeMonths(m, format) {
    	        if (!m) {
    	            return isArray(this._months)
    	                ? this._months
    	                : this._months['standalone'];
    	        }
    	        return isArray(this._months)
    	            ? this._months[m.month()]
    	            : this._months[
    	                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
    	                      ? 'format'
    	                      : 'standalone'
    	              ][m.month()];
    	    }

    	    function localeMonthsShort(m, format) {
    	        if (!m) {
    	            return isArray(this._monthsShort)
    	                ? this._monthsShort
    	                : this._monthsShort['standalone'];
    	        }
    	        return isArray(this._monthsShort)
    	            ? this._monthsShort[m.month()]
    	            : this._monthsShort[
    	                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
    	              ][m.month()];
    	    }

    	    function handleStrictParse(monthName, format, strict) {
    	        var i,
    	            ii,
    	            mom,
    	            llc = monthName.toLocaleLowerCase();
    	        if (!this._monthsParse) {
    	            // this is not used
    	            this._monthsParse = [];
    	            this._longMonthsParse = [];
    	            this._shortMonthsParse = [];
    	            for (i = 0; i < 12; ++i) {
    	                mom = createUTC([2000, i]);
    	                this._shortMonthsParse[i] = this.monthsShort(
    	                    mom,
    	                    ''
    	                ).toLocaleLowerCase();
    	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
    	            }
    	        }

    	        if (strict) {
    	            if (format === 'MMM') {
    	                ii = indexOf.call(this._shortMonthsParse, llc);
    	                return ii !== -1 ? ii : null;
    	            } else {
    	                ii = indexOf.call(this._longMonthsParse, llc);
    	                return ii !== -1 ? ii : null;
    	            }
    	        } else {
    	            if (format === 'MMM') {
    	                ii = indexOf.call(this._shortMonthsParse, llc);
    	                if (ii !== -1) {
    	                    return ii;
    	                }
    	                ii = indexOf.call(this._longMonthsParse, llc);
    	                return ii !== -1 ? ii : null;
    	            } else {
    	                ii = indexOf.call(this._longMonthsParse, llc);
    	                if (ii !== -1) {
    	                    return ii;
    	                }
    	                ii = indexOf.call(this._shortMonthsParse, llc);
    	                return ii !== -1 ? ii : null;
    	            }
    	        }
    	    }

    	    function localeMonthsParse(monthName, format, strict) {
    	        var i, mom, regex;

    	        if (this._monthsParseExact) {
    	            return handleStrictParse.call(this, monthName, format, strict);
    	        }

    	        if (!this._monthsParse) {
    	            this._monthsParse = [];
    	            this._longMonthsParse = [];
    	            this._shortMonthsParse = [];
    	        }

    	        // TODO: add sorting
    	        // Sorting makes sure if one month (or abbr) is a prefix of another
    	        // see sorting in computeMonthsParse
    	        for (i = 0; i < 12; i++) {
    	            // make the regex if we don't have it already
    	            mom = createUTC([2000, i]);
    	            if (strict && !this._longMonthsParse[i]) {
    	                this._longMonthsParse[i] = new RegExp(
    	                    '^' + this.months(mom, '').replace('.', '') + '$',
    	                    'i'
    	                );
    	                this._shortMonthsParse[i] = new RegExp(
    	                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
    	                    'i'
    	                );
    	            }
    	            if (!strict && !this._monthsParse[i]) {
    	                regex =
    	                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
    	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
    	            }
    	            // test the regex
    	            if (
    	                strict &&
    	                format === 'MMMM' &&
    	                this._longMonthsParse[i].test(monthName)
    	            ) {
    	                return i;
    	            } else if (
    	                strict &&
    	                format === 'MMM' &&
    	                this._shortMonthsParse[i].test(monthName)
    	            ) {
    	                return i;
    	            } else if (!strict && this._monthsParse[i].test(monthName)) {
    	                return i;
    	            }
    	        }
    	    }

    	    // MOMENTS

    	    function setMonth(mom, value) {
    	        if (!mom.isValid()) {
    	            // No op
    	            return mom;
    	        }

    	        if (typeof value === 'string') {
    	            if (/^\d+$/.test(value)) {
    	                value = toInt(value);
    	            } else {
    	                value = mom.localeData().monthsParse(value);
    	                // TODO: Another silent failure?
    	                if (!isNumber(value)) {
    	                    return mom;
    	                }
    	            }
    	        }

    	        var month = value,
    	            date = mom.date();

    	        date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
    	        void (mom._isUTC
    	            ? mom._d.setUTCMonth(month, date)
    	            : mom._d.setMonth(month, date));
    	        return mom;
    	    }

    	    function getSetMonth(value) {
    	        if (value != null) {
    	            setMonth(this, value);
    	            hooks.updateOffset(this, true);
    	            return this;
    	        } else {
    	            return get(this, 'Month');
    	        }
    	    }

    	    function getDaysInMonth() {
    	        return daysInMonth(this.year(), this.month());
    	    }

    	    function monthsShortRegex(isStrict) {
    	        if (this._monthsParseExact) {
    	            if (!hasOwnProp(this, '_monthsRegex')) {
    	                computeMonthsParse.call(this);
    	            }
    	            if (isStrict) {
    	                return this._monthsShortStrictRegex;
    	            } else {
    	                return this._monthsShortRegex;
    	            }
    	        } else {
    	            if (!hasOwnProp(this, '_monthsShortRegex')) {
    	                this._monthsShortRegex = defaultMonthsShortRegex;
    	            }
    	            return this._monthsShortStrictRegex && isStrict
    	                ? this._monthsShortStrictRegex
    	                : this._monthsShortRegex;
    	        }
    	    }

    	    function monthsRegex(isStrict) {
    	        if (this._monthsParseExact) {
    	            if (!hasOwnProp(this, '_monthsRegex')) {
    	                computeMonthsParse.call(this);
    	            }
    	            if (isStrict) {
    	                return this._monthsStrictRegex;
    	            } else {
    	                return this._monthsRegex;
    	            }
    	        } else {
    	            if (!hasOwnProp(this, '_monthsRegex')) {
    	                this._monthsRegex = defaultMonthsRegex;
    	            }
    	            return this._monthsStrictRegex && isStrict
    	                ? this._monthsStrictRegex
    	                : this._monthsRegex;
    	        }
    	    }

    	    function computeMonthsParse() {
    	        function cmpLenRev(a, b) {
    	            return b.length - a.length;
    	        }

    	        var shortPieces = [],
    	            longPieces = [],
    	            mixedPieces = [],
    	            i,
    	            mom,
    	            shortP,
    	            longP;
    	        for (i = 0; i < 12; i++) {
    	            // make the regex if we don't have it already
    	            mom = createUTC([2000, i]);
    	            shortP = regexEscape(this.monthsShort(mom, ''));
    	            longP = regexEscape(this.months(mom, ''));
    	            shortPieces.push(shortP);
    	            longPieces.push(longP);
    	            mixedPieces.push(longP);
    	            mixedPieces.push(shortP);
    	        }
    	        // Sorting makes sure if one month (or abbr) is a prefix of another it
    	        // will match the longer piece.
    	        shortPieces.sort(cmpLenRev);
    	        longPieces.sort(cmpLenRev);
    	        mixedPieces.sort(cmpLenRev);

    	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    	        this._monthsShortRegex = this._monthsRegex;
    	        this._monthsStrictRegex = new RegExp(
    	            '^(' + longPieces.join('|') + ')',
    	            'i'
    	        );
    	        this._monthsShortStrictRegex = new RegExp(
    	            '^(' + shortPieces.join('|') + ')',
    	            'i'
    	        );
    	    }

    	    function createDate(y, m, d, h, M, s, ms) {
    	        // can't just apply() to create a date:
    	        // https://stackoverflow.com/q/181348
    	        var date;
    	        // the date constructor remaps years 0-99 to 1900-1999
    	        if (y < 100 && y >= 0) {
    	            // preserve leap years using a full 400 year cycle, then reset
    	            date = new Date(y + 400, m, d, h, M, s, ms);
    	            if (isFinite(date.getFullYear())) {
    	                date.setFullYear(y);
    	            }
    	        } else {
    	            date = new Date(y, m, d, h, M, s, ms);
    	        }

    	        return date;
    	    }

    	    function createUTCDate(y) {
    	        var date, args;
    	        // the Date.UTC function remaps years 0-99 to 1900-1999
    	        if (y < 100 && y >= 0) {
    	            args = Array.prototype.slice.call(arguments);
    	            // preserve leap years using a full 400 year cycle, then reset
    	            args[0] = y + 400;
    	            date = new Date(Date.UTC.apply(null, args));
    	            if (isFinite(date.getUTCFullYear())) {
    	                date.setUTCFullYear(y);
    	            }
    	        } else {
    	            date = new Date(Date.UTC.apply(null, arguments));
    	        }

    	        return date;
    	    }

    	    // start-of-first-week - start-of-year
    	    function firstWeekOffset(year, dow, doy) {
    	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
    	            fwd = 7 + dow - doy,
    	            // first-week day local weekday -- which local weekday is fwd
    	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    	        return -fwdlw + fwd - 1;
    	    }

    	    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    	        var localWeekday = (7 + weekday - dow) % 7,
    	            weekOffset = firstWeekOffset(year, dow, doy),
    	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
    	            resYear,
    	            resDayOfYear;

    	        if (dayOfYear <= 0) {
    	            resYear = year - 1;
    	            resDayOfYear = daysInYear(resYear) + dayOfYear;
    	        } else if (dayOfYear > daysInYear(year)) {
    	            resYear = year + 1;
    	            resDayOfYear = dayOfYear - daysInYear(year);
    	        } else {
    	            resYear = year;
    	            resDayOfYear = dayOfYear;
    	        }

    	        return {
    	            year: resYear,
    	            dayOfYear: resDayOfYear,
    	        };
    	    }

    	    function weekOfYear(mom, dow, doy) {
    	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
    	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
    	            resWeek,
    	            resYear;

    	        if (week < 1) {
    	            resYear = mom.year() - 1;
    	            resWeek = week + weeksInYear(resYear, dow, doy);
    	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
    	            resWeek = week - weeksInYear(mom.year(), dow, doy);
    	            resYear = mom.year() + 1;
    	        } else {
    	            resYear = mom.year();
    	            resWeek = week;
    	        }

    	        return {
    	            week: resWeek,
    	            year: resYear,
    	        };
    	    }

    	    function weeksInYear(year, dow, doy) {
    	        var weekOffset = firstWeekOffset(year, dow, doy),
    	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    	    }

    	    // FORMATTING

    	    addFormatToken('w', ['ww', 2], 'wo', 'week');
    	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    	    // PARSING

    	    addRegexToken('w', match1to2, match1to2NoLeadingZero);
    	    addRegexToken('ww', match1to2, match2);
    	    addRegexToken('W', match1to2, match1to2NoLeadingZero);
    	    addRegexToken('WW', match1to2, match2);

    	    addWeekParseToken(
    	        ['w', 'ww', 'W', 'WW'],
    	        function (input, week, config, token) {
    	            week[token.substr(0, 1)] = toInt(input);
    	        }
    	    );

    	    // HELPERS

    	    // LOCALES

    	    function localeWeek(mom) {
    	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    	    }

    	    var defaultLocaleWeek = {
    	        dow: 0, // Sunday is the first day of the week.
    	        doy: 6, // The week that contains Jan 6th is the first week of the year.
    	    };

    	    function localeFirstDayOfWeek() {
    	        return this._week.dow;
    	    }

    	    function localeFirstDayOfYear() {
    	        return this._week.doy;
    	    }

    	    // MOMENTS

    	    function getSetWeek(input) {
    	        var week = this.localeData().week(this);
    	        return input == null ? week : this.add((input - week) * 7, 'd');
    	    }

    	    function getSetISOWeek(input) {
    	        var week = weekOfYear(this, 1, 4).week;
    	        return input == null ? week : this.add((input - week) * 7, 'd');
    	    }

    	    // FORMATTING

    	    addFormatToken('d', 0, 'do', 'day');

    	    addFormatToken('dd', 0, 0, function (format) {
    	        return this.localeData().weekdaysMin(this, format);
    	    });

    	    addFormatToken('ddd', 0, 0, function (format) {
    	        return this.localeData().weekdaysShort(this, format);
    	    });

    	    addFormatToken('dddd', 0, 0, function (format) {
    	        return this.localeData().weekdays(this, format);
    	    });

    	    addFormatToken('e', 0, 0, 'weekday');
    	    addFormatToken('E', 0, 0, 'isoWeekday');

    	    // PARSING

    	    addRegexToken('d', match1to2);
    	    addRegexToken('e', match1to2);
    	    addRegexToken('E', match1to2);
    	    addRegexToken('dd', function (isStrict, locale) {
    	        return locale.weekdaysMinRegex(isStrict);
    	    });
    	    addRegexToken('ddd', function (isStrict, locale) {
    	        return locale.weekdaysShortRegex(isStrict);
    	    });
    	    addRegexToken('dddd', function (isStrict, locale) {
    	        return locale.weekdaysRegex(isStrict);
    	    });

    	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
    	        // if we didn't get a weekday name, mark the date as invalid
    	        if (weekday != null) {
    	            week.d = weekday;
    	        } else {
    	            getParsingFlags(config).invalidWeekday = input;
    	        }
    	    });

    	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    	        week[token] = toInt(input);
    	    });

    	    // HELPERS

    	    function parseWeekday(input, locale) {
    	        if (typeof input !== 'string') {
    	            return input;
    	        }

    	        if (!isNaN(input)) {
    	            return parseInt(input, 10);
    	        }

    	        input = locale.weekdaysParse(input);
    	        if (typeof input === 'number') {
    	            return input;
    	        }

    	        return null;
    	    }

    	    function parseIsoWeekday(input, locale) {
    	        if (typeof input === 'string') {
    	            return locale.weekdaysParse(input) % 7 || 7;
    	        }
    	        return isNaN(input) ? null : input;
    	    }

    	    // LOCALES
    	    function shiftWeekdays(ws, n) {
    	        return ws.slice(n, 7).concat(ws.slice(0, n));
    	    }

    	    var defaultLocaleWeekdays =
    	            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    	        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    	        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    	        defaultWeekdaysRegex = matchWord,
    	        defaultWeekdaysShortRegex = matchWord,
    	        defaultWeekdaysMinRegex = matchWord;

    	    function localeWeekdays(m, format) {
    	        var weekdays = isArray(this._weekdays)
    	            ? this._weekdays
    	            : this._weekdays[
    	                  m && m !== true && this._weekdays.isFormat.test(format)
    	                      ? 'format'
    	                      : 'standalone'
    	              ];
    	        return m === true
    	            ? shiftWeekdays(weekdays, this._week.dow)
    	            : m
    	              ? weekdays[m.day()]
    	              : weekdays;
    	    }

    	    function localeWeekdaysShort(m) {
    	        return m === true
    	            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
    	            : m
    	              ? this._weekdaysShort[m.day()]
    	              : this._weekdaysShort;
    	    }

    	    function localeWeekdaysMin(m) {
    	        return m === true
    	            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
    	            : m
    	              ? this._weekdaysMin[m.day()]
    	              : this._weekdaysMin;
    	    }

    	    function handleStrictParse$1(weekdayName, format, strict) {
    	        var i,
    	            ii,
    	            mom,
    	            llc = weekdayName.toLocaleLowerCase();
    	        if (!this._weekdaysParse) {
    	            this._weekdaysParse = [];
    	            this._shortWeekdaysParse = [];
    	            this._minWeekdaysParse = [];

    	            for (i = 0; i < 7; ++i) {
    	                mom = createUTC([2000, 1]).day(i);
    	                this._minWeekdaysParse[i] = this.weekdaysMin(
    	                    mom,
    	                    ''
    	                ).toLocaleLowerCase();
    	                this._shortWeekdaysParse[i] = this.weekdaysShort(
    	                    mom,
    	                    ''
    	                ).toLocaleLowerCase();
    	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
    	            }
    	        }

    	        if (strict) {
    	            if (format === 'dddd') {
    	                ii = indexOf.call(this._weekdaysParse, llc);
    	                return ii !== -1 ? ii : null;
    	            } else if (format === 'ddd') {
    	                ii = indexOf.call(this._shortWeekdaysParse, llc);
    	                return ii !== -1 ? ii : null;
    	            } else {
    	                ii = indexOf.call(this._minWeekdaysParse, llc);
    	                return ii !== -1 ? ii : null;
    	            }
    	        } else {
    	            if (format === 'dddd') {
    	                ii = indexOf.call(this._weekdaysParse, llc);
    	                if (ii !== -1) {
    	                    return ii;
    	                }
    	                ii = indexOf.call(this._shortWeekdaysParse, llc);
    	                if (ii !== -1) {
    	                    return ii;
    	                }
    	                ii = indexOf.call(this._minWeekdaysParse, llc);
    	                return ii !== -1 ? ii : null;
    	            } else if (format === 'ddd') {
    	                ii = indexOf.call(this._shortWeekdaysParse, llc);
    	                if (ii !== -1) {
    	                    return ii;
    	                }
    	                ii = indexOf.call(this._weekdaysParse, llc);
    	                if (ii !== -1) {
    	                    return ii;
    	                }
    	                ii = indexOf.call(this._minWeekdaysParse, llc);
    	                return ii !== -1 ? ii : null;
    	            } else {
    	                ii = indexOf.call(this._minWeekdaysParse, llc);
    	                if (ii !== -1) {
    	                    return ii;
    	                }
    	                ii = indexOf.call(this._weekdaysParse, llc);
    	                if (ii !== -1) {
    	                    return ii;
    	                }
    	                ii = indexOf.call(this._shortWeekdaysParse, llc);
    	                return ii !== -1 ? ii : null;
    	            }
    	        }
    	    }

    	    function localeWeekdaysParse(weekdayName, format, strict) {
    	        var i, mom, regex;

    	        if (this._weekdaysParseExact) {
    	            return handleStrictParse$1.call(this, weekdayName, format, strict);
    	        }

    	        if (!this._weekdaysParse) {
    	            this._weekdaysParse = [];
    	            this._minWeekdaysParse = [];
    	            this._shortWeekdaysParse = [];
    	            this._fullWeekdaysParse = [];
    	        }

    	        for (i = 0; i < 7; i++) {
    	            // make the regex if we don't have it already

    	            mom = createUTC([2000, 1]).day(i);
    	            if (strict && !this._fullWeekdaysParse[i]) {
    	                this._fullWeekdaysParse[i] = new RegExp(
    	                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
    	                    'i'
    	                );
    	                this._shortWeekdaysParse[i] = new RegExp(
    	                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
    	                    'i'
    	                );
    	                this._minWeekdaysParse[i] = new RegExp(
    	                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
    	                    'i'
    	                );
    	            }
    	            if (!this._weekdaysParse[i]) {
    	                regex =
    	                    '^' +
    	                    this.weekdays(mom, '') +
    	                    '|^' +
    	                    this.weekdaysShort(mom, '') +
    	                    '|^' +
    	                    this.weekdaysMin(mom, '');
    	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
    	            }
    	            // test the regex
    	            if (
    	                strict &&
    	                format === 'dddd' &&
    	                this._fullWeekdaysParse[i].test(weekdayName)
    	            ) {
    	                return i;
    	            } else if (
    	                strict &&
    	                format === 'ddd' &&
    	                this._shortWeekdaysParse[i].test(weekdayName)
    	            ) {
    	                return i;
    	            } else if (
    	                strict &&
    	                format === 'dd' &&
    	                this._minWeekdaysParse[i].test(weekdayName)
    	            ) {
    	                return i;
    	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
    	                return i;
    	            }
    	        }
    	    }

    	    // MOMENTS

    	    function getSetDayOfWeek(input) {
    	        if (!this.isValid()) {
    	            return input != null ? this : NaN;
    	        }

    	        var day = get(this, 'Day');
    	        if (input != null) {
    	            input = parseWeekday(input, this.localeData());
    	            return this.add(input - day, 'd');
    	        } else {
    	            return day;
    	        }
    	    }

    	    function getSetLocaleDayOfWeek(input) {
    	        if (!this.isValid()) {
    	            return input != null ? this : NaN;
    	        }
    	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    	        return input == null ? weekday : this.add(input - weekday, 'd');
    	    }

    	    function getSetISODayOfWeek(input) {
    	        if (!this.isValid()) {
    	            return input != null ? this : NaN;
    	        }

    	        // behaves the same as moment#day except
    	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    	        // as a setter, sunday should belong to the previous week.

    	        if (input != null) {
    	            var weekday = parseIsoWeekday(input, this.localeData());
    	            return this.day(this.day() % 7 ? weekday : weekday - 7);
    	        } else {
    	            return this.day() || 7;
    	        }
    	    }

    	    function weekdaysRegex(isStrict) {
    	        if (this._weekdaysParseExact) {
    	            if (!hasOwnProp(this, '_weekdaysRegex')) {
    	                computeWeekdaysParse.call(this);
    	            }
    	            if (isStrict) {
    	                return this._weekdaysStrictRegex;
    	            } else {
    	                return this._weekdaysRegex;
    	            }
    	        } else {
    	            if (!hasOwnProp(this, '_weekdaysRegex')) {
    	                this._weekdaysRegex = defaultWeekdaysRegex;
    	            }
    	            return this._weekdaysStrictRegex && isStrict
    	                ? this._weekdaysStrictRegex
    	                : this._weekdaysRegex;
    	        }
    	    }

    	    function weekdaysShortRegex(isStrict) {
    	        if (this._weekdaysParseExact) {
    	            if (!hasOwnProp(this, '_weekdaysRegex')) {
    	                computeWeekdaysParse.call(this);
    	            }
    	            if (isStrict) {
    	                return this._weekdaysShortStrictRegex;
    	            } else {
    	                return this._weekdaysShortRegex;
    	            }
    	        } else {
    	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
    	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
    	            }
    	            return this._weekdaysShortStrictRegex && isStrict
    	                ? this._weekdaysShortStrictRegex
    	                : this._weekdaysShortRegex;
    	        }
    	    }

    	    function weekdaysMinRegex(isStrict) {
    	        if (this._weekdaysParseExact) {
    	            if (!hasOwnProp(this, '_weekdaysRegex')) {
    	                computeWeekdaysParse.call(this);
    	            }
    	            if (isStrict) {
    	                return this._weekdaysMinStrictRegex;
    	            } else {
    	                return this._weekdaysMinRegex;
    	            }
    	        } else {
    	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
    	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
    	            }
    	            return this._weekdaysMinStrictRegex && isStrict
    	                ? this._weekdaysMinStrictRegex
    	                : this._weekdaysMinRegex;
    	        }
    	    }

    	    function computeWeekdaysParse() {
    	        function cmpLenRev(a, b) {
    	            return b.length - a.length;
    	        }

    	        var minPieces = [],
    	            shortPieces = [],
    	            longPieces = [],
    	            mixedPieces = [],
    	            i,
    	            mom,
    	            minp,
    	            shortp,
    	            longp;
    	        for (i = 0; i < 7; i++) {
    	            // make the regex if we don't have it already
    	            mom = createUTC([2000, 1]).day(i);
    	            minp = regexEscape(this.weekdaysMin(mom, ''));
    	            shortp = regexEscape(this.weekdaysShort(mom, ''));
    	            longp = regexEscape(this.weekdays(mom, ''));
    	            minPieces.push(minp);
    	            shortPieces.push(shortp);
    	            longPieces.push(longp);
    	            mixedPieces.push(minp);
    	            mixedPieces.push(shortp);
    	            mixedPieces.push(longp);
    	        }
    	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    	        // will match the longer piece.
    	        minPieces.sort(cmpLenRev);
    	        shortPieces.sort(cmpLenRev);
    	        longPieces.sort(cmpLenRev);
    	        mixedPieces.sort(cmpLenRev);

    	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    	        this._weekdaysShortRegex = this._weekdaysRegex;
    	        this._weekdaysMinRegex = this._weekdaysRegex;

    	        this._weekdaysStrictRegex = new RegExp(
    	            '^(' + longPieces.join('|') + ')',
    	            'i'
    	        );
    	        this._weekdaysShortStrictRegex = new RegExp(
    	            '^(' + shortPieces.join('|') + ')',
    	            'i'
    	        );
    	        this._weekdaysMinStrictRegex = new RegExp(
    	            '^(' + minPieces.join('|') + ')',
    	            'i'
    	        );
    	    }

    	    // FORMATTING

    	    function hFormat() {
    	        return this.hours() % 12 || 12;
    	    }

    	    function kFormat() {
    	        return this.hours() || 24;
    	    }

    	    addFormatToken('H', ['HH', 2], 0, 'hour');
    	    addFormatToken('h', ['hh', 2], 0, hFormat);
    	    addFormatToken('k', ['kk', 2], 0, kFormat);

    	    addFormatToken('hmm', 0, 0, function () {
    	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    	    });

    	    addFormatToken('hmmss', 0, 0, function () {
    	        return (
    	            '' +
    	            hFormat.apply(this) +
    	            zeroFill(this.minutes(), 2) +
    	            zeroFill(this.seconds(), 2)
    	        );
    	    });

    	    addFormatToken('Hmm', 0, 0, function () {
    	        return '' + this.hours() + zeroFill(this.minutes(), 2);
    	    });

    	    addFormatToken('Hmmss', 0, 0, function () {
    	        return (
    	            '' +
    	            this.hours() +
    	            zeroFill(this.minutes(), 2) +
    	            zeroFill(this.seconds(), 2)
    	        );
    	    });

    	    function meridiem(token, lowercase) {
    	        addFormatToken(token, 0, 0, function () {
    	            return this.localeData().meridiem(
    	                this.hours(),
    	                this.minutes(),
    	                lowercase
    	            );
    	        });
    	    }

    	    meridiem('a', true);
    	    meridiem('A', false);

    	    // PARSING

    	    function matchMeridiem(isStrict, locale) {
    	        return locale._meridiemParse;
    	    }

    	    addRegexToken('a', matchMeridiem);
    	    addRegexToken('A', matchMeridiem);
    	    addRegexToken('H', match1to2, match1to2HasZero);
    	    addRegexToken('h', match1to2, match1to2NoLeadingZero);
    	    addRegexToken('k', match1to2, match1to2NoLeadingZero);
    	    addRegexToken('HH', match1to2, match2);
    	    addRegexToken('hh', match1to2, match2);
    	    addRegexToken('kk', match1to2, match2);

    	    addRegexToken('hmm', match3to4);
    	    addRegexToken('hmmss', match5to6);
    	    addRegexToken('Hmm', match3to4);
    	    addRegexToken('Hmmss', match5to6);

    	    addParseToken(['H', 'HH'], HOUR);
    	    addParseToken(['k', 'kk'], function (input, array, config) {
    	        var kInput = toInt(input);
    	        array[HOUR] = kInput === 24 ? 0 : kInput;
    	    });
    	    addParseToken(['a', 'A'], function (input, array, config) {
    	        config._isPm = config._locale.isPM(input);
    	        config._meridiem = input;
    	    });
    	    addParseToken(['h', 'hh'], function (input, array, config) {
    	        array[HOUR] = toInt(input);
    	        getParsingFlags(config).bigHour = true;
    	    });
    	    addParseToken('hmm', function (input, array, config) {
    	        var pos = input.length - 2;
    	        array[HOUR] = toInt(input.substr(0, pos));
    	        array[MINUTE] = toInt(input.substr(pos));
    	        getParsingFlags(config).bigHour = true;
    	    });
    	    addParseToken('hmmss', function (input, array, config) {
    	        var pos1 = input.length - 4,
    	            pos2 = input.length - 2;
    	        array[HOUR] = toInt(input.substr(0, pos1));
    	        array[MINUTE] = toInt(input.substr(pos1, 2));
    	        array[SECOND] = toInt(input.substr(pos2));
    	        getParsingFlags(config).bigHour = true;
    	    });
    	    addParseToken('Hmm', function (input, array, config) {
    	        var pos = input.length - 2;
    	        array[HOUR] = toInt(input.substr(0, pos));
    	        array[MINUTE] = toInt(input.substr(pos));
    	    });
    	    addParseToken('Hmmss', function (input, array, config) {
    	        var pos1 = input.length - 4,
    	            pos2 = input.length - 2;
    	        array[HOUR] = toInt(input.substr(0, pos1));
    	        array[MINUTE] = toInt(input.substr(pos1, 2));
    	        array[SECOND] = toInt(input.substr(pos2));
    	    });

    	    // LOCALES

    	    function localeIsPM(input) {
    	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    	        // Using charAt should be more compatible.
    	        return (input + '').toLowerCase().charAt(0) === 'p';
    	    }

    	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
    	        // Setting the hour should keep the time, because the user explicitly
    	        // specified which hour they want. So trying to maintain the same hour (in
    	        // a new timezone) makes sense. Adding/subtracting hours does not follow
    	        // this rule.
    	        getSetHour = makeGetSet('Hours', true);

    	    function localeMeridiem(hours, minutes, isLower) {
    	        if (hours > 11) {
    	            return isLower ? 'pm' : 'PM';
    	        } else {
    	            return isLower ? 'am' : 'AM';
    	        }
    	    }

    	    var baseConfig = {
    	        calendar: defaultCalendar,
    	        longDateFormat: defaultLongDateFormat,
    	        invalidDate: defaultInvalidDate,
    	        ordinal: defaultOrdinal,
    	        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    	        relativeTime: defaultRelativeTime,

    	        months: defaultLocaleMonths,
    	        monthsShort: defaultLocaleMonthsShort,

    	        week: defaultLocaleWeek,

    	        weekdays: defaultLocaleWeekdays,
    	        weekdaysMin: defaultLocaleWeekdaysMin,
    	        weekdaysShort: defaultLocaleWeekdaysShort,

    	        meridiemParse: defaultLocaleMeridiemParse,
    	    };

    	    // internal storage for locale config files
    	    var locales = {},
    	        localeFamilies = {},
    	        globalLocale;

    	    function commonPrefix(arr1, arr2) {
    	        var i,
    	            minl = Math.min(arr1.length, arr2.length);
    	        for (i = 0; i < minl; i += 1) {
    	            if (arr1[i] !== arr2[i]) {
    	                return i;
    	            }
    	        }
    	        return minl;
    	    }

    	    function normalizeLocale(key) {
    	        return key ? key.toLowerCase().replace('_', '-') : key;
    	    }

    	    // pick the locale from the array
    	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    	    function chooseLocale(names) {
    	        var i = 0,
    	            j,
    	            next,
    	            locale,
    	            split;

    	        while (i < names.length) {
    	            split = normalizeLocale(names[i]).split('-');
    	            j = split.length;
    	            next = normalizeLocale(names[i + 1]);
    	            next = next ? next.split('-') : null;
    	            while (j > 0) {
    	                locale = loadLocale(split.slice(0, j).join('-'));
    	                if (locale) {
    	                    return locale;
    	                }
    	                if (
    	                    next &&
    	                    next.length >= j &&
    	                    commonPrefix(split, next) >= j - 1
    	                ) {
    	                    //the next array item is better than a shallower substring of this one
    	                    break;
    	                }
    	                j--;
    	            }
    	            i++;
    	        }
    	        return globalLocale;
    	    }

    	    function isLocaleNameSane(name) {
    	        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
    	        // Ensure name is available and function returns boolean
    	        return !!(name && name.match('^[^/\\\\]*$'));
    	    }

    	    function loadLocale(name) {
    	        var oldLocale = null,
    	            aliasedRequire;
    	        // TODO: Find a better way to register and load all the locales in Node
    	        if (
    	            locales[name] === undefined &&
    	            'object' !== 'undefined' &&
    	            module &&
    	            module.exports &&
    	            isLocaleNameSane(name)
    	        ) {
    	            try {
    	                oldLocale = globalLocale._abbr;
    	                aliasedRequire = commonjsRequire;
    	                aliasedRequire('./locale/' + name);
    	                getSetGlobalLocale(oldLocale);
    	            } catch (e) {
    	                // mark as not found to avoid repeating expensive file require call causing high CPU
    	                // when trying to find en-US, en_US, en-us for every format call
    	                locales[name] = null; // null means not found
    	            }
    	        }
    	        return locales[name];
    	    }

    	    // This function will load locale and then set the global locale.  If
    	    // no arguments are passed in, it will simply return the current global
    	    // locale key.
    	    function getSetGlobalLocale(key, values) {
    	        var data;
    	        if (key) {
    	            if (isUndefined(values)) {
    	                data = getLocale(key);
    	            } else {
    	                data = defineLocale(key, values);
    	            }

    	            if (data) {
    	                // moment.duration._locale = moment._locale = data;
    	                globalLocale = data;
    	            } else {
    	                if (typeof console !== 'undefined' && console.warn) {
    	                    //warn user if arguments are passed but the locale could not be set
    	                    console.warn(
    	                        'Locale ' + key + ' not found. Did you forget to load it?'
    	                    );
    	                }
    	            }
    	        }

    	        return globalLocale._abbr;
    	    }

    	    function defineLocale(name, config) {
    	        if (config !== null) {
    	            var locale,
    	                parentConfig = baseConfig;
    	            config.abbr = name;
    	            if (locales[name] != null) {
    	                deprecateSimple(
    	                    'defineLocaleOverride',
    	                    'use moment.updateLocale(localeName, config) to change ' +
    	                        'an existing locale. moment.defineLocale(localeName, ' +
    	                        'config) should only be used for creating a new locale ' +
    	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
    	                );
    	                parentConfig = locales[name]._config;
    	            } else if (config.parentLocale != null) {
    	                if (locales[config.parentLocale] != null) {
    	                    parentConfig = locales[config.parentLocale]._config;
    	                } else {
    	                    locale = loadLocale(config.parentLocale);
    	                    if (locale != null) {
    	                        parentConfig = locale._config;
    	                    } else {
    	                        if (!localeFamilies[config.parentLocale]) {
    	                            localeFamilies[config.parentLocale] = [];
    	                        }
    	                        localeFamilies[config.parentLocale].push({
    	                            name: name,
    	                            config: config,
    	                        });
    	                        return null;
    	                    }
    	                }
    	            }
    	            locales[name] = new Locale(mergeConfigs(parentConfig, config));

    	            if (localeFamilies[name]) {
    	                localeFamilies[name].forEach(function (x) {
    	                    defineLocale(x.name, x.config);
    	                });
    	            }

    	            // backwards compat for now: also set the locale
    	            // make sure we set the locale AFTER all child locales have been
    	            // created, so we won't end up with the child locale set.
    	            getSetGlobalLocale(name);

    	            return locales[name];
    	        } else {
    	            // useful for testing
    	            delete locales[name];
    	            return null;
    	        }
    	    }

    	    function updateLocale(name, config) {
    	        if (config != null) {
    	            var locale,
    	                tmpLocale,
    	                parentConfig = baseConfig;

    	            if (locales[name] != null && locales[name].parentLocale != null) {
    	                // Update existing child locale in-place to avoid memory-leaks
    	                locales[name].set(mergeConfigs(locales[name]._config, config));
    	            } else {
    	                // MERGE
    	                tmpLocale = loadLocale(name);
    	                if (tmpLocale != null) {
    	                    parentConfig = tmpLocale._config;
    	                }
    	                config = mergeConfigs(parentConfig, config);
    	                if (tmpLocale == null) {
    	                    // updateLocale is called for creating a new locale
    	                    // Set abbr so it will have a name (getters return
    	                    // undefined otherwise).
    	                    config.abbr = name;
    	                }
    	                locale = new Locale(config);
    	                locale.parentLocale = locales[name];
    	                locales[name] = locale;
    	            }

    	            // backwards compat for now: also set the locale
    	            getSetGlobalLocale(name);
    	        } else {
    	            // pass null for config to unupdate, useful for tests
    	            if (locales[name] != null) {
    	                if (locales[name].parentLocale != null) {
    	                    locales[name] = locales[name].parentLocale;
    	                    if (name === getSetGlobalLocale()) {
    	                        getSetGlobalLocale(name);
    	                    }
    	                } else if (locales[name] != null) {
    	                    delete locales[name];
    	                }
    	            }
    	        }
    	        return locales[name];
    	    }

    	    // returns locale data
    	    function getLocale(key) {
    	        var locale;

    	        if (key && key._locale && key._locale._abbr) {
    	            key = key._locale._abbr;
    	        }

    	        if (!key) {
    	            return globalLocale;
    	        }

    	        if (!isArray(key)) {
    	            //short-circuit everything else
    	            locale = loadLocale(key);
    	            if (locale) {
    	                return locale;
    	            }
    	            key = [key];
    	        }

    	        return chooseLocale(key);
    	    }

    	    function listLocales() {
    	        return keys(locales);
    	    }

    	    function checkOverflow(m) {
    	        var overflow,
    	            a = m._a;

    	        if (a && getParsingFlags(m).overflow === -2) {
    	            overflow =
    	                a[MONTH] < 0 || a[MONTH] > 11
    	                    ? MONTH
    	                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
    	                      ? DATE
    	                      : a[HOUR] < 0 ||
    	                          a[HOUR] > 24 ||
    	                          (a[HOUR] === 24 &&
    	                              (a[MINUTE] !== 0 ||
    	                                  a[SECOND] !== 0 ||
    	                                  a[MILLISECOND] !== 0))
    	                        ? HOUR
    	                        : a[MINUTE] < 0 || a[MINUTE] > 59
    	                          ? MINUTE
    	                          : a[SECOND] < 0 || a[SECOND] > 59
    	                            ? SECOND
    	                            : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
    	                              ? MILLISECOND
    	                              : -1;

    	            if (
    	                getParsingFlags(m)._overflowDayOfYear &&
    	                (overflow < YEAR || overflow > DATE)
    	            ) {
    	                overflow = DATE;
    	            }
    	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
    	                overflow = WEEK;
    	            }
    	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
    	                overflow = WEEKDAY;
    	            }

    	            getParsingFlags(m).overflow = overflow;
    	        }

    	        return m;
    	    }

    	    // iso 8601 regex
    	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    	    var extendedIsoRegex =
    	            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
    	        basicIsoRegex =
    	            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
    	        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
    	        isoDates = [
    	            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    	            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    	            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    	            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    	            ['YYYY-DDD', /\d{4}-\d{3}/],
    	            ['YYYY-MM', /\d{4}-\d\d/, false],
    	            ['YYYYYYMMDD', /[+-]\d{10}/],
    	            ['YYYYMMDD', /\d{8}/],
    	            ['GGGG[W]WWE', /\d{4}W\d{3}/],
    	            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    	            ['YYYYDDD', /\d{7}/],
    	            ['YYYYMM', /\d{6}/, false],
    	            ['YYYY', /\d{4}/, false],
    	        ],
    	        // iso time formats and regexes
    	        isoTimes = [
    	            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    	            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    	            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    	            ['HH:mm', /\d\d:\d\d/],
    	            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    	            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    	            ['HHmmss', /\d\d\d\d\d\d/],
    	            ['HHmm', /\d\d\d\d/],
    	            ['HH', /\d\d/],
    	        ],
    	        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
    	        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    	        rfc2822 =
    	            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
    	        obsOffsets = {
    	            UT: 0,
    	            GMT: 0,
    	            EDT: -4 * 60,
    	            EST: -5 * 60,
    	            CDT: -5 * 60,
    	            CST: -6 * 60,
    	            MDT: -6 * 60,
    	            MST: -7 * 60,
    	            PDT: -7 * 60,
    	            PST: -8 * 60,
    	        };

    	    // date from iso format
    	    function configFromISO(config) {
    	        var i,
    	            l,
    	            string = config._i,
    	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
    	            allowTime,
    	            dateFormat,
    	            timeFormat,
    	            tzFormat,
    	            isoDatesLen = isoDates.length,
    	            isoTimesLen = isoTimes.length;

    	        if (match) {
    	            getParsingFlags(config).iso = true;
    	            for (i = 0, l = isoDatesLen; i < l; i++) {
    	                if (isoDates[i][1].exec(match[1])) {
    	                    dateFormat = isoDates[i][0];
    	                    allowTime = isoDates[i][2] !== false;
    	                    break;
    	                }
    	            }
    	            if (dateFormat == null) {
    	                config._isValid = false;
    	                return;
    	            }
    	            if (match[3]) {
    	                for (i = 0, l = isoTimesLen; i < l; i++) {
    	                    if (isoTimes[i][1].exec(match[3])) {
    	                        // match[2] should be 'T' or space
    	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
    	                        break;
    	                    }
    	                }
    	                if (timeFormat == null) {
    	                    config._isValid = false;
    	                    return;
    	                }
    	            }
    	            if (!allowTime && timeFormat != null) {
    	                config._isValid = false;
    	                return;
    	            }
    	            if (match[4]) {
    	                if (tzRegex.exec(match[4])) {
    	                    tzFormat = 'Z';
    	                } else {
    	                    config._isValid = false;
    	                    return;
    	                }
    	            }
    	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
    	            configFromStringAndFormat(config);
    	        } else {
    	            config._isValid = false;
    	        }
    	    }

    	    function extractFromRFC2822Strings(
    	        yearStr,
    	        monthStr,
    	        dayStr,
    	        hourStr,
    	        minuteStr,
    	        secondStr
    	    ) {
    	        var result = [
    	            untruncateYear(yearStr),
    	            defaultLocaleMonthsShort.indexOf(monthStr),
    	            parseInt(dayStr, 10),
    	            parseInt(hourStr, 10),
    	            parseInt(minuteStr, 10),
    	        ];

    	        if (secondStr) {
    	            result.push(parseInt(secondStr, 10));
    	        }

    	        return result;
    	    }

    	    function untruncateYear(yearStr) {
    	        var year = parseInt(yearStr, 10);
    	        if (year <= 49) {
    	            return 2000 + year;
    	        } else if (year <= 999) {
    	            return 1900 + year;
    	        }
    	        return year;
    	    }

    	    function preprocessRFC2822(s) {
    	        // Remove comments and folding whitespace and replace multiple-spaces with a single space
    	        return s
    	            .replace(/\([^()]*\)|[\n\t]/g, ' ')
    	            .replace(/(\s\s+)/g, ' ')
    	            .replace(/^\s\s*/, '')
    	            .replace(/\s\s*$/, '');
    	    }

    	    function checkWeekday(weekdayStr, parsedInput, config) {
    	        if (weekdayStr) {
    	            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
    	            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
    	                weekdayActual = new Date(
    	                    parsedInput[0],
    	                    parsedInput[1],
    	                    parsedInput[2]
    	                ).getDay();
    	            if (weekdayProvided !== weekdayActual) {
    	                getParsingFlags(config).weekdayMismatch = true;
    	                config._isValid = false;
    	                return false;
    	            }
    	        }
    	        return true;
    	    }

    	    function calculateOffset(obsOffset, militaryOffset, numOffset) {
    	        if (obsOffset) {
    	            return obsOffsets[obsOffset];
    	        } else if (militaryOffset) {
    	            // the only allowed military tz is Z
    	            return 0;
    	        } else {
    	            var hm = parseInt(numOffset, 10),
    	                m = hm % 100,
    	                h = (hm - m) / 100;
    	            return h * 60 + m;
    	        }
    	    }

    	    // date and time from ref 2822 format
    	    function configFromRFC2822(config) {
    	        var match = rfc2822.exec(preprocessRFC2822(config._i)),
    	            parsedArray;
    	        if (match) {
    	            parsedArray = extractFromRFC2822Strings(
    	                match[4],
    	                match[3],
    	                match[2],
    	                match[5],
    	                match[6],
    	                match[7]
    	            );
    	            if (!checkWeekday(match[1], parsedArray, config)) {
    	                return;
    	            }

    	            config._a = parsedArray;
    	            config._tzm = calculateOffset(match[8], match[9], match[10]);

    	            config._d = createUTCDate.apply(null, config._a);
    	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

    	            getParsingFlags(config).rfc2822 = true;
    	        } else {
    	            config._isValid = false;
    	        }
    	    }

    	    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    	    function configFromString(config) {
    	        var matched = aspNetJsonRegex.exec(config._i);
    	        if (matched !== null) {
    	            config._d = new Date(+matched[1]);
    	            return;
    	        }

    	        configFromISO(config);
    	        if (config._isValid === false) {
    	            delete config._isValid;
    	        } else {
    	            return;
    	        }

    	        configFromRFC2822(config);
    	        if (config._isValid === false) {
    	            delete config._isValid;
    	        } else {
    	            return;
    	        }

    	        if (config._strict) {
    	            config._isValid = false;
    	        } else {
    	            // Final attempt, use Input Fallback
    	            hooks.createFromInputFallback(config);
    	        }
    	    }

    	    hooks.createFromInputFallback = deprecate(
    	        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
    	            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
    	            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    	        function (config) {
    	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    	        }
    	    );

    	    // Pick the first defined of two or three arguments.
    	    function defaults(a, b, c) {
    	        if (a != null) {
    	            return a;
    	        }
    	        if (b != null) {
    	            return b;
    	        }
    	        return c;
    	    }

    	    function currentDateArray(config) {
    	        // hooks is actually the exported moment object
    	        var nowValue = new Date(hooks.now());
    	        if (config._useUTC) {
    	            return [
    	                nowValue.getUTCFullYear(),
    	                nowValue.getUTCMonth(),
    	                nowValue.getUTCDate(),
    	            ];
    	        }
    	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    	    }

    	    // convert an array to a date.
    	    // the array should mirror the parameters below
    	    // note: all values past the year are optional and will default to the lowest possible value.
    	    // [year, month, day , hour, minute, second, millisecond]
    	    function configFromArray(config) {
    	        var i,
    	            date,
    	            input = [],
    	            currentDate,
    	            expectedWeekday,
    	            yearToUse;

    	        if (config._d) {
    	            return;
    	        }

    	        currentDate = currentDateArray(config);

    	        //compute day of the year from weeks and weekdays
    	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
    	            dayOfYearFromWeekInfo(config);
    	        }

    	        //if the day of the year is set, figure out what it is
    	        if (config._dayOfYear != null) {
    	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

    	            if (
    	                config._dayOfYear > daysInYear(yearToUse) ||
    	                config._dayOfYear === 0
    	            ) {
    	                getParsingFlags(config)._overflowDayOfYear = true;
    	            }

    	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
    	            config._a[MONTH] = date.getUTCMonth();
    	            config._a[DATE] = date.getUTCDate();
    	        }

    	        // Default to current date.
    	        // * if no year, month, day of month are given, default to today
    	        // * if day of month is given, default month and year
    	        // * if month is given, default only year
    	        // * if year is given, don't default anything
    	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
    	            config._a[i] = input[i] = currentDate[i];
    	        }

    	        // Zero out whatever was not defaulted, including time
    	        for (; i < 7; i++) {
    	            config._a[i] = input[i] =
    	                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
    	        }

    	        // Check for 24:00:00.000
    	        if (
    	            config._a[HOUR] === 24 &&
    	            config._a[MINUTE] === 0 &&
    	            config._a[SECOND] === 0 &&
    	            config._a[MILLISECOND] === 0
    	        ) {
    	            config._nextDay = true;
    	            config._a[HOUR] = 0;
    	        }

    	        config._d = (config._useUTC ? createUTCDate : createDate).apply(
    	            null,
    	            input
    	        );
    	        expectedWeekday = config._useUTC
    	            ? config._d.getUTCDay()
    	            : config._d.getDay();

    	        // Apply timezone offset from input. The actual utcOffset can be changed
    	        // with parseZone.
    	        if (config._tzm != null) {
    	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    	        }

    	        if (config._nextDay) {
    	            config._a[HOUR] = 24;
    	        }

    	        // check for mismatching day of week
    	        if (
    	            config._w &&
    	            typeof config._w.d !== 'undefined' &&
    	            config._w.d !== expectedWeekday
    	        ) {
    	            getParsingFlags(config).weekdayMismatch = true;
    	        }
    	    }

    	    function dayOfYearFromWeekInfo(config) {
    	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

    	        w = config._w;
    	        if (w.GG != null || w.W != null || w.E != null) {
    	            dow = 1;
    	            doy = 4;

    	            // TODO: We need to take the current isoWeekYear, but that depends on
    	            // how we interpret now (local, utc, fixed offset). So create
    	            // a now version of current config (take local/utc/offset flags, and
    	            // create now).
    	            weekYear = defaults(
    	                w.GG,
    	                config._a[YEAR],
    	                weekOfYear(createLocal(), 1, 4).year
    	            );
    	            week = defaults(w.W, 1);
    	            weekday = defaults(w.E, 1);
    	            if (weekday < 1 || weekday > 7) {
    	                weekdayOverflow = true;
    	            }
    	        } else {
    	            dow = config._locale._week.dow;
    	            doy = config._locale._week.doy;

    	            curWeek = weekOfYear(createLocal(), dow, doy);

    	            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

    	            // Default to current week.
    	            week = defaults(w.w, curWeek.week);

    	            if (w.d != null) {
    	                // weekday -- low day numbers are considered next week
    	                weekday = w.d;
    	                if (weekday < 0 || weekday > 6) {
    	                    weekdayOverflow = true;
    	                }
    	            } else if (w.e != null) {
    	                // local weekday -- counting starts from beginning of week
    	                weekday = w.e + dow;
    	                if (w.e < 0 || w.e > 6) {
    	                    weekdayOverflow = true;
    	                }
    	            } else {
    	                // default to beginning of week
    	                weekday = dow;
    	            }
    	        }
    	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
    	            getParsingFlags(config)._overflowWeeks = true;
    	        } else if (weekdayOverflow != null) {
    	            getParsingFlags(config)._overflowWeekday = true;
    	        } else {
    	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
    	            config._a[YEAR] = temp.year;
    	            config._dayOfYear = temp.dayOfYear;
    	        }
    	    }

    	    // constant that refers to the ISO standard
    	    hooks.ISO_8601 = function () {};

    	    // constant that refers to the RFC 2822 form
    	    hooks.RFC_2822 = function () {};

    	    // date from string and format string
    	    function configFromStringAndFormat(config) {
    	        // TODO: Move this to another part of the creation flow to prevent circular deps
    	        if (config._f === hooks.ISO_8601) {
    	            configFromISO(config);
    	            return;
    	        }
    	        if (config._f === hooks.RFC_2822) {
    	            configFromRFC2822(config);
    	            return;
    	        }
    	        config._a = [];
    	        getParsingFlags(config).empty = true;

    	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
    	        var string = '' + config._i,
    	            i,
    	            parsedInput,
    	            tokens,
    	            token,
    	            skipped,
    	            stringLength = string.length,
    	            totalParsedInputLength = 0,
    	            era,
    	            tokenLen;

    	        tokens =
    	            expandFormat(config._f, config._locale).match(formattingTokens) || [];
    	        tokenLen = tokens.length;
    	        for (i = 0; i < tokenLen; i++) {
    	            token = tokens[i];
    	            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
    	                [])[0];
    	            if (parsedInput) {
    	                skipped = string.substr(0, string.indexOf(parsedInput));
    	                if (skipped.length > 0) {
    	                    getParsingFlags(config).unusedInput.push(skipped);
    	                }
    	                string = string.slice(
    	                    string.indexOf(parsedInput) + parsedInput.length
    	                );
    	                totalParsedInputLength += parsedInput.length;
    	            }
    	            // don't parse if it's not a known token
    	            if (formatTokenFunctions[token]) {
    	                if (parsedInput) {
    	                    getParsingFlags(config).empty = false;
    	                } else {
    	                    getParsingFlags(config).unusedTokens.push(token);
    	                }
    	                addTimeToArrayFromToken(token, parsedInput, config);
    	            } else if (config._strict && !parsedInput) {
    	                getParsingFlags(config).unusedTokens.push(token);
    	            }
    	        }

    	        // add remaining unparsed input length to the string
    	        getParsingFlags(config).charsLeftOver =
    	            stringLength - totalParsedInputLength;
    	        if (string.length > 0) {
    	            getParsingFlags(config).unusedInput.push(string);
    	        }

    	        // clear _12h flag if hour is <= 12
    	        if (
    	            config._a[HOUR] <= 12 &&
    	            getParsingFlags(config).bigHour === true &&
    	            config._a[HOUR] > 0
    	        ) {
    	            getParsingFlags(config).bigHour = undefined;
    	        }

    	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
    	        getParsingFlags(config).meridiem = config._meridiem;
    	        // handle meridiem
    	        config._a[HOUR] = meridiemFixWrap(
    	            config._locale,
    	            config._a[HOUR],
    	            config._meridiem
    	        );

    	        // handle era
    	        era = getParsingFlags(config).era;
    	        if (era !== null) {
    	            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
    	        }

    	        configFromArray(config);
    	        checkOverflow(config);
    	    }

    	    function meridiemFixWrap(locale, hour, meridiem) {
    	        var isPm;

    	        if (meridiem == null) {
    	            // nothing to do
    	            return hour;
    	        }
    	        if (locale.meridiemHour != null) {
    	            return locale.meridiemHour(hour, meridiem);
    	        } else if (locale.isPM != null) {
    	            // Fallback
    	            isPm = locale.isPM(meridiem);
    	            if (isPm && hour < 12) {
    	                hour += 12;
    	            }
    	            if (!isPm && hour === 12) {
    	                hour = 0;
    	            }
    	            return hour;
    	        } else {
    	            // this is not supposed to happen
    	            return hour;
    	        }
    	    }

    	    // date from string and array of format strings
    	    function configFromStringAndArray(config) {
    	        var tempConfig,
    	            bestMoment,
    	            scoreToBeat,
    	            i,
    	            currentScore,
    	            validFormatFound,
    	            bestFormatIsValid = false,
    	            configfLen = config._f.length;

    	        if (configfLen === 0) {
    	            getParsingFlags(config).invalidFormat = true;
    	            config._d = new Date(NaN);
    	            return;
    	        }

    	        for (i = 0; i < configfLen; i++) {
    	            currentScore = 0;
    	            validFormatFound = false;
    	            tempConfig = copyConfig({}, config);
    	            if (config._useUTC != null) {
    	                tempConfig._useUTC = config._useUTC;
    	            }
    	            tempConfig._f = config._f[i];
    	            configFromStringAndFormat(tempConfig);

    	            if (isValid(tempConfig)) {
    	                validFormatFound = true;
    	            }

    	            // if there is any input that was not parsed add a penalty for that format
    	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

    	            //or tokens
    	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

    	            getParsingFlags(tempConfig).score = currentScore;

    	            if (!bestFormatIsValid) {
    	                if (
    	                    scoreToBeat == null ||
    	                    currentScore < scoreToBeat ||
    	                    validFormatFound
    	                ) {
    	                    scoreToBeat = currentScore;
    	                    bestMoment = tempConfig;
    	                    if (validFormatFound) {
    	                        bestFormatIsValid = true;
    	                    }
    	                }
    	            } else {
    	                if (currentScore < scoreToBeat) {
    	                    scoreToBeat = currentScore;
    	                    bestMoment = tempConfig;
    	                }
    	            }
    	        }

    	        extend(config, bestMoment || tempConfig);
    	    }

    	    function configFromObject(config) {
    	        if (config._d) {
    	            return;
    	        }

    	        var i = normalizeObjectUnits(config._i),
    	            dayOrDate = i.day === undefined ? i.date : i.day;
    	        config._a = map(
    	            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
    	            function (obj) {
    	                return obj && parseInt(obj, 10);
    	            }
    	        );

    	        configFromArray(config);
    	    }

    	    function createFromConfig(config) {
    	        var res = new Moment(checkOverflow(prepareConfig(config)));
    	        if (res._nextDay) {
    	            // Adding is smart enough around DST
    	            res.add(1, 'd');
    	            res._nextDay = undefined;
    	        }

    	        return res;
    	    }

    	    function prepareConfig(config) {
    	        var input = config._i,
    	            format = config._f;

    	        config._locale = config._locale || getLocale(config._l);

    	        if (input === null || (format === undefined && input === '')) {
    	            return createInvalid({ nullInput: true });
    	        }

    	        if (typeof input === 'string') {
    	            config._i = input = config._locale.preparse(input);
    	        }

    	        if (isMoment(input)) {
    	            return new Moment(checkOverflow(input));
    	        } else if (isDate(input)) {
    	            config._d = input;
    	        } else if (isArray(format)) {
    	            configFromStringAndArray(config);
    	        } else if (format) {
    	            configFromStringAndFormat(config);
    	        } else {
    	            configFromInput(config);
    	        }

    	        if (!isValid(config)) {
    	            config._d = null;
    	        }

    	        return config;
    	    }

    	    function configFromInput(config) {
    	        var input = config._i;
    	        if (isUndefined(input)) {
    	            config._d = new Date(hooks.now());
    	        } else if (isDate(input)) {
    	            config._d = new Date(input.valueOf());
    	        } else if (typeof input === 'string') {
    	            configFromString(config);
    	        } else if (isArray(input)) {
    	            config._a = map(input.slice(0), function (obj) {
    	                return parseInt(obj, 10);
    	            });
    	            configFromArray(config);
    	        } else if (isObject(input)) {
    	            configFromObject(config);
    	        } else if (isNumber(input)) {
    	            // from milliseconds
    	            config._d = new Date(input);
    	        } else {
    	            hooks.createFromInputFallback(config);
    	        }
    	    }

    	    function createLocalOrUTC(input, format, locale, strict, isUTC) {
    	        var c = {};

    	        if (format === true || format === false) {
    	            strict = format;
    	            format = undefined;
    	        }

    	        if (locale === true || locale === false) {
    	            strict = locale;
    	            locale = undefined;
    	        }

    	        if (
    	            (isObject(input) && isObjectEmpty(input)) ||
    	            (isArray(input) && input.length === 0)
    	        ) {
    	            input = undefined;
    	        }
    	        // object construction must be done this way.
    	        // https://github.com/moment/moment/issues/1423
    	        c._isAMomentObject = true;
    	        c._useUTC = c._isUTC = isUTC;
    	        c._l = locale;
    	        c._i = input;
    	        c._f = format;
    	        c._strict = strict;

    	        return createFromConfig(c);
    	    }

    	    function createLocal(input, format, locale, strict) {
    	        return createLocalOrUTC(input, format, locale, strict, false);
    	    }

    	    var prototypeMin = deprecate(
    	            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    	            function () {
    	                var other = createLocal.apply(null, arguments);
    	                if (this.isValid() && other.isValid()) {
    	                    return other < this ? this : other;
    	                } else {
    	                    return createInvalid();
    	                }
    	            }
    	        ),
    	        prototypeMax = deprecate(
    	            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    	            function () {
    	                var other = createLocal.apply(null, arguments);
    	                if (this.isValid() && other.isValid()) {
    	                    return other > this ? this : other;
    	                } else {
    	                    return createInvalid();
    	                }
    	            }
    	        );

    	    // Pick a moment m from moments so that m[fn](other) is true for all
    	    // other. This relies on the function fn to be transitive.
    	    //
    	    // moments should either be an array of moment objects or an array, whose
    	    // first element is an array of moment objects.
    	    function pickBy(fn, moments) {
    	        var res, i;
    	        if (moments.length === 1 && isArray(moments[0])) {
    	            moments = moments[0];
    	        }
    	        if (!moments.length) {
    	            return createLocal();
    	        }
    	        res = moments[0];
    	        for (i = 1; i < moments.length; ++i) {
    	            if (!moments[i].isValid() || moments[i][fn](res)) {
    	                res = moments[i];
    	            }
    	        }
    	        return res;
    	    }

    	    // TODO: Use [].sort instead?
    	    function min() {
    	        var args = [].slice.call(arguments, 0);

    	        return pickBy('isBefore', args);
    	    }

    	    function max() {
    	        var args = [].slice.call(arguments, 0);

    	        return pickBy('isAfter', args);
    	    }

    	    var now = function () {
    	        return Date.now ? Date.now() : +new Date();
    	    };

    	    var ordering = [
    	        'year',
    	        'quarter',
    	        'month',
    	        'week',
    	        'day',
    	        'hour',
    	        'minute',
    	        'second',
    	        'millisecond',
    	    ];

    	    function isDurationValid(m) {
    	        var key,
    	            unitHasDecimal = false,
    	            i,
    	            orderLen = ordering.length;
    	        for (key in m) {
    	            if (
    	                hasOwnProp(m, key) &&
    	                !(
    	                    indexOf.call(ordering, key) !== -1 &&
    	                    (m[key] == null || !isNaN(m[key]))
    	                )
    	            ) {
    	                return false;
    	            }
    	        }

    	        for (i = 0; i < orderLen; ++i) {
    	            if (m[ordering[i]]) {
    	                if (unitHasDecimal) {
    	                    return false; // only allow non-integers for smallest unit
    	                }
    	                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
    	                    unitHasDecimal = true;
    	                }
    	            }
    	        }

    	        return true;
    	    }

    	    function isValid$1() {
    	        return this._isValid;
    	    }

    	    function createInvalid$1() {
    	        return createDuration(NaN);
    	    }

    	    function Duration(duration) {
    	        var normalizedInput = normalizeObjectUnits(duration),
    	            years = normalizedInput.year || 0,
    	            quarters = normalizedInput.quarter || 0,
    	            months = normalizedInput.month || 0,
    	            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
    	            days = normalizedInput.day || 0,
    	            hours = normalizedInput.hour || 0,
    	            minutes = normalizedInput.minute || 0,
    	            seconds = normalizedInput.second || 0,
    	            milliseconds = normalizedInput.millisecond || 0;

    	        this._isValid = isDurationValid(normalizedInput);

    	        // representation for dateAddRemove
    	        this._milliseconds =
    	            +milliseconds +
    	            seconds * 1e3 + // 1000
    	            minutes * 6e4 + // 1000 * 60
    	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    	        // Because of dateAddRemove treats 24 hours as different from a
    	        // day when working around DST, we need to store them separately
    	        this._days = +days + weeks * 7;
    	        // It is impossible to translate months into days without knowing
    	        // which months you are are talking about, so we have to store
    	        // it separately.
    	        this._months = +months + quarters * 3 + years * 12;

    	        this._data = {};

    	        this._locale = getLocale();

    	        this._bubble();
    	    }

    	    function isDuration(obj) {
    	        return obj instanceof Duration;
    	    }

    	    function absRound(number) {
    	        if (number < 0) {
    	            return Math.round(-1 * number) * -1;
    	        } else {
    	            return Math.round(number);
    	        }
    	    }

    	    // compare two arrays, return the number of differences
    	    function compareArrays(array1, array2, dontConvert) {
    	        var len = Math.min(array1.length, array2.length),
    	            lengthDiff = Math.abs(array1.length - array2.length),
    	            diffs = 0,
    	            i;
    	        for (i = 0; i < len; i++) {
    	            if (
    	                (toInt(array1[i]) !== toInt(array2[i]))
    	            ) {
    	                diffs++;
    	            }
    	        }
    	        return diffs + lengthDiff;
    	    }

    	    // FORMATTING

    	    function offset(token, separator) {
    	        addFormatToken(token, 0, 0, function () {
    	            var offset = this.utcOffset(),
    	                sign = '+';
    	            if (offset < 0) {
    	                offset = -offset;
    	                sign = '-';
    	            }
    	            return (
    	                sign +
    	                zeroFill(~~(offset / 60), 2) +
    	                separator +
    	                zeroFill(~~offset % 60, 2)
    	            );
    	        });
    	    }

    	    offset('Z', ':');
    	    offset('ZZ', '');

    	    // PARSING

    	    addRegexToken('Z', matchShortOffset);
    	    addRegexToken('ZZ', matchShortOffset);
    	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
    	        config._useUTC = true;
    	        config._tzm = offsetFromString(matchShortOffset, input);
    	    });

    	    // HELPERS

    	    // timezone chunker
    	    // '+10:00' > ['10',  '00']
    	    // '-1530'  > ['-15', '30']
    	    var chunkOffset = /([\+\-]|\d\d)/gi;

    	    function offsetFromString(matcher, string) {
    	        var matches = (string || '').match(matcher),
    	            chunk,
    	            parts,
    	            minutes;

    	        if (matches === null) {
    	            return null;
    	        }

    	        chunk = matches[matches.length - 1] || [];
    	        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    	        minutes = +(parts[1] * 60) + toInt(parts[2]);

    	        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    	    }

    	    // Return a moment from input, that is local/utc/zone equivalent to model.
    	    function cloneWithOffset(input, model) {
    	        var res, diff;
    	        if (model._isUTC) {
    	            res = model.clone();
    	            diff =
    	                (isMoment(input) || isDate(input)
    	                    ? input.valueOf()
    	                    : createLocal(input).valueOf()) - res.valueOf();
    	            // Use low-level api, because this fn is low-level api.
    	            res._d.setTime(res._d.valueOf() + diff);
    	            hooks.updateOffset(res, false);
    	            return res;
    	        } else {
    	            return createLocal(input).local();
    	        }
    	    }

    	    function getDateOffset(m) {
    	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    	        // https://github.com/moment/moment/pull/1871
    	        return -Math.round(m._d.getTimezoneOffset());
    	    }

    	    // HOOKS

    	    // This function will be called whenever a moment is mutated.
    	    // It is intended to keep the offset in sync with the timezone.
    	    hooks.updateOffset = function () {};

    	    // MOMENTS

    	    // keepLocalTime = true means only change the timezone, without
    	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    	    // +0200, so we adjust the time as needed, to be valid.
    	    //
    	    // Keeping the time actually adds/subtracts (one hour)
    	    // from the actual represented time. That is why we call updateOffset
    	    // a second time. In case it wants us to change the offset again
    	    // _changeInProgress == true case, then we have to adjust, because
    	    // there is no such time in the given timezone.
    	    function getSetOffset(input, keepLocalTime, keepMinutes) {
    	        var offset = this._offset || 0,
    	            localAdjust;
    	        if (!this.isValid()) {
    	            return input != null ? this : NaN;
    	        }
    	        if (input != null) {
    	            if (typeof input === 'string') {
    	                input = offsetFromString(matchShortOffset, input);
    	                if (input === null) {
    	                    return this;
    	                }
    	            } else if (Math.abs(input) < 16 && !keepMinutes) {
    	                input = input * 60;
    	            }
    	            if (!this._isUTC && keepLocalTime) {
    	                localAdjust = getDateOffset(this);
    	            }
    	            this._offset = input;
    	            this._isUTC = true;
    	            if (localAdjust != null) {
    	                this.add(localAdjust, 'm');
    	            }
    	            if (offset !== input) {
    	                if (!keepLocalTime || this._changeInProgress) {
    	                    addSubtract(
    	                        this,
    	                        createDuration(input - offset, 'm'),
    	                        1,
    	                        false
    	                    );
    	                } else if (!this._changeInProgress) {
    	                    this._changeInProgress = true;
    	                    hooks.updateOffset(this, true);
    	                    this._changeInProgress = null;
    	                }
    	            }
    	            return this;
    	        } else {
    	            return this._isUTC ? offset : getDateOffset(this);
    	        }
    	    }

    	    function getSetZone(input, keepLocalTime) {
    	        if (input != null) {
    	            if (typeof input !== 'string') {
    	                input = -input;
    	            }

    	            this.utcOffset(input, keepLocalTime);

    	            return this;
    	        } else {
    	            return -this.utcOffset();
    	        }
    	    }

    	    function setOffsetToUTC(keepLocalTime) {
    	        return this.utcOffset(0, keepLocalTime);
    	    }

    	    function setOffsetToLocal(keepLocalTime) {
    	        if (this._isUTC) {
    	            this.utcOffset(0, keepLocalTime);
    	            this._isUTC = false;

    	            if (keepLocalTime) {
    	                this.subtract(getDateOffset(this), 'm');
    	            }
    	        }
    	        return this;
    	    }

    	    function setOffsetToParsedOffset() {
    	        if (this._tzm != null) {
    	            this.utcOffset(this._tzm, false, true);
    	        } else if (typeof this._i === 'string') {
    	            var tZone = offsetFromString(matchOffset, this._i);
    	            if (tZone != null) {
    	                this.utcOffset(tZone);
    	            } else {
    	                this.utcOffset(0, true);
    	            }
    	        }
    	        return this;
    	    }

    	    function hasAlignedHourOffset(input) {
    	        if (!this.isValid()) {
    	            return false;
    	        }
    	        input = input ? createLocal(input).utcOffset() : 0;

    	        return (this.utcOffset() - input) % 60 === 0;
    	    }

    	    function isDaylightSavingTime() {
    	        return (
    	            this.utcOffset() > this.clone().month(0).utcOffset() ||
    	            this.utcOffset() > this.clone().month(5).utcOffset()
    	        );
    	    }

    	    function isDaylightSavingTimeShifted() {
    	        if (!isUndefined(this._isDSTShifted)) {
    	            return this._isDSTShifted;
    	        }

    	        var c = {},
    	            other;

    	        copyConfig(c, this);
    	        c = prepareConfig(c);

    	        if (c._a) {
    	            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
    	            this._isDSTShifted =
    	                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
    	        } else {
    	            this._isDSTShifted = false;
    	        }

    	        return this._isDSTShifted;
    	    }

    	    function isLocal() {
    	        return this.isValid() ? !this._isUTC : false;
    	    }

    	    function isUtcOffset() {
    	        return this.isValid() ? this._isUTC : false;
    	    }

    	    function isUtc() {
    	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    	    }

    	    // ASP.NET json date format regex
    	    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
    	        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    	        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    	        // and further modified to allow for strings containing both week and day
    	        isoRegex =
    	            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    	    function createDuration(input, key) {
    	        var duration = input,
    	            // matching against regexp is expensive, do it on demand
    	            match = null,
    	            sign,
    	            ret,
    	            diffRes;

    	        if (isDuration(input)) {
    	            duration = {
    	                ms: input._milliseconds,
    	                d: input._days,
    	                M: input._months,
    	            };
    	        } else if (isNumber(input) || !isNaN(+input)) {
    	            duration = {};
    	            if (key) {
    	                duration[key] = +input;
    	            } else {
    	                duration.milliseconds = +input;
    	            }
    	        } else if ((match = aspNetRegex.exec(input))) {
    	            sign = match[1] === '-' ? -1 : 1;
    	            duration = {
    	                y: 0,
    	                d: toInt(match[DATE]) * sign,
    	                h: toInt(match[HOUR]) * sign,
    	                m: toInt(match[MINUTE]) * sign,
    	                s: toInt(match[SECOND]) * sign,
    	                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
    	            };
    	        } else if ((match = isoRegex.exec(input))) {
    	            sign = match[1] === '-' ? -1 : 1;
    	            duration = {
    	                y: parseIso(match[2], sign),
    	                M: parseIso(match[3], sign),
    	                w: parseIso(match[4], sign),
    	                d: parseIso(match[5], sign),
    	                h: parseIso(match[6], sign),
    	                m: parseIso(match[7], sign),
    	                s: parseIso(match[8], sign),
    	            };
    	        } else if (duration == null) {
    	            // checks for null or undefined
    	            duration = {};
    	        } else if (
    	            typeof duration === 'object' &&
    	            ('from' in duration || 'to' in duration)
    	        ) {
    	            diffRes = momentsDifference(
    	                createLocal(duration.from),
    	                createLocal(duration.to)
    	            );

    	            duration = {};
    	            duration.ms = diffRes.milliseconds;
    	            duration.M = diffRes.months;
    	        }

    	        ret = new Duration(duration);

    	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
    	            ret._locale = input._locale;
    	        }

    	        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
    	            ret._isValid = input._isValid;
    	        }

    	        return ret;
    	    }

    	    createDuration.fn = Duration.prototype;
    	    createDuration.invalid = createInvalid$1;

    	    function parseIso(inp, sign) {
    	        // We'd normally use ~~inp for this, but unfortunately it also
    	        // converts floats to ints.
    	        // inp may be undefined, so careful calling replace on it.
    	        var res = inp && parseFloat(inp.replace(',', '.'));
    	        // apply sign while we're at it
    	        return (isNaN(res) ? 0 : res) * sign;
    	    }

    	    function positiveMomentsDifference(base, other) {
    	        var res = {};

    	        res.months =
    	            other.month() - base.month() + (other.year() - base.year()) * 12;
    	        if (base.clone().add(res.months, 'M').isAfter(other)) {
    	            --res.months;
    	        }

    	        res.milliseconds = +other - +base.clone().add(res.months, 'M');

    	        return res;
    	    }

    	    function momentsDifference(base, other) {
    	        var res;
    	        if (!(base.isValid() && other.isValid())) {
    	            return { milliseconds: 0, months: 0 };
    	        }

    	        other = cloneWithOffset(other, base);
    	        if (base.isBefore(other)) {
    	            res = positiveMomentsDifference(base, other);
    	        } else {
    	            res = positiveMomentsDifference(other, base);
    	            res.milliseconds = -res.milliseconds;
    	            res.months = -res.months;
    	        }

    	        return res;
    	    }

    	    // TODO: remove 'name' arg after deprecation is removed
    	    function createAdder(direction, name) {
    	        return function (val, period) {
    	            var dur, tmp;
    	            //invert the arguments, but complain about it
    	            if (period !== null && !isNaN(+period)) {
    	                deprecateSimple(
    	                    name,
    	                    'moment().' +
    	                        name +
    	                        '(period, number) is deprecated. Please use moment().' +
    	                        name +
    	                        '(number, period). ' +
    	                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
    	                );
    	                tmp = val;
    	                val = period;
    	                period = tmp;
    	            }

    	            dur = createDuration(val, period);
    	            addSubtract(this, dur, direction);
    	            return this;
    	        };
    	    }

    	    function addSubtract(mom, duration, isAdding, updateOffset) {
    	        var milliseconds = duration._milliseconds,
    	            days = absRound(duration._days),
    	            months = absRound(duration._months);

    	        if (!mom.isValid()) {
    	            // No op
    	            return;
    	        }

    	        updateOffset = updateOffset == null ? true : updateOffset;

    	        if (months) {
    	            setMonth(mom, get(mom, 'Month') + months * isAdding);
    	        }
    	        if (days) {
    	            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    	        }
    	        if (milliseconds) {
    	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    	        }
    	        if (updateOffset) {
    	            hooks.updateOffset(mom, days || months);
    	        }
    	    }

    	    var add = createAdder(1, 'add'),
    	        subtract = createAdder(-1, 'subtract');

    	    function isString(input) {
    	        return typeof input === 'string' || input instanceof String;
    	    }

    	    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    	    function isMomentInput(input) {
    	        return (
    	            isMoment(input) ||
    	            isDate(input) ||
    	            isString(input) ||
    	            isNumber(input) ||
    	            isNumberOrStringArray(input) ||
    	            isMomentInputObject(input) ||
    	            input === null ||
    	            input === undefined
    	        );
    	    }

    	    function isMomentInputObject(input) {
    	        var objectTest = isObject(input) && !isObjectEmpty(input),
    	            propertyTest = false,
    	            properties = [
    	                'years',
    	                'year',
    	                'y',
    	                'months',
    	                'month',
    	                'M',
    	                'days',
    	                'day',
    	                'd',
    	                'dates',
    	                'date',
    	                'D',
    	                'hours',
    	                'hour',
    	                'h',
    	                'minutes',
    	                'minute',
    	                'm',
    	                'seconds',
    	                'second',
    	                's',
    	                'milliseconds',
    	                'millisecond',
    	                'ms',
    	            ],
    	            i,
    	            property,
    	            propertyLen = properties.length;

    	        for (i = 0; i < propertyLen; i += 1) {
    	            property = properties[i];
    	            propertyTest = propertyTest || hasOwnProp(input, property);
    	        }

    	        return objectTest && propertyTest;
    	    }

    	    function isNumberOrStringArray(input) {
    	        var arrayTest = isArray(input),
    	            dataTypeTest = false;
    	        if (arrayTest) {
    	            dataTypeTest =
    	                input.filter(function (item) {
    	                    return !isNumber(item) && isString(input);
    	                }).length === 0;
    	        }
    	        return arrayTest && dataTypeTest;
    	    }

    	    function isCalendarSpec(input) {
    	        var objectTest = isObject(input) && !isObjectEmpty(input),
    	            propertyTest = false,
    	            properties = [
    	                'sameDay',
    	                'nextDay',
    	                'lastDay',
    	                'nextWeek',
    	                'lastWeek',
    	                'sameElse',
    	            ],
    	            i,
    	            property;

    	        for (i = 0; i < properties.length; i += 1) {
    	            property = properties[i];
    	            propertyTest = propertyTest || hasOwnProp(input, property);
    	        }

    	        return objectTest && propertyTest;
    	    }

    	    function getCalendarFormat(myMoment, now) {
    	        var diff = myMoment.diff(now, 'days', true);
    	        return diff < -6
    	            ? 'sameElse'
    	            : diff < -1
    	              ? 'lastWeek'
    	              : diff < 0
    	                ? 'lastDay'
    	                : diff < 1
    	                  ? 'sameDay'
    	                  : diff < 2
    	                    ? 'nextDay'
    	                    : diff < 7
    	                      ? 'nextWeek'
    	                      : 'sameElse';
    	    }

    	    function calendar$1(time, formats) {
    	        // Support for single parameter, formats only overload to the calendar function
    	        if (arguments.length === 1) {
    	            if (!arguments[0]) {
    	                time = undefined;
    	                formats = undefined;
    	            } else if (isMomentInput(arguments[0])) {
    	                time = arguments[0];
    	                formats = undefined;
    	            } else if (isCalendarSpec(arguments[0])) {
    	                formats = arguments[0];
    	                time = undefined;
    	            }
    	        }
    	        // We want to compare the start of today, vs this.
    	        // Getting start-of-today depends on whether we're local/utc/offset or not.
    	        var now = time || createLocal(),
    	            sod = cloneWithOffset(now, this).startOf('day'),
    	            format = hooks.calendarFormat(this, sod) || 'sameElse',
    	            output =
    	                formats &&
    	                (isFunction(formats[format])
    	                    ? formats[format].call(this, now)
    	                    : formats[format]);

    	        return this.format(
    	            output || this.localeData().calendar(format, this, createLocal(now))
    	        );
    	    }

    	    function clone() {
    	        return new Moment(this);
    	    }

    	    function isAfter(input, units) {
    	        var localInput = isMoment(input) ? input : createLocal(input);
    	        if (!(this.isValid() && localInput.isValid())) {
    	            return false;
    	        }
    	        units = normalizeUnits(units) || 'millisecond';
    	        if (units === 'millisecond') {
    	            return this.valueOf() > localInput.valueOf();
    	        } else {
    	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
    	        }
    	    }

    	    function isBefore(input, units) {
    	        var localInput = isMoment(input) ? input : createLocal(input);
    	        if (!(this.isValid() && localInput.isValid())) {
    	            return false;
    	        }
    	        units = normalizeUnits(units) || 'millisecond';
    	        if (units === 'millisecond') {
    	            return this.valueOf() < localInput.valueOf();
    	        } else {
    	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
    	        }
    	    }

    	    function isBetween(from, to, units, inclusivity) {
    	        var localFrom = isMoment(from) ? from : createLocal(from),
    	            localTo = isMoment(to) ? to : createLocal(to);
    	        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
    	            return false;
    	        }
    	        inclusivity = inclusivity || '()';
    	        return (
    	            (inclusivity[0] === '('
    	                ? this.isAfter(localFrom, units)
    	                : !this.isBefore(localFrom, units)) &&
    	            (inclusivity[1] === ')'
    	                ? this.isBefore(localTo, units)
    	                : !this.isAfter(localTo, units))
    	        );
    	    }

    	    function isSame(input, units) {
    	        var localInput = isMoment(input) ? input : createLocal(input),
    	            inputMs;
    	        if (!(this.isValid() && localInput.isValid())) {
    	            return false;
    	        }
    	        units = normalizeUnits(units) || 'millisecond';
    	        if (units === 'millisecond') {
    	            return this.valueOf() === localInput.valueOf();
    	        } else {
    	            inputMs = localInput.valueOf();
    	            return (
    	                this.clone().startOf(units).valueOf() <= inputMs &&
    	                inputMs <= this.clone().endOf(units).valueOf()
    	            );
    	        }
    	    }

    	    function isSameOrAfter(input, units) {
    	        return this.isSame(input, units) || this.isAfter(input, units);
    	    }

    	    function isSameOrBefore(input, units) {
    	        return this.isSame(input, units) || this.isBefore(input, units);
    	    }

    	    function diff(input, units, asFloat) {
    	        var that, zoneDelta, output;

    	        if (!this.isValid()) {
    	            return NaN;
    	        }

    	        that = cloneWithOffset(input, this);

    	        if (!that.isValid()) {
    	            return NaN;
    	        }

    	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    	        units = normalizeUnits(units);

    	        switch (units) {
    	            case 'year':
    	                output = monthDiff(this, that) / 12;
    	                break;
    	            case 'month':
    	                output = monthDiff(this, that);
    	                break;
    	            case 'quarter':
    	                output = monthDiff(this, that) / 3;
    	                break;
    	            case 'second':
    	                output = (this - that) / 1e3;
    	                break; // 1000
    	            case 'minute':
    	                output = (this - that) / 6e4;
    	                break; // 1000 * 60
    	            case 'hour':
    	                output = (this - that) / 36e5;
    	                break; // 1000 * 60 * 60
    	            case 'day':
    	                output = (this - that - zoneDelta) / 864e5;
    	                break; // 1000 * 60 * 60 * 24, negate dst
    	            case 'week':
    	                output = (this - that - zoneDelta) / 6048e5;
    	                break; // 1000 * 60 * 60 * 24 * 7, negate dst
    	            default:
    	                output = this - that;
    	        }

    	        return asFloat ? output : absFloor(output);
    	    }

    	    function monthDiff(a, b) {
    	        if (a.date() < b.date()) {
    	            // end-of-month calculations work correct when the start month has more
    	            // days than the end month.
    	            return -monthDiff(b, a);
    	        }
    	        // difference in months
    	        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
    	            // b is in (anchor - 1 month, anchor + 1 month)
    	            anchor = a.clone().add(wholeMonthDiff, 'months'),
    	            anchor2,
    	            adjust;

    	        if (b - anchor < 0) {
    	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
    	            // linear across the month
    	            adjust = (b - anchor) / (anchor - anchor2);
    	        } else {
    	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
    	            // linear across the month
    	            adjust = (b - anchor) / (anchor2 - anchor);
    	        }

    	        //check for negative zero, return zero if negative zero
    	        return -(wholeMonthDiff + adjust) || 0;
    	    }

    	    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    	    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    	    function toString() {
    	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    	    }

    	    function toISOString(keepOffset) {
    	        if (!this.isValid()) {
    	            return null;
    	        }
    	        var utc = keepOffset !== true,
    	            m = utc ? this.clone().utc() : this;
    	        if (m.year() < 0 || m.year() > 9999) {
    	            return formatMoment(
    	                m,
    	                utc
    	                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
    	                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
    	            );
    	        }
    	        if (isFunction(Date.prototype.toISOString)) {
    	            // native implementation is ~50x faster, use it when we can
    	            if (utc) {
    	                return this.toDate().toISOString();
    	            } else {
    	                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
    	                    .toISOString()
    	                    .replace('Z', formatMoment(m, 'Z'));
    	            }
    	        }
    	        return formatMoment(
    	            m,
    	            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
    	        );
    	    }

    	    /**
    	     * Return a human readable representation of a moment that can
    	     * also be evaluated to get a new moment which is the same
    	     *
    	     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
    	     */
    	    function inspect() {
    	        if (!this.isValid()) {
    	            return 'moment.invalid(/* ' + this._i + ' */)';
    	        }
    	        var func = 'moment',
    	            zone = '',
    	            prefix,
    	            year,
    	            datetime,
    	            suffix;
    	        if (!this.isLocal()) {
    	            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
    	            zone = 'Z';
    	        }
    	        prefix = '[' + func + '("]';
    	        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
    	        datetime = '-MM-DD[T]HH:mm:ss.SSS';
    	        suffix = zone + '[")]';

    	        return this.format(prefix + year + datetime + suffix);
    	    }

    	    function format(inputString) {
    	        if (!inputString) {
    	            inputString = this.isUtc()
    	                ? hooks.defaultFormatUtc
    	                : hooks.defaultFormat;
    	        }
    	        var output = formatMoment(this, inputString);
    	        return this.localeData().postformat(output);
    	    }

    	    function from(time, withoutSuffix) {
    	        if (
    	            this.isValid() &&
    	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
    	        ) {
    	            return createDuration({ to: this, from: time })
    	                .locale(this.locale())
    	                .humanize(!withoutSuffix);
    	        } else {
    	            return this.localeData().invalidDate();
    	        }
    	    }

    	    function fromNow(withoutSuffix) {
    	        return this.from(createLocal(), withoutSuffix);
    	    }

    	    function to(time, withoutSuffix) {
    	        if (
    	            this.isValid() &&
    	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
    	        ) {
    	            return createDuration({ from: this, to: time })
    	                .locale(this.locale())
    	                .humanize(!withoutSuffix);
    	        } else {
    	            return this.localeData().invalidDate();
    	        }
    	    }

    	    function toNow(withoutSuffix) {
    	        return this.to(createLocal(), withoutSuffix);
    	    }

    	    // If passed a locale key, it will set the locale for this
    	    // instance.  Otherwise, it will return the locale configuration
    	    // variables for this instance.
    	    function locale(key) {
    	        var newLocaleData;

    	        if (key === undefined) {
    	            return this._locale._abbr;
    	        } else {
    	            newLocaleData = getLocale(key);
    	            if (newLocaleData != null) {
    	                this._locale = newLocaleData;
    	            }
    	            return this;
    	        }
    	    }

    	    var lang = deprecate(
    	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    	        function (key) {
    	            if (key === undefined) {
    	                return this.localeData();
    	            } else {
    	                return this.locale(key);
    	            }
    	        }
    	    );

    	    function localeData() {
    	        return this._locale;
    	    }

    	    var MS_PER_SECOND = 1000,
    	        MS_PER_MINUTE = 60 * MS_PER_SECOND,
    	        MS_PER_HOUR = 60 * MS_PER_MINUTE,
    	        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    	    // actual modulo - handles negative numbers (for dates before 1970):
    	    function mod$1(dividend, divisor) {
    	        return ((dividend % divisor) + divisor) % divisor;
    	    }

    	    function localStartOfDate(y, m, d) {
    	        // the date constructor remaps years 0-99 to 1900-1999
    	        if (y < 100 && y >= 0) {
    	            // preserve leap years using a full 400 year cycle, then reset
    	            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
    	        } else {
    	            return new Date(y, m, d).valueOf();
    	        }
    	    }

    	    function utcStartOfDate(y, m, d) {
    	        // Date.UTC remaps years 0-99 to 1900-1999
    	        if (y < 100 && y >= 0) {
    	            // preserve leap years using a full 400 year cycle, then reset
    	            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
    	        } else {
    	            return Date.UTC(y, m, d);
    	        }
    	    }

    	    function startOf(units) {
    	        var time, startOfDate;
    	        units = normalizeUnits(units);
    	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
    	            return this;
    	        }

    	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

    	        switch (units) {
    	            case 'year':
    	                time = startOfDate(this.year(), 0, 1);
    	                break;
    	            case 'quarter':
    	                time = startOfDate(
    	                    this.year(),
    	                    this.month() - (this.month() % 3),
    	                    1
    	                );
    	                break;
    	            case 'month':
    	                time = startOfDate(this.year(), this.month(), 1);
    	                break;
    	            case 'week':
    	                time = startOfDate(
    	                    this.year(),
    	                    this.month(),
    	                    this.date() - this.weekday()
    	                );
    	                break;
    	            case 'isoWeek':
    	                time = startOfDate(
    	                    this.year(),
    	                    this.month(),
    	                    this.date() - (this.isoWeekday() - 1)
    	                );
    	                break;
    	            case 'day':
    	            case 'date':
    	                time = startOfDate(this.year(), this.month(), this.date());
    	                break;
    	            case 'hour':
    	                time = this._d.valueOf();
    	                time -= mod$1(
    	                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
    	                    MS_PER_HOUR
    	                );
    	                break;
    	            case 'minute':
    	                time = this._d.valueOf();
    	                time -= mod$1(time, MS_PER_MINUTE);
    	                break;
    	            case 'second':
    	                time = this._d.valueOf();
    	                time -= mod$1(time, MS_PER_SECOND);
    	                break;
    	        }

    	        this._d.setTime(time);
    	        hooks.updateOffset(this, true);
    	        return this;
    	    }

    	    function endOf(units) {
    	        var time, startOfDate;
    	        units = normalizeUnits(units);
    	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
    	            return this;
    	        }

    	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

    	        switch (units) {
    	            case 'year':
    	                time = startOfDate(this.year() + 1, 0, 1) - 1;
    	                break;
    	            case 'quarter':
    	                time =
    	                    startOfDate(
    	                        this.year(),
    	                        this.month() - (this.month() % 3) + 3,
    	                        1
    	                    ) - 1;
    	                break;
    	            case 'month':
    	                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
    	                break;
    	            case 'week':
    	                time =
    	                    startOfDate(
    	                        this.year(),
    	                        this.month(),
    	                        this.date() - this.weekday() + 7
    	                    ) - 1;
    	                break;
    	            case 'isoWeek':
    	                time =
    	                    startOfDate(
    	                        this.year(),
    	                        this.month(),
    	                        this.date() - (this.isoWeekday() - 1) + 7
    	                    ) - 1;
    	                break;
    	            case 'day':
    	            case 'date':
    	                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
    	                break;
    	            case 'hour':
    	                time = this._d.valueOf();
    	                time +=
    	                    MS_PER_HOUR -
    	                    mod$1(
    	                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
    	                        MS_PER_HOUR
    	                    ) -
    	                    1;
    	                break;
    	            case 'minute':
    	                time = this._d.valueOf();
    	                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
    	                break;
    	            case 'second':
    	                time = this._d.valueOf();
    	                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
    	                break;
    	        }

    	        this._d.setTime(time);
    	        hooks.updateOffset(this, true);
    	        return this;
    	    }

    	    function valueOf() {
    	        return this._d.valueOf() - (this._offset || 0) * 60000;
    	    }

    	    function unix() {
    	        return Math.floor(this.valueOf() / 1000);
    	    }

    	    function toDate() {
    	        return new Date(this.valueOf());
    	    }

    	    function toArray() {
    	        var m = this;
    	        return [
    	            m.year(),
    	            m.month(),
    	            m.date(),
    	            m.hour(),
    	            m.minute(),
    	            m.second(),
    	            m.millisecond(),
    	        ];
    	    }

    	    function toObject() {
    	        var m = this;
    	        return {
    	            years: m.year(),
    	            months: m.month(),
    	            date: m.date(),
    	            hours: m.hours(),
    	            minutes: m.minutes(),
    	            seconds: m.seconds(),
    	            milliseconds: m.milliseconds(),
    	        };
    	    }

    	    function toJSON() {
    	        // new Date(NaN).toJSON() === null
    	        return this.isValid() ? this.toISOString() : null;
    	    }

    	    function isValid$2() {
    	        return isValid(this);
    	    }

    	    function parsingFlags() {
    	        return extend({}, getParsingFlags(this));
    	    }

    	    function invalidAt() {
    	        return getParsingFlags(this).overflow;
    	    }

    	    function creationData() {
    	        return {
    	            input: this._i,
    	            format: this._f,
    	            locale: this._locale,
    	            isUTC: this._isUTC,
    	            strict: this._strict,
    	        };
    	    }

    	    addFormatToken('N', 0, 0, 'eraAbbr');
    	    addFormatToken('NN', 0, 0, 'eraAbbr');
    	    addFormatToken('NNN', 0, 0, 'eraAbbr');
    	    addFormatToken('NNNN', 0, 0, 'eraName');
    	    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    	    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    	    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    	    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    	    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    	    addRegexToken('N', matchEraAbbr);
    	    addRegexToken('NN', matchEraAbbr);
    	    addRegexToken('NNN', matchEraAbbr);
    	    addRegexToken('NNNN', matchEraName);
    	    addRegexToken('NNNNN', matchEraNarrow);

    	    addParseToken(
    	        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
    	        function (input, array, config, token) {
    	            var era = config._locale.erasParse(input, token, config._strict);
    	            if (era) {
    	                getParsingFlags(config).era = era;
    	            } else {
    	                getParsingFlags(config).invalidEra = input;
    	            }
    	        }
    	    );

    	    addRegexToken('y', matchUnsigned);
    	    addRegexToken('yy', matchUnsigned);
    	    addRegexToken('yyy', matchUnsigned);
    	    addRegexToken('yyyy', matchUnsigned);
    	    addRegexToken('yo', matchEraYearOrdinal);

    	    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    	    addParseToken(['yo'], function (input, array, config, token) {
    	        var match;
    	        if (config._locale._eraYearOrdinalRegex) {
    	            match = input.match(config._locale._eraYearOrdinalRegex);
    	        }

    	        if (config._locale.eraYearOrdinalParse) {
    	            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
    	        } else {
    	            array[YEAR] = parseInt(input, 10);
    	        }
    	    });

    	    function localeEras(m, format) {
    	        var i,
    	            l,
    	            date,
    	            eras = this._eras || getLocale('en')._eras;
    	        for (i = 0, l = eras.length; i < l; ++i) {
    	            switch (typeof eras[i].since) {
    	                case 'string':
    	                    // truncate time
    	                    date = hooks(eras[i].since).startOf('day');
    	                    eras[i].since = date.valueOf();
    	                    break;
    	            }

    	            switch (typeof eras[i].until) {
    	                case 'undefined':
    	                    eras[i].until = +Infinity;
    	                    break;
    	                case 'string':
    	                    // truncate time
    	                    date = hooks(eras[i].until).startOf('day').valueOf();
    	                    eras[i].until = date.valueOf();
    	                    break;
    	            }
    	        }
    	        return eras;
    	    }

    	    function localeErasParse(eraName, format, strict) {
    	        var i,
    	            l,
    	            eras = this.eras(),
    	            name,
    	            abbr,
    	            narrow;
    	        eraName = eraName.toUpperCase();

    	        for (i = 0, l = eras.length; i < l; ++i) {
    	            name = eras[i].name.toUpperCase();
    	            abbr = eras[i].abbr.toUpperCase();
    	            narrow = eras[i].narrow.toUpperCase();

    	            if (strict) {
    	                switch (format) {
    	                    case 'N':
    	                    case 'NN':
    	                    case 'NNN':
    	                        if (abbr === eraName) {
    	                            return eras[i];
    	                        }
    	                        break;

    	                    case 'NNNN':
    	                        if (name === eraName) {
    	                            return eras[i];
    	                        }
    	                        break;

    	                    case 'NNNNN':
    	                        if (narrow === eraName) {
    	                            return eras[i];
    	                        }
    	                        break;
    	                }
    	            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
    	                return eras[i];
    	            }
    	        }
    	    }

    	    function localeErasConvertYear(era, year) {
    	        var dir = era.since <= era.until ? +1 : -1;
    	        if (year === undefined) {
    	            return hooks(era.since).year();
    	        } else {
    	            return hooks(era.since).year() + (year - era.offset) * dir;
    	        }
    	    }

    	    function getEraName() {
    	        var i,
    	            l,
    	            val,
    	            eras = this.localeData().eras();
    	        for (i = 0, l = eras.length; i < l; ++i) {
    	            // truncate time
    	            val = this.clone().startOf('day').valueOf();

    	            if (eras[i].since <= val && val <= eras[i].until) {
    	                return eras[i].name;
    	            }
    	            if (eras[i].until <= val && val <= eras[i].since) {
    	                return eras[i].name;
    	            }
    	        }

    	        return '';
    	    }

    	    function getEraNarrow() {
    	        var i,
    	            l,
    	            val,
    	            eras = this.localeData().eras();
    	        for (i = 0, l = eras.length; i < l; ++i) {
    	            // truncate time
    	            val = this.clone().startOf('day').valueOf();

    	            if (eras[i].since <= val && val <= eras[i].until) {
    	                return eras[i].narrow;
    	            }
    	            if (eras[i].until <= val && val <= eras[i].since) {
    	                return eras[i].narrow;
    	            }
    	        }

    	        return '';
    	    }

    	    function getEraAbbr() {
    	        var i,
    	            l,
    	            val,
    	            eras = this.localeData().eras();
    	        for (i = 0, l = eras.length; i < l; ++i) {
    	            // truncate time
    	            val = this.clone().startOf('day').valueOf();

    	            if (eras[i].since <= val && val <= eras[i].until) {
    	                return eras[i].abbr;
    	            }
    	            if (eras[i].until <= val && val <= eras[i].since) {
    	                return eras[i].abbr;
    	            }
    	        }

    	        return '';
    	    }

    	    function getEraYear() {
    	        var i,
    	            l,
    	            dir,
    	            val,
    	            eras = this.localeData().eras();
    	        for (i = 0, l = eras.length; i < l; ++i) {
    	            dir = eras[i].since <= eras[i].until ? +1 : -1;

    	            // truncate time
    	            val = this.clone().startOf('day').valueOf();

    	            if (
    	                (eras[i].since <= val && val <= eras[i].until) ||
    	                (eras[i].until <= val && val <= eras[i].since)
    	            ) {
    	                return (
    	                    (this.year() - hooks(eras[i].since).year()) * dir +
    	                    eras[i].offset
    	                );
    	            }
    	        }

    	        return this.year();
    	    }

    	    function erasNameRegex(isStrict) {
    	        if (!hasOwnProp(this, '_erasNameRegex')) {
    	            computeErasParse.call(this);
    	        }
    	        return isStrict ? this._erasNameRegex : this._erasRegex;
    	    }

    	    function erasAbbrRegex(isStrict) {
    	        if (!hasOwnProp(this, '_erasAbbrRegex')) {
    	            computeErasParse.call(this);
    	        }
    	        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    	    }

    	    function erasNarrowRegex(isStrict) {
    	        if (!hasOwnProp(this, '_erasNarrowRegex')) {
    	            computeErasParse.call(this);
    	        }
    	        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    	    }

    	    function matchEraAbbr(isStrict, locale) {
    	        return locale.erasAbbrRegex(isStrict);
    	    }

    	    function matchEraName(isStrict, locale) {
    	        return locale.erasNameRegex(isStrict);
    	    }

    	    function matchEraNarrow(isStrict, locale) {
    	        return locale.erasNarrowRegex(isStrict);
    	    }

    	    function matchEraYearOrdinal(isStrict, locale) {
    	        return locale._eraYearOrdinalRegex || matchUnsigned;
    	    }

    	    function computeErasParse() {
    	        var abbrPieces = [],
    	            namePieces = [],
    	            narrowPieces = [],
    	            mixedPieces = [],
    	            i,
    	            l,
    	            erasName,
    	            erasAbbr,
    	            erasNarrow,
    	            eras = this.eras();

    	        for (i = 0, l = eras.length; i < l; ++i) {
    	            erasName = regexEscape(eras[i].name);
    	            erasAbbr = regexEscape(eras[i].abbr);
    	            erasNarrow = regexEscape(eras[i].narrow);

    	            namePieces.push(erasName);
    	            abbrPieces.push(erasAbbr);
    	            narrowPieces.push(erasNarrow);
    	            mixedPieces.push(erasName);
    	            mixedPieces.push(erasAbbr);
    	            mixedPieces.push(erasNarrow);
    	        }

    	        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    	        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
    	        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
    	        this._erasNarrowRegex = new RegExp(
    	            '^(' + narrowPieces.join('|') + ')',
    	            'i'
    	        );
    	    }

    	    // FORMATTING

    	    addFormatToken(0, ['gg', 2], 0, function () {
    	        return this.weekYear() % 100;
    	    });

    	    addFormatToken(0, ['GG', 2], 0, function () {
    	        return this.isoWeekYear() % 100;
    	    });

    	    function addWeekYearFormatToken(token, getter) {
    	        addFormatToken(0, [token, token.length], 0, getter);
    	    }

    	    addWeekYearFormatToken('gggg', 'weekYear');
    	    addWeekYearFormatToken('ggggg', 'weekYear');
    	    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    	    // ALIASES

    	    // PARSING

    	    addRegexToken('G', matchSigned);
    	    addRegexToken('g', matchSigned);
    	    addRegexToken('GG', match1to2, match2);
    	    addRegexToken('gg', match1to2, match2);
    	    addRegexToken('GGGG', match1to4, match4);
    	    addRegexToken('gggg', match1to4, match4);
    	    addRegexToken('GGGGG', match1to6, match6);
    	    addRegexToken('ggggg', match1to6, match6);

    	    addWeekParseToken(
    	        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
    	        function (input, week, config, token) {
    	            week[token.substr(0, 2)] = toInt(input);
    	        }
    	    );

    	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    	        week[token] = hooks.parseTwoDigitYear(input);
    	    });

    	    // MOMENTS

    	    function getSetWeekYear(input) {
    	        return getSetWeekYearHelper.call(
    	            this,
    	            input,
    	            this.week(),
    	            this.weekday() + this.localeData()._week.dow,
    	            this.localeData()._week.dow,
    	            this.localeData()._week.doy
    	        );
    	    }

    	    function getSetISOWeekYear(input) {
    	        return getSetWeekYearHelper.call(
    	            this,
    	            input,
    	            this.isoWeek(),
    	            this.isoWeekday(),
    	            1,
    	            4
    	        );
    	    }

    	    function getISOWeeksInYear() {
    	        return weeksInYear(this.year(), 1, 4);
    	    }

    	    function getISOWeeksInISOWeekYear() {
    	        return weeksInYear(this.isoWeekYear(), 1, 4);
    	    }

    	    function getWeeksInYear() {
    	        var weekInfo = this.localeData()._week;
    	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    	    }

    	    function getWeeksInWeekYear() {
    	        var weekInfo = this.localeData()._week;
    	        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    	    }

    	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    	        var weeksTarget;
    	        if (input == null) {
    	            return weekOfYear(this, dow, doy).year;
    	        } else {
    	            weeksTarget = weeksInYear(input, dow, doy);
    	            if (week > weeksTarget) {
    	                week = weeksTarget;
    	            }
    	            return setWeekAll.call(this, input, week, weekday, dow, doy);
    	        }
    	    }

    	    function setWeekAll(weekYear, week, weekday, dow, doy) {
    	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
    	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    	        this.year(date.getUTCFullYear());
    	        this.month(date.getUTCMonth());
    	        this.date(date.getUTCDate());
    	        return this;
    	    }

    	    // FORMATTING

    	    addFormatToken('Q', 0, 'Qo', 'quarter');

    	    // PARSING

    	    addRegexToken('Q', match1);
    	    addParseToken('Q', function (input, array) {
    	        array[MONTH] = (toInt(input) - 1) * 3;
    	    });

    	    // MOMENTS

    	    function getSetQuarter(input) {
    	        return input == null
    	            ? Math.ceil((this.month() + 1) / 3)
    	            : this.month((input - 1) * 3 + (this.month() % 3));
    	    }

    	    // FORMATTING

    	    addFormatToken('D', ['DD', 2], 'Do', 'date');

    	    // PARSING

    	    addRegexToken('D', match1to2, match1to2NoLeadingZero);
    	    addRegexToken('DD', match1to2, match2);
    	    addRegexToken('Do', function (isStrict, locale) {
    	        // TODO: Remove "ordinalParse" fallback in next major release.
    	        return isStrict
    	            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
    	            : locale._dayOfMonthOrdinalParseLenient;
    	    });

    	    addParseToken(['D', 'DD'], DATE);
    	    addParseToken('Do', function (input, array) {
    	        array[DATE] = toInt(input.match(match1to2)[0]);
    	    });

    	    // MOMENTS

    	    var getSetDayOfMonth = makeGetSet('Date', true);

    	    // FORMATTING

    	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    	    // PARSING

    	    addRegexToken('DDD', match1to3);
    	    addRegexToken('DDDD', match3);
    	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    	        config._dayOfYear = toInt(input);
    	    });

    	    // HELPERS

    	    // MOMENTS

    	    function getSetDayOfYear(input) {
    	        var dayOfYear =
    	            Math.round(
    	                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
    	            ) + 1;
    	        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    	    }

    	    // FORMATTING

    	    addFormatToken('m', ['mm', 2], 0, 'minute');

    	    // PARSING

    	    addRegexToken('m', match1to2, match1to2HasZero);
    	    addRegexToken('mm', match1to2, match2);
    	    addParseToken(['m', 'mm'], MINUTE);

    	    // MOMENTS

    	    var getSetMinute = makeGetSet('Minutes', false);

    	    // FORMATTING

    	    addFormatToken('s', ['ss', 2], 0, 'second');

    	    // PARSING

    	    addRegexToken('s', match1to2, match1to2HasZero);
    	    addRegexToken('ss', match1to2, match2);
    	    addParseToken(['s', 'ss'], SECOND);

    	    // MOMENTS

    	    var getSetSecond = makeGetSet('Seconds', false);

    	    // FORMATTING

    	    addFormatToken('S', 0, 0, function () {
    	        return ~~(this.millisecond() / 100);
    	    });

    	    addFormatToken(0, ['SS', 2], 0, function () {
    	        return ~~(this.millisecond() / 10);
    	    });

    	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    	    addFormatToken(0, ['SSSS', 4], 0, function () {
    	        return this.millisecond() * 10;
    	    });
    	    addFormatToken(0, ['SSSSS', 5], 0, function () {
    	        return this.millisecond() * 100;
    	    });
    	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
    	        return this.millisecond() * 1000;
    	    });
    	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    	        return this.millisecond() * 10000;
    	    });
    	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    	        return this.millisecond() * 100000;
    	    });
    	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    	        return this.millisecond() * 1000000;
    	    });

    	    // PARSING

    	    addRegexToken('S', match1to3, match1);
    	    addRegexToken('SS', match1to3, match2);
    	    addRegexToken('SSS', match1to3, match3);

    	    var token, getSetMillisecond;
    	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
    	        addRegexToken(token, matchUnsigned);
    	    }

    	    function parseMs(input, array) {
    	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    	    }

    	    for (token = 'S'; token.length <= 9; token += 'S') {
    	        addParseToken(token, parseMs);
    	    }

    	    getSetMillisecond = makeGetSet('Milliseconds', false);

    	    // FORMATTING

    	    addFormatToken('z', 0, 0, 'zoneAbbr');
    	    addFormatToken('zz', 0, 0, 'zoneName');

    	    // MOMENTS

    	    function getZoneAbbr() {
    	        return this._isUTC ? 'UTC' : '';
    	    }

    	    function getZoneName() {
    	        return this._isUTC ? 'Coordinated Universal Time' : '';
    	    }

    	    var proto = Moment.prototype;

    	    proto.add = add;
    	    proto.calendar = calendar$1;
    	    proto.clone = clone;
    	    proto.diff = diff;
    	    proto.endOf = endOf;
    	    proto.format = format;
    	    proto.from = from;
    	    proto.fromNow = fromNow;
    	    proto.to = to;
    	    proto.toNow = toNow;
    	    proto.get = stringGet;
    	    proto.invalidAt = invalidAt;
    	    proto.isAfter = isAfter;
    	    proto.isBefore = isBefore;
    	    proto.isBetween = isBetween;
    	    proto.isSame = isSame;
    	    proto.isSameOrAfter = isSameOrAfter;
    	    proto.isSameOrBefore = isSameOrBefore;
    	    proto.isValid = isValid$2;
    	    proto.lang = lang;
    	    proto.locale = locale;
    	    proto.localeData = localeData;
    	    proto.max = prototypeMax;
    	    proto.min = prototypeMin;
    	    proto.parsingFlags = parsingFlags;
    	    proto.set = stringSet;
    	    proto.startOf = startOf;
    	    proto.subtract = subtract;
    	    proto.toArray = toArray;
    	    proto.toObject = toObject;
    	    proto.toDate = toDate;
    	    proto.toISOString = toISOString;
    	    proto.inspect = inspect;
    	    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
    	        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
    	            return 'Moment<' + this.format() + '>';
    	        };
    	    }
    	    proto.toJSON = toJSON;
    	    proto.toString = toString;
    	    proto.unix = unix;
    	    proto.valueOf = valueOf;
    	    proto.creationData = creationData;
    	    proto.eraName = getEraName;
    	    proto.eraNarrow = getEraNarrow;
    	    proto.eraAbbr = getEraAbbr;
    	    proto.eraYear = getEraYear;
    	    proto.year = getSetYear;
    	    proto.isLeapYear = getIsLeapYear;
    	    proto.weekYear = getSetWeekYear;
    	    proto.isoWeekYear = getSetISOWeekYear;
    	    proto.quarter = proto.quarters = getSetQuarter;
    	    proto.month = getSetMonth;
    	    proto.daysInMonth = getDaysInMonth;
    	    proto.week = proto.weeks = getSetWeek;
    	    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    	    proto.weeksInYear = getWeeksInYear;
    	    proto.weeksInWeekYear = getWeeksInWeekYear;
    	    proto.isoWeeksInYear = getISOWeeksInYear;
    	    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    	    proto.date = getSetDayOfMonth;
    	    proto.day = proto.days = getSetDayOfWeek;
    	    proto.weekday = getSetLocaleDayOfWeek;
    	    proto.isoWeekday = getSetISODayOfWeek;
    	    proto.dayOfYear = getSetDayOfYear;
    	    proto.hour = proto.hours = getSetHour;
    	    proto.minute = proto.minutes = getSetMinute;
    	    proto.second = proto.seconds = getSetSecond;
    	    proto.millisecond = proto.milliseconds = getSetMillisecond;
    	    proto.utcOffset = getSetOffset;
    	    proto.utc = setOffsetToUTC;
    	    proto.local = setOffsetToLocal;
    	    proto.parseZone = setOffsetToParsedOffset;
    	    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    	    proto.isDST = isDaylightSavingTime;
    	    proto.isLocal = isLocal;
    	    proto.isUtcOffset = isUtcOffset;
    	    proto.isUtc = isUtc;
    	    proto.isUTC = isUtc;
    	    proto.zoneAbbr = getZoneAbbr;
    	    proto.zoneName = getZoneName;
    	    proto.dates = deprecate(
    	        'dates accessor is deprecated. Use date instead.',
    	        getSetDayOfMonth
    	    );
    	    proto.months = deprecate(
    	        'months accessor is deprecated. Use month instead',
    	        getSetMonth
    	    );
    	    proto.years = deprecate(
    	        'years accessor is deprecated. Use year instead',
    	        getSetYear
    	    );
    	    proto.zone = deprecate(
    	        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
    	        getSetZone
    	    );
    	    proto.isDSTShifted = deprecate(
    	        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
    	        isDaylightSavingTimeShifted
    	    );

    	    function createUnix(input) {
    	        return createLocal(input * 1000);
    	    }

    	    function createInZone() {
    	        return createLocal.apply(null, arguments).parseZone();
    	    }

    	    function preParsePostFormat(string) {
    	        return string;
    	    }

    	    var proto$1 = Locale.prototype;

    	    proto$1.calendar = calendar;
    	    proto$1.longDateFormat = longDateFormat;
    	    proto$1.invalidDate = invalidDate;
    	    proto$1.ordinal = ordinal;
    	    proto$1.preparse = preParsePostFormat;
    	    proto$1.postformat = preParsePostFormat;
    	    proto$1.relativeTime = relativeTime;
    	    proto$1.pastFuture = pastFuture;
    	    proto$1.set = set;
    	    proto$1.eras = localeEras;
    	    proto$1.erasParse = localeErasParse;
    	    proto$1.erasConvertYear = localeErasConvertYear;
    	    proto$1.erasAbbrRegex = erasAbbrRegex;
    	    proto$1.erasNameRegex = erasNameRegex;
    	    proto$1.erasNarrowRegex = erasNarrowRegex;

    	    proto$1.months = localeMonths;
    	    proto$1.monthsShort = localeMonthsShort;
    	    proto$1.monthsParse = localeMonthsParse;
    	    proto$1.monthsRegex = monthsRegex;
    	    proto$1.monthsShortRegex = monthsShortRegex;
    	    proto$1.week = localeWeek;
    	    proto$1.firstDayOfYear = localeFirstDayOfYear;
    	    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    	    proto$1.weekdays = localeWeekdays;
    	    proto$1.weekdaysMin = localeWeekdaysMin;
    	    proto$1.weekdaysShort = localeWeekdaysShort;
    	    proto$1.weekdaysParse = localeWeekdaysParse;

    	    proto$1.weekdaysRegex = weekdaysRegex;
    	    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    	    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    	    proto$1.isPM = localeIsPM;
    	    proto$1.meridiem = localeMeridiem;

    	    function get$1(format, index, field, setter) {
    	        var locale = getLocale(),
    	            utc = createUTC().set(setter, index);
    	        return locale[field](utc, format);
    	    }

    	    function listMonthsImpl(format, index, field) {
    	        if (isNumber(format)) {
    	            index = format;
    	            format = undefined;
    	        }

    	        format = format || '';

    	        if (index != null) {
    	            return get$1(format, index, field, 'month');
    	        }

    	        var i,
    	            out = [];
    	        for (i = 0; i < 12; i++) {
    	            out[i] = get$1(format, i, field, 'month');
    	        }
    	        return out;
    	    }

    	    // ()
    	    // (5)
    	    // (fmt, 5)
    	    // (fmt)
    	    // (true)
    	    // (true, 5)
    	    // (true, fmt, 5)
    	    // (true, fmt)
    	    function listWeekdaysImpl(localeSorted, format, index, field) {
    	        if (typeof localeSorted === 'boolean') {
    	            if (isNumber(format)) {
    	                index = format;
    	                format = undefined;
    	            }

    	            format = format || '';
    	        } else {
    	            format = localeSorted;
    	            index = format;
    	            localeSorted = false;

    	            if (isNumber(format)) {
    	                index = format;
    	                format = undefined;
    	            }

    	            format = format || '';
    	        }

    	        var locale = getLocale(),
    	            shift = localeSorted ? locale._week.dow : 0,
    	            i,
    	            out = [];

    	        if (index != null) {
    	            return get$1(format, (index + shift) % 7, field, 'day');
    	        }

    	        for (i = 0; i < 7; i++) {
    	            out[i] = get$1(format, (i + shift) % 7, field, 'day');
    	        }
    	        return out;
    	    }

    	    function listMonths(format, index) {
    	        return listMonthsImpl(format, index, 'months');
    	    }

    	    function listMonthsShort(format, index) {
    	        return listMonthsImpl(format, index, 'monthsShort');
    	    }

    	    function listWeekdays(localeSorted, format, index) {
    	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    	    }

    	    function listWeekdaysShort(localeSorted, format, index) {
    	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    	    }

    	    function listWeekdaysMin(localeSorted, format, index) {
    	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    	    }

    	    getSetGlobalLocale('en', {
    	        eras: [
    	            {
    	                since: '0001-01-01',
    	                until: +Infinity,
    	                offset: 1,
    	                name: 'Anno Domini',
    	                narrow: 'AD',
    	                abbr: 'AD',
    	            },
    	            {
    	                since: '0000-12-31',
    	                until: -Infinity,
    	                offset: 1,
    	                name: 'Before Christ',
    	                narrow: 'BC',
    	                abbr: 'BC',
    	            },
    	        ],
    	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    	        ordinal: function (number) {
    	            var b = number % 10,
    	                output =
    	                    toInt((number % 100) / 10) === 1
    	                        ? 'th'
    	                        : b === 1
    	                          ? 'st'
    	                          : b === 2
    	                            ? 'nd'
    	                            : b === 3
    	                              ? 'rd'
    	                              : 'th';
    	            return number + output;
    	        },
    	    });

    	    // Side effect imports

    	    hooks.lang = deprecate(
    	        'moment.lang is deprecated. Use moment.locale instead.',
    	        getSetGlobalLocale
    	    );
    	    hooks.langData = deprecate(
    	        'moment.langData is deprecated. Use moment.localeData instead.',
    	        getLocale
    	    );

    	    var mathAbs = Math.abs;

    	    function abs() {
    	        var data = this._data;

    	        this._milliseconds = mathAbs(this._milliseconds);
    	        this._days = mathAbs(this._days);
    	        this._months = mathAbs(this._months);

    	        data.milliseconds = mathAbs(data.milliseconds);
    	        data.seconds = mathAbs(data.seconds);
    	        data.minutes = mathAbs(data.minutes);
    	        data.hours = mathAbs(data.hours);
    	        data.months = mathAbs(data.months);
    	        data.years = mathAbs(data.years);

    	        return this;
    	    }

    	    function addSubtract$1(duration, input, value, direction) {
    	        var other = createDuration(input, value);

    	        duration._milliseconds += direction * other._milliseconds;
    	        duration._days += direction * other._days;
    	        duration._months += direction * other._months;

    	        return duration._bubble();
    	    }

    	    // supports only 2.0-style add(1, 's') or add(duration)
    	    function add$1(input, value) {
    	        return addSubtract$1(this, input, value, 1);
    	    }

    	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    	    function subtract$1(input, value) {
    	        return addSubtract$1(this, input, value, -1);
    	    }

    	    function absCeil(number) {
    	        if (number < 0) {
    	            return Math.floor(number);
    	        } else {
    	            return Math.ceil(number);
    	        }
    	    }

    	    function bubble() {
    	        var milliseconds = this._milliseconds,
    	            days = this._days,
    	            months = this._months,
    	            data = this._data,
    	            seconds,
    	            minutes,
    	            hours,
    	            years,
    	            monthsFromDays;

    	        // if we have a mix of positive and negative values, bubble down first
    	        // check: https://github.com/moment/moment/issues/2166
    	        if (
    	            !(
    	                (milliseconds >= 0 && days >= 0 && months >= 0) ||
    	                (milliseconds <= 0 && days <= 0 && months <= 0)
    	            )
    	        ) {
    	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
    	            days = 0;
    	            months = 0;
    	        }

    	        // The following code bubbles up values, see the tests for
    	        // examples of what that means.
    	        data.milliseconds = milliseconds % 1000;

    	        seconds = absFloor(milliseconds / 1000);
    	        data.seconds = seconds % 60;

    	        minutes = absFloor(seconds / 60);
    	        data.minutes = minutes % 60;

    	        hours = absFloor(minutes / 60);
    	        data.hours = hours % 24;

    	        days += absFloor(hours / 24);

    	        // convert days to months
    	        monthsFromDays = absFloor(daysToMonths(days));
    	        months += monthsFromDays;
    	        days -= absCeil(monthsToDays(monthsFromDays));

    	        // 12 months -> 1 year
    	        years = absFloor(months / 12);
    	        months %= 12;

    	        data.days = days;
    	        data.months = months;
    	        data.years = years;

    	        return this;
    	    }

    	    function daysToMonths(days) {
    	        // 400 years have 146097 days (taking into account leap year rules)
    	        // 400 years have 12 months === 4800
    	        return (days * 4800) / 146097;
    	    }

    	    function monthsToDays(months) {
    	        // the reverse of daysToMonths
    	        return (months * 146097) / 4800;
    	    }

    	    function as(units) {
    	        if (!this.isValid()) {
    	            return NaN;
    	        }
    	        var days,
    	            months,
    	            milliseconds = this._milliseconds;

    	        units = normalizeUnits(units);

    	        if (units === 'month' || units === 'quarter' || units === 'year') {
    	            days = this._days + milliseconds / 864e5;
    	            months = this._months + daysToMonths(days);
    	            switch (units) {
    	                case 'month':
    	                    return months;
    	                case 'quarter':
    	                    return months / 3;
    	                case 'year':
    	                    return months / 12;
    	            }
    	        } else {
    	            // handle milliseconds separately because of floating point math errors (issue #1867)
    	            days = this._days + Math.round(monthsToDays(this._months));
    	            switch (units) {
    	                case 'week':
    	                    return days / 7 + milliseconds / 6048e5;
    	                case 'day':
    	                    return days + milliseconds / 864e5;
    	                case 'hour':
    	                    return days * 24 + milliseconds / 36e5;
    	                case 'minute':
    	                    return days * 1440 + milliseconds / 6e4;
    	                case 'second':
    	                    return days * 86400 + milliseconds / 1000;
    	                // Math.floor prevents floating point math errors here
    	                case 'millisecond':
    	                    return Math.floor(days * 864e5) + milliseconds;
    	                default:
    	                    throw new Error('Unknown unit ' + units);
    	            }
    	        }
    	    }

    	    function makeAs(alias) {
    	        return function () {
    	            return this.as(alias);
    	        };
    	    }

    	    var asMilliseconds = makeAs('ms'),
    	        asSeconds = makeAs('s'),
    	        asMinutes = makeAs('m'),
    	        asHours = makeAs('h'),
    	        asDays = makeAs('d'),
    	        asWeeks = makeAs('w'),
    	        asMonths = makeAs('M'),
    	        asQuarters = makeAs('Q'),
    	        asYears = makeAs('y'),
    	        valueOf$1 = asMilliseconds;

    	    function clone$1() {
    	        return createDuration(this);
    	    }

    	    function get$2(units) {
    	        units = normalizeUnits(units);
    	        return this.isValid() ? this[units + 's']() : NaN;
    	    }

    	    function makeGetter(name) {
    	        return function () {
    	            return this.isValid() ? this._data[name] : NaN;
    	        };
    	    }

    	    var milliseconds = makeGetter('milliseconds'),
    	        seconds = makeGetter('seconds'),
    	        minutes = makeGetter('minutes'),
    	        hours = makeGetter('hours'),
    	        days = makeGetter('days'),
    	        months = makeGetter('months'),
    	        years = makeGetter('years');

    	    function weeks() {
    	        return absFloor(this.days() / 7);
    	    }

    	    var round = Math.round,
    	        thresholds = {
    	            ss: 44, // a few seconds to seconds
    	            s: 45, // seconds to minute
    	            m: 45, // minutes to hour
    	            h: 22, // hours to day
    	            d: 26, // days to month/week
    	            w: null, // weeks to month
    	            M: 11, // months to year
    	        };

    	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    	    }

    	    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
    	        var duration = createDuration(posNegDuration).abs(),
    	            seconds = round(duration.as('s')),
    	            minutes = round(duration.as('m')),
    	            hours = round(duration.as('h')),
    	            days = round(duration.as('d')),
    	            months = round(duration.as('M')),
    	            weeks = round(duration.as('w')),
    	            years = round(duration.as('y')),
    	            a =
    	                (seconds <= thresholds.ss && ['s', seconds]) ||
    	                (seconds < thresholds.s && ['ss', seconds]) ||
    	                (minutes <= 1 && ['m']) ||
    	                (minutes < thresholds.m && ['mm', minutes]) ||
    	                (hours <= 1 && ['h']) ||
    	                (hours < thresholds.h && ['hh', hours]) ||
    	                (days <= 1 && ['d']) ||
    	                (days < thresholds.d && ['dd', days]);

    	        if (thresholds.w != null) {
    	            a =
    	                a ||
    	                (weeks <= 1 && ['w']) ||
    	                (weeks < thresholds.w && ['ww', weeks]);
    	        }
    	        a = a ||
    	            (months <= 1 && ['M']) ||
    	            (months < thresholds.M && ['MM', months]) ||
    	            (years <= 1 && ['y']) || ['yy', years];

    	        a[2] = withoutSuffix;
    	        a[3] = +posNegDuration > 0;
    	        a[4] = locale;
    	        return substituteTimeAgo.apply(null, a);
    	    }

    	    // This function allows you to set the rounding function for relative time strings
    	    function getSetRelativeTimeRounding(roundingFunction) {
    	        if (roundingFunction === undefined) {
    	            return round;
    	        }
    	        if (typeof roundingFunction === 'function') {
    	            round = roundingFunction;
    	            return true;
    	        }
    	        return false;
    	    }

    	    // This function allows you to set a threshold for relative time strings
    	    function getSetRelativeTimeThreshold(threshold, limit) {
    	        if (thresholds[threshold] === undefined) {
    	            return false;
    	        }
    	        if (limit === undefined) {
    	            return thresholds[threshold];
    	        }
    	        thresholds[threshold] = limit;
    	        if (threshold === 's') {
    	            thresholds.ss = limit - 1;
    	        }
    	        return true;
    	    }

    	    function humanize(argWithSuffix, argThresholds) {
    	        if (!this.isValid()) {
    	            return this.localeData().invalidDate();
    	        }

    	        var withSuffix = false,
    	            th = thresholds,
    	            locale,
    	            output;

    	        if (typeof argWithSuffix === 'object') {
    	            argThresholds = argWithSuffix;
    	            argWithSuffix = false;
    	        }
    	        if (typeof argWithSuffix === 'boolean') {
    	            withSuffix = argWithSuffix;
    	        }
    	        if (typeof argThresholds === 'object') {
    	            th = Object.assign({}, thresholds, argThresholds);
    	            if (argThresholds.s != null && argThresholds.ss == null) {
    	                th.ss = argThresholds.s - 1;
    	            }
    	        }

    	        locale = this.localeData();
    	        output = relativeTime$1(this, !withSuffix, th, locale);

    	        if (withSuffix) {
    	            output = locale.pastFuture(+this, output);
    	        }

    	        return locale.postformat(output);
    	    }

    	    var abs$1 = Math.abs;

    	    function sign(x) {
    	        return (x > 0) - (x < 0) || +x;
    	    }

    	    function toISOString$1() {
    	        // for ISO strings we do not use the normal bubbling rules:
    	        //  * milliseconds bubble up until they become hours
    	        //  * days do not bubble at all
    	        //  * months bubble up until they become years
    	        // This is because there is no context-free conversion between hours and days
    	        // (think of clock changes)
    	        // and also not between days and months (28-31 days per month)
    	        if (!this.isValid()) {
    	            return this.localeData().invalidDate();
    	        }

    	        var seconds = abs$1(this._milliseconds) / 1000,
    	            days = abs$1(this._days),
    	            months = abs$1(this._months),
    	            minutes,
    	            hours,
    	            years,
    	            s,
    	            total = this.asSeconds(),
    	            totalSign,
    	            ymSign,
    	            daysSign,
    	            hmsSign;

    	        if (!total) {
    	            // this is the same as C#'s (Noda) and python (isodate)...
    	            // but not other JS (goog.date)
    	            return 'P0D';
    	        }

    	        // 3600 seconds -> 60 minutes -> 1 hour
    	        minutes = absFloor(seconds / 60);
    	        hours = absFloor(minutes / 60);
    	        seconds %= 60;
    	        minutes %= 60;

    	        // 12 months -> 1 year
    	        years = absFloor(months / 12);
    	        months %= 12;

    	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    	        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

    	        totalSign = total < 0 ? '-' : '';
    	        ymSign = sign(this._months) !== sign(total) ? '-' : '';
    	        daysSign = sign(this._days) !== sign(total) ? '-' : '';
    	        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

    	        return (
    	            totalSign +
    	            'P' +
    	            (years ? ymSign + years + 'Y' : '') +
    	            (months ? ymSign + months + 'M' : '') +
    	            (days ? daysSign + days + 'D' : '') +
    	            (hours || minutes || seconds ? 'T' : '') +
    	            (hours ? hmsSign + hours + 'H' : '') +
    	            (minutes ? hmsSign + minutes + 'M' : '') +
    	            (seconds ? hmsSign + s + 'S' : '')
    	        );
    	    }

    	    var proto$2 = Duration.prototype;

    	    proto$2.isValid = isValid$1;
    	    proto$2.abs = abs;
    	    proto$2.add = add$1;
    	    proto$2.subtract = subtract$1;
    	    proto$2.as = as;
    	    proto$2.asMilliseconds = asMilliseconds;
    	    proto$2.asSeconds = asSeconds;
    	    proto$2.asMinutes = asMinutes;
    	    proto$2.asHours = asHours;
    	    proto$2.asDays = asDays;
    	    proto$2.asWeeks = asWeeks;
    	    proto$2.asMonths = asMonths;
    	    proto$2.asQuarters = asQuarters;
    	    proto$2.asYears = asYears;
    	    proto$2.valueOf = valueOf$1;
    	    proto$2._bubble = bubble;
    	    proto$2.clone = clone$1;
    	    proto$2.get = get$2;
    	    proto$2.milliseconds = milliseconds;
    	    proto$2.seconds = seconds;
    	    proto$2.minutes = minutes;
    	    proto$2.hours = hours;
    	    proto$2.days = days;
    	    proto$2.weeks = weeks;
    	    proto$2.months = months;
    	    proto$2.years = years;
    	    proto$2.humanize = humanize;
    	    proto$2.toISOString = toISOString$1;
    	    proto$2.toString = toISOString$1;
    	    proto$2.toJSON = toISOString$1;
    	    proto$2.locale = locale;
    	    proto$2.localeData = localeData;

    	    proto$2.toIsoString = deprecate(
    	        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
    	        toISOString$1
    	    );
    	    proto$2.lang = lang;

    	    // FORMATTING

    	    addFormatToken('X', 0, 0, 'unix');
    	    addFormatToken('x', 0, 0, 'valueOf');

    	    // PARSING

    	    addRegexToken('x', matchSigned);
    	    addRegexToken('X', matchTimestamp);
    	    addParseToken('X', function (input, array, config) {
    	        config._d = new Date(parseFloat(input) * 1000);
    	    });
    	    addParseToken('x', function (input, array, config) {
    	        config._d = new Date(toInt(input));
    	    });

    	    //! moment.js

    	    hooks.version = '2.30.1';

    	    setHookCallback(createLocal);

    	    hooks.fn = proto;
    	    hooks.min = min;
    	    hooks.max = max;
    	    hooks.now = now;
    	    hooks.utc = createUTC;
    	    hooks.unix = createUnix;
    	    hooks.months = listMonths;
    	    hooks.isDate = isDate;
    	    hooks.locale = getSetGlobalLocale;
    	    hooks.invalid = createInvalid;
    	    hooks.duration = createDuration;
    	    hooks.isMoment = isMoment;
    	    hooks.weekdays = listWeekdays;
    	    hooks.parseZone = createInZone;
    	    hooks.localeData = getLocale;
    	    hooks.isDuration = isDuration;
    	    hooks.monthsShort = listMonthsShort;
    	    hooks.weekdaysMin = listWeekdaysMin;
    	    hooks.defineLocale = defineLocale;
    	    hooks.updateLocale = updateLocale;
    	    hooks.locales = listLocales;
    	    hooks.weekdaysShort = listWeekdaysShort;
    	    hooks.normalizeUnits = normalizeUnits;
    	    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    	    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    	    hooks.calendarFormat = getCalendarFormat;
    	    hooks.prototype = proto;

    	    // currently HTML5 input type only supports 24-hour formats
    	    hooks.HTML5_FMT = {
    	        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
    	        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
    	        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
    	        DATE: 'YYYY-MM-DD', // <input type="date" />
    	        TIME: 'HH:mm', // <input type="time" />
    	        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
    	        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
    	        WEEK: 'GGGG-[W]WW', // <input type="week" />
    	        MONTH: 'YYYY-MM', // <input type="month" />
    	    };

    	    return hooks;

    	}))); 
    } (moment$1));

    var momentExports = moment$1.exports;
    var moment = /*@__PURE__*/getDefaultExportFromCjs(momentExports);

    const localizer = lib.momentLocalizer(moment);
    const UserEvent = ({
      events
    }) => (/*#__PURE__*/React__default.default.createElement("div", null, /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        height: 800,
        padding: 20,
        boxSizing: 'border-box',
        background: '#fff'
      }
    }, /*#__PURE__*/React__default.default.createElement(lib.Calendar, {
      localizer: localizer,
      events: events,
      startAccessor: "start",
      endAccessor: "end",
      selectable: true,
      onSelectSlot: () => {
        window.location.href = '/admin/resources/user_event/actions/new';
      },
      onSelectEvent: event => {
        window.location.href = `/admin/resources/user_event/records/${event.id}/show`;
      }
    }))));

    const ImportComponent = ({
      resource
    }) => {
      const [file, setFile] = React.useState(null);
      const sendNotice = adminjs.useNotice();
      const [isFetching, setFetching] = React.useState();
      const onUpload = uploadedFile => {
        setFile(uploadedFile?.[0] ?? null);
      };
      const onSubmit = async () => {
        if (!file) {
          return;
        }
        setFetching(true);
        try {
          const importData = new FormData();
          importData.append('file', file, file?.name);
          await new adminjs.ApiClient().resourceAction({
            method: 'post',
            resourceId: resource.id,
            actionName: 'import',
            data: importData
          });
          sendNotice({
            message: 'Imported successfully',
            type: 'success'
          });
        } catch (e) {
          sendNotice({
            message: e.message,
            type: 'error'
          });
        }
        setFetching(false);
      };
      if (isFetching) {
        return /*#__PURE__*/React__default.default.createElement(designSystem.Loader, null);
      }
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        margin: "auto",
        maxWidth: 600,
        display: "flex",
        justifyContent: "center",
        flexDirection: "column"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.DropZone, {
        files: [],
        onChange: onUpload,
        multiple: false
      }), file && /*#__PURE__*/React__default.default.createElement(designSystem.DropZoneItem, {
        file: file,
        filename: file.name,
        onRemove: () => setFile(null)
      }), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        display: "flex",
        justifyContent: "center",
        m: 10
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
        onClick: onSubmit,
        disabled: !file || isFetching
      }, "Upload")));
    };

    var FileSaver_min = {exports: {}};

    (function (module, exports) {
    	(function(a,b){b();})(commonjsGlobal,function(){function b(a,b){return "undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c);},d.onerror=function(){console.error("could not download file");},d.send();}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send();}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"));}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b);}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof commonjsGlobal&&commonjsGlobal.global===commonjsGlobal?commonjsGlobal:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href);},4E4),setTimeout(function(){e(j);},0));}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else {var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i);});}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null;},k.readAsDataURL(b);}else {var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m);},4E4);}});f.saveAs=g.saveAs=g,(module.exports=g);});

    	
    } (FileSaver_min));

    var FileSaver_minExports = FileSaver_min.exports;

    function _typeof(o) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
      } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
      }, _typeof(o);
    }

    function requiredArgs(required, args) {
      if (args.length < required) {
        throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
      }
    }

    /**
     * @name isDate
     * @category Common Helpers
     * @summary Is the given value a date?
     *
     * @description
     * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
     *
     * @param {*} value - the value to check
     * @returns {boolean} true if the given value is a date
     * @throws {TypeError} 1 arguments required
     *
     * @example
     * // For a valid date:
     * const result = isDate(new Date())
     * //=> true
     *
     * @example
     * // For an invalid date:
     * const result = isDate(new Date(NaN))
     * //=> true
     *
     * @example
     * // For some value:
     * const result = isDate('2014-02-31')
     * //=> false
     *
     * @example
     * // For an object:
     * const result = isDate({})
     * //=> false
     */
    function isDate(value) {
      requiredArgs(1, arguments);
      return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
    }

    /**
     * @name toDate
     * @category Common Helpers
     * @summary Convert the given argument to an instance of Date.
     *
     * @description
     * Convert the given argument to an instance of Date.
     *
     * If the argument is an instance of Date, the function returns its clone.
     *
     * If the argument is a number, it is treated as a timestamp.
     *
     * If the argument is none of the above, the function returns Invalid Date.
     *
     * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
     *
     * @param {Date|Number} argument - the value to convert
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Clone the date:
     * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert the timestamp to date:
     * const result = toDate(1392098430000)
     * //=> Tue Feb 11 2014 11:30:30
     */
    function toDate(argument) {
      requiredArgs(1, arguments);
      var argStr = Object.prototype.toString.call(argument);

      // Clone the date
      if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
        // Prevent the date to lose the milliseconds when passed to new Date() in IE10
        return new Date(argument.getTime());
      } else if (typeof argument === 'number' || argStr === '[object Number]') {
        return new Date(argument);
      } else {
        if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
          // eslint-disable-next-line no-console
          console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
          // eslint-disable-next-line no-console
          console.warn(new Error().stack);
        }
        return new Date(NaN);
      }
    }

    /**
     * @name isValid
     * @category Common Helpers
     * @summary Is the given date valid?
     *
     * @description
     * Returns false if argument is Invalid Date and true otherwise.
     * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
     * Invalid Date is a Date, whose time value is NaN.
     *
     * Time value of Date: http://es5.github.io/#x15.9.1.1
     *
     * @param {*} date - the date to check
     * @returns {Boolean} the date is valid
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // For the valid date:
     * const result = isValid(new Date(2014, 1, 31))
     * //=> true
     *
     * @example
     * // For the value, convertable into a date:
     * const result = isValid(1393804800000)
     * //=> true
     *
     * @example
     * // For the invalid date:
     * const result = isValid(new Date(''))
     * //=> false
     */
    function isValid(dirtyDate) {
      requiredArgs(1, arguments);
      if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
        return false;
      }
      var date = toDate(dirtyDate);
      return !isNaN(Number(date));
    }

    function toInteger(dirtyNumber) {
      if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
        return NaN;
      }
      var number = Number(dirtyNumber);
      if (isNaN(number)) {
        return number;
      }
      return number < 0 ? Math.ceil(number) : Math.floor(number);
    }

    /**
     * @name addMilliseconds
     * @category Millisecond Helpers
     * @summary Add the specified number of milliseconds to the given date.
     *
     * @description
     * Add the specified number of milliseconds to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
     * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:30.750
     */
    function addMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var timestamp = toDate(dirtyDate).getTime();
      var amount = toInteger(dirtyAmount);
      return new Date(timestamp + amount);
    }

    /**
     * @name subMilliseconds
     * @category Millisecond Helpers
     * @summary Subtract the specified number of milliseconds from the given date.
     *
     * @description
     * Subtract the specified number of milliseconds from the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
     * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:29.250
     */
    function subMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMilliseconds(dirtyDate, -amount);
    }

    var MILLISECONDS_IN_DAY = 86400000;
    function getUTCDayOfYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var timestamp = date.getTime();
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
      var startOfYearTimestamp = date.getTime();
      var difference = timestamp - startOfYearTimestamp;
      return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
    }

    function startOfUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var weekStartsOn = 1;
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    function getUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var year = date.getUTCFullYear();
      var fourthOfJanuaryOfNextYear = new Date(0);
      fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
      var fourthOfJanuaryOfThisYear = new Date(0);
      fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
      fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    function startOfUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var year = getUTCISOWeekYear(dirtyDate);
      var fourthOfJanuary = new Date(0);
      fourthOfJanuary.setUTCFullYear(year, 0, 4);
      fourthOfJanuary.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCISOWeek(fourthOfJanuary);
      return date;
    }

    var MILLISECONDS_IN_WEEK$1 = 604800000;
    function getUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();

      // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)
      return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
    }

    var defaultOptions = {};
    function getDefaultOptions() {
      return defaultOptions;
    }

    function startOfUTCWeek(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var defaultOptions = getDefaultOptions();
      var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

      // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    function getUTCWeekYear(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var year = date.getUTCFullYear();
      var defaultOptions = getDefaultOptions();
      var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);

      // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }
      var firstWeekOfNextYear = new Date(0);
      firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
      var firstWeekOfThisYear = new Date(0);
      firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    function startOfUTCWeekYear(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var defaultOptions = getDefaultOptions();
      var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
      var year = getUTCWeekYear(dirtyDate, options);
      var firstWeek = new Date(0);
      firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCWeek(firstWeek, options);
      return date;
    }

    var MILLISECONDS_IN_WEEK = 604800000;
    function getUTCWeek(dirtyDate, options) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();

      // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)
      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }

    function addLeadingZeros(number, targetLength) {
      var sign = number < 0 ? '-' : '';
      var output = Math.abs(number).toString();
      while (output.length < targetLength) {
        output = '0' + output;
      }
      return sign + output;
    }

    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* |                                |
     * |  d  | Day of month                   |  D  |                                |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  m  | Minute                         |  M  | Month                          |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  y  | Year (abs)                     |  Y  |                                |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     */
    var formatters$1 = {
      // Year
      y: function y(date, token) {
        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
        // |----------|-------|----|-------|-------|-------|
        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

        var signedYear = date.getUTCFullYear();
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
      },
      // Month
      M: function M(date, token) {
        var month = date.getUTCMonth();
        return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
      },
      // Day of the month
      d: function d(date, token) {
        return addLeadingZeros(date.getUTCDate(), token.length);
      },
      // AM or PM
      a: function a(date, token) {
        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
        switch (token) {
          case 'a':
          case 'aa':
            return dayPeriodEnumValue.toUpperCase();
          case 'aaa':
            return dayPeriodEnumValue;
          case 'aaaaa':
            return dayPeriodEnumValue[0];
          case 'aaaa':
          default:
            return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
        }
      },
      // Hour [1-12]
      h: function h(date, token) {
        return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
      },
      // Hour [0-23]
      H: function H(date, token) {
        return addLeadingZeros(date.getUTCHours(), token.length);
      },
      // Minute
      m: function m(date, token) {
        return addLeadingZeros(date.getUTCMinutes(), token.length);
      },
      // Second
      s: function s(date, token) {
        return addLeadingZeros(date.getUTCSeconds(), token.length);
      },
      // Fraction of second
      S: function S(date, token) {
        var numberOfDigits = token.length;
        var milliseconds = date.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
        return addLeadingZeros(fractionalSeconds, token.length);
      }
    };

    var dayPeriodEnum = {
      am: 'am',
      pm: 'pm',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
    };
    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* | Milliseconds in day            |
     * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
     * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
     * |  d  | Day of month                   |  D  | Day of year                    |
     * |  e  | Local day of week              |  E  | Day of week                    |
     * |  f  |                                |  F* | Day of week in month           |
     * |  g* | Modified Julian day            |  G  | Era                            |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  i! | ISO day of week                |  I! | ISO week of year               |
     * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
     * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
     * |  l* | (deprecated)                   |  L  | Stand-alone month              |
     * |  m  | Minute                         |  M  | Month                          |
     * |  n  |                                |  N  |                                |
     * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
     * |  p! | Long localized time            |  P! | Long localized date            |
     * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
     * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
     * |  u  | Extended year                  |  U* | Cyclic year                    |
     * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
     * |  w  | Local week of year             |  W* | Week of month                  |
     * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
     * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
     * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     *
     * Letters marked by ! are non-standard, but implemented by date-fns:
     * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
     * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
     *   i.e. 7 for Sunday, 1 for Monday, etc.
     * - `I` is ISO week of year, as opposed to `w` which is local week of year.
     * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
     *   `R` is supposed to be used in conjunction with `I` and `i`
     *   for universal ISO week-numbering date, whereas
     *   `Y` is supposed to be used in conjunction with `w` and `e`
     *   for week-numbering date specific to the locale.
     * - `P` is long localized date format
     * - `p` is long localized time format
     */

    var formatters = {
      // Era
      G: function G(date, token, localize) {
        var era = date.getUTCFullYear() > 0 ? 1 : 0;
        switch (token) {
          // AD, BC
          case 'G':
          case 'GG':
          case 'GGG':
            return localize.era(era, {
              width: 'abbreviated'
            });
          // A, B
          case 'GGGGG':
            return localize.era(era, {
              width: 'narrow'
            });
          // Anno Domini, Before Christ
          case 'GGGG':
          default:
            return localize.era(era, {
              width: 'wide'
            });
        }
      },
      // Year
      y: function y(date, token, localize) {
        // Ordinal number
        if (token === 'yo') {
          var signedYear = date.getUTCFullYear();
          // Returns 1 for 1 BC (which is year 0 in JavaScript)
          var year = signedYear > 0 ? signedYear : 1 - signedYear;
          return localize.ordinalNumber(year, {
            unit: 'year'
          });
        }
        return formatters$1.y(date, token);
      },
      // Local week-numbering year
      Y: function Y(date, token, localize, options) {
        var signedWeekYear = getUTCWeekYear(date, options);
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

        // Two digit year
        if (token === 'YY') {
          var twoDigitYear = weekYear % 100;
          return addLeadingZeros(twoDigitYear, 2);
        }

        // Ordinal number
        if (token === 'Yo') {
          return localize.ordinalNumber(weekYear, {
            unit: 'year'
          });
        }

        // Padding
        return addLeadingZeros(weekYear, token.length);
      },
      // ISO week-numbering year
      R: function R(date, token) {
        var isoWeekYear = getUTCISOWeekYear(date);

        // Padding
        return addLeadingZeros(isoWeekYear, token.length);
      },
      // Extended year. This is a single number designating the year of this calendar system.
      // The main difference between `y` and `u` localizers are B.C. years:
      // | Year | `y` | `u` |
      // |------|-----|-----|
      // | AC 1 |   1 |   1 |
      // | BC 1 |   1 |   0 |
      // | BC 2 |   2 |  -1 |
      // Also `yy` always returns the last two digits of a year,
      // while `uu` pads single digit years to 2 characters and returns other years unchanged.
      u: function u(date, token) {
        var year = date.getUTCFullYear();
        return addLeadingZeros(year, token.length);
      },
      // Quarter
      Q: function Q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
          // 1, 2, 3, 4
          case 'Q':
            return String(quarter);
          // 01, 02, 03, 04
          case 'QQ':
            return addLeadingZeros(quarter, 2);
          // 1st, 2nd, 3rd, 4th
          case 'Qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4
          case 'QQQ':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)
          case 'QQQQQ':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'formatting'
            });
          // 1st quarter, 2nd quarter, ...
          case 'QQQQ':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone quarter
      q: function q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
          // 1, 2, 3, 4
          case 'q':
            return String(quarter);
          // 01, 02, 03, 04
          case 'qq':
            return addLeadingZeros(quarter, 2);
          // 1st, 2nd, 3rd, 4th
          case 'qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4
          case 'qqq':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)
          case 'qqqqq':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'standalone'
            });
          // 1st quarter, 2nd quarter, ...
          case 'qqqq':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Month
      M: function M(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
          case 'M':
          case 'MM':
            return formatters$1.M(date, token);
          // 1st, 2nd, ..., 12th
          case 'Mo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec
          case 'MMM':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // J, F, ..., D
          case 'MMMMM':
            return localize.month(month, {
              width: 'narrow',
              context: 'formatting'
            });
          // January, February, ..., December
          case 'MMMM':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone month
      L: function L(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
          // 1, 2, ..., 12
          case 'L':
            return String(month + 1);
          // 01, 02, ..., 12
          case 'LL':
            return addLeadingZeros(month + 1, 2);
          // 1st, 2nd, ..., 12th
          case 'Lo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec
          case 'LLL':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // J, F, ..., D
          case 'LLLLL':
            return localize.month(month, {
              width: 'narrow',
              context: 'standalone'
            });
          // January, February, ..., December
          case 'LLLL':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Local week of year
      w: function w(date, token, localize, options) {
        var week = getUTCWeek(date, options);
        if (token === 'wo') {
          return localize.ordinalNumber(week, {
            unit: 'week'
          });
        }
        return addLeadingZeros(week, token.length);
      },
      // ISO week of year
      I: function I(date, token, localize) {
        var isoWeek = getUTCISOWeek(date);
        if (token === 'Io') {
          return localize.ordinalNumber(isoWeek, {
            unit: 'week'
          });
        }
        return addLeadingZeros(isoWeek, token.length);
      },
      // Day of the month
      d: function d(date, token, localize) {
        if (token === 'do') {
          return localize.ordinalNumber(date.getUTCDate(), {
            unit: 'date'
          });
        }
        return formatters$1.d(date, token);
      },
      // Day of year
      D: function D(date, token, localize) {
        var dayOfYear = getUTCDayOfYear(date);
        if (token === 'Do') {
          return localize.ordinalNumber(dayOfYear, {
            unit: 'dayOfYear'
          });
        }
        return addLeadingZeros(dayOfYear, token.length);
      },
      // Day of week
      E: function E(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        switch (token) {
          // Tue
          case 'E':
          case 'EE':
          case 'EEE':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T
          case 'EEEEE':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu
          case 'EEEEEE':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday
          case 'EEEE':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Local day of week
      e: function e(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          // Numerical value (Nth day of week with current locale or weekStartsOn)
          case 'e':
            return String(localDayOfWeek);
          // Padded numerical value
          case 'ee':
            return addLeadingZeros(localDayOfWeek, 2);
          // 1st, 2nd, ..., 7th
          case 'eo':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });
          case 'eee':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T
          case 'eeeee':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu
          case 'eeeeee':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday
          case 'eeee':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone local day of week
      c: function c(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          // Numerical value (same as in `e`)
          case 'c':
            return String(localDayOfWeek);
          // Padded numerical value
          case 'cc':
            return addLeadingZeros(localDayOfWeek, token.length);
          // 1st, 2nd, ..., 7th
          case 'co':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });
          case 'ccc':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // T
          case 'ccccc':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'standalone'
            });
          // Tu
          case 'cccccc':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'standalone'
            });
          // Tuesday
          case 'cccc':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // ISO day of week
      i: function i(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
        switch (token) {
          // 2
          case 'i':
            return String(isoDayOfWeek);
          // 02
          case 'ii':
            return addLeadingZeros(isoDayOfWeek, token.length);
          // 2nd
          case 'io':
            return localize.ordinalNumber(isoDayOfWeek, {
              unit: 'day'
            });
          // Tue
          case 'iii':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T
          case 'iiiii':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu
          case 'iiiiii':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday
          case 'iiii':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM or PM
      a: function a(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        switch (token) {
          case 'a':
          case 'aa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'aaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();
          case 'aaaaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'aaaa':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM, PM, midnight, noon
      b: function b(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours === 12) {
          dayPeriodEnumValue = dayPeriodEnum.noon;
        } else if (hours === 0) {
          dayPeriodEnumValue = dayPeriodEnum.midnight;
        } else {
          dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        }
        switch (token) {
          case 'b':
          case 'bb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'bbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();
          case 'bbbbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'bbbb':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // in the morning, in the afternoon, in the evening, at night
      B: function B(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours >= 17) {
          dayPeriodEnumValue = dayPeriodEnum.evening;
        } else if (hours >= 12) {
          dayPeriodEnumValue = dayPeriodEnum.afternoon;
        } else if (hours >= 4) {
          dayPeriodEnumValue = dayPeriodEnum.morning;
        } else {
          dayPeriodEnumValue = dayPeriodEnum.night;
        }
        switch (token) {
          case 'B':
          case 'BB':
          case 'BBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'BBBBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'BBBB':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Hour [1-12]
      h: function h(date, token, localize) {
        if (token === 'ho') {
          var hours = date.getUTCHours() % 12;
          if (hours === 0) hours = 12;
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }
        return formatters$1.h(date, token);
      },
      // Hour [0-23]
      H: function H(date, token, localize) {
        if (token === 'Ho') {
          return localize.ordinalNumber(date.getUTCHours(), {
            unit: 'hour'
          });
        }
        return formatters$1.H(date, token);
      },
      // Hour [0-11]
      K: function K(date, token, localize) {
        var hours = date.getUTCHours() % 12;
        if (token === 'Ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }
        return addLeadingZeros(hours, token.length);
      },
      // Hour [1-24]
      k: function k(date, token, localize) {
        var hours = date.getUTCHours();
        if (hours === 0) hours = 24;
        if (token === 'ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }
        return addLeadingZeros(hours, token.length);
      },
      // Minute
      m: function m(date, token, localize) {
        if (token === 'mo') {
          return localize.ordinalNumber(date.getUTCMinutes(), {
            unit: 'minute'
          });
        }
        return formatters$1.m(date, token);
      },
      // Second
      s: function s(date, token, localize) {
        if (token === 'so') {
          return localize.ordinalNumber(date.getUTCSeconds(), {
            unit: 'second'
          });
        }
        return formatters$1.s(date, token);
      },
      // Fraction of second
      S: function S(date, token) {
        return formatters$1.S(date, token);
      },
      // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
      X: function X(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        if (timezoneOffset === 0) {
          return 'Z';
        }
        switch (token) {
          // Hours and optional minutes
          case 'X':
            return formatTimezoneWithOptionalMinutes(timezoneOffset);

          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XX`
          case 'XXXX':
          case 'XX':
            // Hours and minutes without `:` delimiter
            return formatTimezone(timezoneOffset);

          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XXX`
          case 'XXXXX':
          case 'XXX': // Hours and minutes with `:` delimiter
          default:
            return formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
      x: function x(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          // Hours and optional minutes
          case 'x':
            return formatTimezoneWithOptionalMinutes(timezoneOffset);

          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xx`
          case 'xxxx':
          case 'xx':
            // Hours and minutes without `:` delimiter
            return formatTimezone(timezoneOffset);

          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xxx`
          case 'xxxxx':
          case 'xxx': // Hours and minutes with `:` delimiter
          default:
            return formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (GMT)
      O: function O(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          // Short
          case 'O':
          case 'OO':
          case 'OOO':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
          // Long
          case 'OOOO':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (specific non-location)
      z: function z(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          // Short
          case 'z':
          case 'zz':
          case 'zzz':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
          // Long
          case 'zzzz':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
      },
      // Seconds timestamp
      t: function t(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = Math.floor(originalDate.getTime() / 1000);
        return addLeadingZeros(timestamp, token.length);
      },
      // Milliseconds timestamp
      T: function T(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = originalDate.getTime();
        return addLeadingZeros(timestamp, token.length);
      }
    };
    function formatTimezoneShort(offset, dirtyDelimiter) {
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = Math.floor(absOffset / 60);
      var minutes = absOffset % 60;
      if (minutes === 0) {
        return sign + String(hours);
      }
      var delimiter = dirtyDelimiter;
      return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
    }
    function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
      if (offset % 60 === 0) {
        var sign = offset > 0 ? '-' : '+';
        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
      }
      return formatTimezone(offset, dirtyDelimiter);
    }
    function formatTimezone(offset, dirtyDelimiter) {
      var delimiter = dirtyDelimiter || '';
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
      var minutes = addLeadingZeros(absOffset % 60, 2);
      return sign + hours + delimiter + minutes;
    }

    var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'P':
          return formatLong.date({
            width: 'short'
          });
        case 'PP':
          return formatLong.date({
            width: 'medium'
          });
        case 'PPP':
          return formatLong.date({
            width: 'long'
          });
        case 'PPPP':
        default:
          return formatLong.date({
            width: 'full'
          });
      }
    };
    var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'p':
          return formatLong.time({
            width: 'short'
          });
        case 'pp':
          return formatLong.time({
            width: 'medium'
          });
        case 'ppp':
          return formatLong.time({
            width: 'long'
          });
        case 'pppp':
        default:
          return formatLong.time({
            width: 'full'
          });
      }
    };
    var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
      var matchResult = pattern.match(/(P+)(p+)?/) || [];
      var datePattern = matchResult[1];
      var timePattern = matchResult[2];
      if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
      }
      var dateTimeFormat;
      switch (datePattern) {
        case 'P':
          dateTimeFormat = formatLong.dateTime({
            width: 'short'
          });
          break;
        case 'PP':
          dateTimeFormat = formatLong.dateTime({
            width: 'medium'
          });
          break;
        case 'PPP':
          dateTimeFormat = formatLong.dateTime({
            width: 'long'
          });
          break;
        case 'PPPP':
        default:
          dateTimeFormat = formatLong.dateTime({
            width: 'full'
          });
          break;
      }
      return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
    };
    var longFormatters = {
      p: timeLongFormatter,
      P: dateTimeLongFormatter
    };

    /**
     * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
     * They usually appear for dates that denote time before the timezones were introduced
     * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
     * and GMT+01:00:00 after that date)
     *
     * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
     * which would lead to incorrect calculations.
     *
     * This function returns the timezone offset in milliseconds that takes seconds in account.
     */
    function getTimezoneOffsetInMilliseconds(date) {
      var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
      utcDate.setUTCFullYear(date.getFullYear());
      return date.getTime() - utcDate.getTime();
    }

    var protectedDayOfYearTokens = ['D', 'DD'];
    var protectedWeekYearTokens = ['YY', 'YYYY'];
    function isProtectedDayOfYearToken(token) {
      return protectedDayOfYearTokens.indexOf(token) !== -1;
    }
    function isProtectedWeekYearToken(token) {
      return protectedWeekYearTokens.indexOf(token) !== -1;
    }
    function throwProtectedError(token, format, input) {
      if (token === 'YYYY') {
        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      } else if (token === 'YY') {
        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      } else if (token === 'D') {
        throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      } else if (token === 'DD') {
        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      }
    }

    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
      },
      xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
      },
      halfAMinute: 'half a minute',
      lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
      },
      xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
      },
      aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
      },
      xHours: {
        one: '1 hour',
        other: '{{count}} hours'
      },
      xDays: {
        one: '1 day',
        other: '{{count}} days'
      },
      aboutXWeeks: {
        one: 'about 1 week',
        other: 'about {{count}} weeks'
      },
      xWeeks: {
        one: '1 week',
        other: '{{count}} weeks'
      },
      aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
      },
      xMonths: {
        one: '1 month',
        other: '{{count}} months'
      },
      aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
      },
      xYears: {
        one: '1 year',
        other: '{{count}} years'
      },
      overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
      },
      almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
      }
    };
    var formatDistance = function formatDistance(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === 'string') {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace('{{count}}', count.toString());
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return 'in ' + result;
        } else {
          return result + ' ago';
        }
      }
      return result;
    };

    function buildFormatLongFn(args) {
      return function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // TODO: Remove String()
        var width = options.width ? String(options.width) : args.defaultWidth;
        var format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
      };
    }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: buildFormatLongFn({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: buildFormatLongFn({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };

    var formatRelativeLocale = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: 'P'
    };
    var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    };

    function buildLocalizeFn(args) {
      return function (dirtyIndex, options) {
        var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
        var valuesArray;
        if (context === 'formatting' && args.formattingValues) {
          var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
          var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
          valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
          var _defaultWidth = args.defaultWidth;
          var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
          valuesArray = args.values[_width] || args.values[_defaultWidth];
        }
        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
        // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
        return valuesArray[index];
      };
    }

    var eraValues = {
      narrow: ['B', 'A'],
      abbreviated: ['BC', 'AD'],
      wide: ['Before Christ', 'Anno Domini']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
    };

    // Note: in English, the names of days of the week and months are capitalized.
    // If you are making a new locale based on this one, check if the same is true for the language you're working on.
    // Generally, formatted dates should look like they are in the middle of a sentence,
    // e.g. in Spanish language the weekdays and months should be in the lowercase.
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    };
    var dayValues = {
      narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
      short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      }
    };
    var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
      var number = Number(dirtyNumber);

      // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`.
      //
      // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'.

      var rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + 'st';
          case 2:
            return number + 'nd';
          case 3:
            return number + 'rd';
        }
      }
      return number + 'th';
    };
    var localize = {
      ordinalNumber: ordinalNumber,
      era: buildLocalizeFn({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: buildLocalizeFn({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function argumentCallback(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: buildLocalizeFn({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };

    function buildMatchFn(args) {
      return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var width = options.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);
        if (!matchResult) {
          return null;
        }
        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        }) : findKey(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        });
        var value;
        value = args.valueCallback ? args.valueCallback(key) : key;
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
          value: value,
          rest: rest
        };
      };
    }
    function findKey(object, predicate) {
      for (var key in object) {
        if (object.hasOwnProperty(key) && predicate(object[key])) {
          return key;
        }
      }
      return undefined;
    }
    function findIndex(array, predicate) {
      for (var key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
          return key;
        }
      }
      return undefined;
    }

    function buildMatchPatternFn(args) {
      return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var matchResult = string.match(args.matchPattern);
        if (!matchResult) return null;
        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);
        if (!parseResult) return null;
        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
          value: value,
          rest: rest
        };
      };
    }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function valueCallback(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function valueCallback(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (United States).
     * @language English
     * @iso-639-2 eng
     * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
     * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
     */
    var locale = {
      code: 'en-US',
      formatDistance: formatDistance,
      formatLong: formatLong,
      formatRelative: formatRelative,
      localize: localize,
      match: match,
      options: {
        weekStartsOn: 0 /* Sunday */,
        firstWeekContainsDate: 1
      }
    };

    // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
    //   (one of the certain letters followed by `o`)
    // - (\w)\1* matches any sequences of the same letter
    // - '' matches two quote characters in a row
    // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
    //   except a single quote symbol, which ends the sequence.
    //   Two quote characters do not end the sequence.
    //   If there is no matching single quote
    //   then the sequence will continue until the end of the string.
    // - . matches any single character unmatched by previous parts of the RegExps
    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

    // This RegExp catches symbols escaped by quotes, and also
    // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;

    /**
     * @name format
     * @category Common Helpers
     * @summary Format the date.
     *
     * @description
     * Return the formatted date string in the given format. The result may vary by locale.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * The characters wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     * (see the last example)
     *
     * Format of the string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 7 below the table).
     *
     * Accepted patterns:
     * | Unit                            | Pattern | Result examples                   | Notes |
     * |---------------------------------|---------|-----------------------------------|-------|
     * | Era                             | G..GGG  | AD, BC                            |       |
     * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 | GGGGG   | A, B                              |       |
     * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
     * |                                 | yy      | 44, 01, 00, 17                    | 5     |
     * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
     * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
     * |                                 | yyyyy   | ...                               | 3,5   |
     * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
     * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
     * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
     * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
     * |                                 | YYYYY   | ...                               | 3,5   |
     * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
     * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
     * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
     * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
     * |                                 | RRRRR   | ...                               | 3,5,7 |
     * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
     * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
     * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
     * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
     * |                                 | uuuuu   | ...                               | 3,5   |
     * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
     * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | QQ      | 01, 02, 03, 04                    |       |
     * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
     * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | qq      | 01, 02, 03, 04                    |       |
     * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
     * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
     * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | MM      | 01, 02, ..., 12                   |       |
     * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 | MMMM    | January, February, ..., December  | 2     |
     * |                                 | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
     * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | LL      | 01, 02, ..., 12                   |       |
     * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 | LLLL    | January, February, ..., December  | 2     |
     * |                                 | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | w       | 1, 2, ..., 53                     |       |
     * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
     * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | II      | 01, 02, ..., 53                   | 7     |
     * | Day of month                    | d       | 1, 2, ..., 31                     |       |
     * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
     * |                                 | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
     * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
     * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
     * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 | DDDD    | ...                               | 3     |
     * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
     * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
     * |                                 | ii      | 01, 02, ..., 07                   | 7     |
     * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
     * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
     * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
     * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
     * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | ee      | 02, 03, ..., 01                   |       |
     * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | cc      | 02, 03, ..., 01                   |       |
     * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | AM, PM                          | a..aa   | AM, PM                            |       |
     * |                                 | aaa     | am, pm                            |       |
     * |                                 | aaaa    | a.m., p.m.                        | 2     |
     * |                                 | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
     * |                                 | bbb     | am, pm, noon, midnight            |       |
     * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
     * |                                 | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
     * |                                 | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
     * |                                 | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
     * |                                 | KK      | 01, 02, ..., 11, 00               |       |
     * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
     * |                                 | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          | m       | 0, 1, ..., 59                     |       |
     * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | mm      | 00, 01, ..., 59                   |       |
     * | Second                          | s       | 0, 1, ..., 59                     |       |
     * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | ss      | 00, 01, ..., 59                   |       |
     * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
     * |                                 | SS      | 00, 01, ..., 99                   |       |
     * |                                 | SSS     | 000, 001, ..., 999                |       |
     * |                                 | SSSS    | ...                               | 3     |
     * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
     * |                                 | XX      | -0800, +0530, Z                   |       |
     * |                                 | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
     * |                                 | xx      | -0800, +0530, +0000               |       |
     * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
     * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
     * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
     * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
     * | Seconds timestamp               | t       | 512969520                         | 7     |
     * |                                 | tt      | ...                               | 3,7   |
     * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
     * |                                 | TT      | ...                               | 3,7   |
     * | Long localized date             | P       | 04/29/1453                        | 7     |
     * |                                 | PP      | Apr 29, 1453                      | 7     |
     * |                                 | PPP     | April 29th, 1453                  | 7     |
     * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
     * | Long localized time             | p       | 12:00 AM                          | 7     |
     * |                                 | pp      | 12:00:00 AM                       | 7     |
     * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
     * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
     * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
     * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
     * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
     * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
     *    the output will be the same as default pattern for this unit, usually
     *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
     *    are marked with "2" in the last column of the table.
     *
     *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
     *
     * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
     *    The output will be padded with zeros to match the length of the pattern.
     *
     *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
     *
     * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 5. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` always returns the last two digits of a year,
     *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
     *
     *    | Year | `yy` | `uu` |
     *    |------|------|------|
     *    | 1    |   01 |   01 |
     *    | 14   |   14 |   14 |
     *    | 376  |   76 |  376 |
     *    | 1453 |   53 | 1453 |
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
     *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
     *
     * 6. Specific non-location timezones are currently unavailable in `date-fns`,
     *    so right now these tokens fall back to GMT timezones.
     *
     * 7. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `t`: seconds timestamp
     *    - `T`: milliseconds timestamp
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
     *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
     *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * @param {Date|Number} date - the original date
     * @param {String} format - the string of tokens
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
     * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @returns {String} the formatted date string
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `date` must not be Invalid Date
     * @throws {RangeError} `options.locale` must contain `localize` property
     * @throws {RangeError} `options.locale` must contain `formatLong` property
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} format string contains an unescaped latin alphabet character
     *
     * @example
     * // Represent 11 February 2014 in middle-endian format:
     * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
     * //=> '02/11/2014'
     *
     * @example
     * // Represent 2 July 2014 in Esperanto:
     * import { eoLocale } from 'date-fns/locale/eo'
     * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
     *   locale: eoLocale
     * })
     * //=> '2-a de julio 2014'
     *
     * @example
     * // Escape string by single quote characters:
     * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
     * //=> "3 o'clock"
     */

    function format(dirtyDate, dirtyFormatStr, options) {
      var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _defaultOptions$local3, _defaultOptions$local4;
      requiredArgs(2, arguments);
      var formatStr = String(dirtyFormatStr);
      var defaultOptions = getDefaultOptions();
      var locale$1 = (_ref = (_options$locale = void 0 ) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : locale;
      var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = void 0 ) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : void 0 ) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

      // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }
      var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = void 0 ) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : void 0 ) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

      // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }
      if (!locale$1.localize) {
        throw new RangeError('locale must contain localize property');
      }
      if (!locale$1.formatLong) {
        throw new RangeError('locale must contain formatLong property');
      }
      var originalDate = toDate(dirtyDate);
      if (!isValid(originalDate)) {
        throw new RangeError('Invalid time value');
      }

      // Convert the date in system timezone to the same date in UTC+00:00 timezone.
      // This ensures that when UTC functions will be implemented, locales will be compatible with them.
      // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
      var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
      var utcDate = subMilliseconds(originalDate, timezoneOffset);
      var formatterOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale$1,
        _originalDate: originalDate
      };
      var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
        var firstCharacter = substring[0];
        if (firstCharacter === 'p' || firstCharacter === 'P') {
          var longFormatter = longFormatters[firstCharacter];
          return longFormatter(substring, locale$1.formatLong);
        }
        return substring;
      }).join('').match(formattingTokensRegExp).map(function (substring) {
        // Replace two single quote characters with one single quote character
        if (substring === "''") {
          return "'";
        }
        var firstCharacter = substring[0];
        if (firstCharacter === "'") {
          return cleanEscapedString(substring);
        }
        var formatter = formatters[firstCharacter];
        if (formatter) {
          if (isProtectedWeekYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
          }
          if (isProtectedDayOfYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
          }
          return formatter(utcDate, substring, locale$1.localize, formatterOptions);
        }
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
        }
        return substring;
      }).join('');
      return result;
    }
    function cleanEscapedString(input) {
      var matched = input.match(escapedStringRegExp);
      if (!matched) {
        return input;
      }
      return matched[1].replace(doubleQuoteRegExp, "'");
    }

    const Exporters = ['csv', 'json', 'xml'];

    const mimeTypes = {
      json: 'application/json',
      csv: 'text/csv',
      xml: 'text/xml'
    };
    const getExportedFileName = extension => `export-${format(Date.now(), 'yyyy-MM-dd_HH-mm')}.${extension}`;
    const ExportComponent = ({
      resource
    }) => {
      const [isFetching, setFetching] = React.useState();
      const sendNotice = adminjs.useNotice();
      const exportData = async type => {
        setFetching(true);
        try {
          const {
            data: {
              exportedData
            }
          } = await new adminjs.ApiClient().resourceAction({
            method: 'post',
            resourceId: resource.id,
            actionName: 'export',
            params: {
              type
            }
          });
          const blob = new Blob([exportedData], {
            type: mimeTypes[type]
          });
          FileSaver_minExports.saveAs(blob, getExportedFileName(type));
          sendNotice({
            message: 'Exported successfully',
            type: 'success'
          });
        } catch (e) {
          sendNotice({
            message: e.message,
            type: 'error'
          });
        }
        setFetching(false);
      };
      if (isFetching) {
        return /*#__PURE__*/React__default.default.createElement(designSystem.Loader, null);
      }
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        display: "flex",
        justifyContent: "center"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
        variant: "lg"
      }, "Choose export format:")), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        display: "flex",
        justifyContent: "center"
      }, Exporters.map(parserType => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        key: parserType,
        m: 2
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
        onClick: () => exportData(parserType),
        disabled: isFetching
      }, parserType.toUpperCase())))));
    };

    const Edit = ({ property, record, onChange }) => {
        const { translateProperty } = adminjs.useTranslation();
        const { params } = record;
        const { custom } = property;
        const path = adminjs.flat.get(params, custom.filePathProperty);
        const key = adminjs.flat.get(params, custom.keyProperty);
        const file = adminjs.flat.get(params, custom.fileProperty);
        const [originalKey, setOriginalKey] = React.useState(key);
        const [filesToUpload, setFilesToUpload] = React.useState([]);
        React.useEffect(() => {
            // it means means that someone hit save and new file has been uploaded
            // in this case fliesToUpload should be cleared.
            // This happens when user turns off redirect after new/edit
            if ((typeof key === 'string' && key !== originalKey)
                || (typeof key !== 'string' && !originalKey)
                || (typeof key !== 'string' && Array.isArray(key) && key.length !== originalKey.length)) {
                setOriginalKey(key);
                setFilesToUpload([]);
            }
        }, [key, originalKey]);
        const onUpload = (files) => {
            setFilesToUpload(files);
            onChange(custom.fileProperty, files);
        };
        const handleRemove = () => {
            onChange(custom.fileProperty, null);
        };
        const handleMultiRemove = (singleKey) => {
            const index = (adminjs.flat.get(record.params, custom.keyProperty) || []).indexOf(singleKey);
            const filesToDelete = adminjs.flat.get(record.params, custom.filesToDeleteProperty) || [];
            if (path && path.length > 0) {
                const newPath = path.map((currentPath, i) => (i !== index ? currentPath : null));
                let newParams = adminjs.flat.set(record.params, custom.filesToDeleteProperty, [...filesToDelete, index]);
                newParams = adminjs.flat.set(newParams, custom.filePathProperty, newPath);
                onChange({
                    ...record,
                    params: newParams,
                });
            }
            else {
                // eslint-disable-next-line no-console
                console.log('You cannot remove file when there are no uploaded files yet');
            }
        };
        return (React__default.default.createElement(designSystem.FormGroup, null,
            React__default.default.createElement(designSystem.Label, null, translateProperty(property.label, property.resourceId)),
            React__default.default.createElement(designSystem.DropZone, { onChange: onUpload, multiple: custom.multiple, validate: {
                    mimeTypes: custom.mimeTypes,
                    maxSize: custom.maxSize,
                }, files: filesToUpload }),
            !custom.multiple && key && path && !filesToUpload.length && file !== null && (React__default.default.createElement(designSystem.DropZoneItem, { filename: key, src: path, onRemove: handleRemove })),
            custom.multiple && key && key.length && path ? (React__default.default.createElement(React__default.default.Fragment, null, key.map((singleKey, index) => {
                // when we remove items we set only path index to nulls.
                // key is still there. This is because
                // we have to maintain all the indexes. So here we simply filter out elements which
                // were removed and display only what was left
                const currentPath = path[index];
                return currentPath ? (React__default.default.createElement(designSystem.DropZoneItem, { key: singleKey, filename: singleKey, src: path[index], onRemove: () => handleMultiRemove(singleKey) })) : '';
            }))) : ''));
    };

    const AudioMimeTypes = [
        'audio/aac',
        'audio/midi',
        'audio/x-midi',
        'audio/mpeg',
        'audio/ogg',
        'application/ogg',
        'audio/opus',
        'audio/wav',
        'audio/webm',
        'audio/3gpp2',
    ];
    const ImageMimeTypes = [
        'image/bmp',
        'image/gif',
        'image/jpeg',
        'image/png',
        'image/svg+xml',
        'image/vnd.microsoft.icon',
        'image/tiff',
        'image/webp',
    ];

    // eslint-disable-next-line import/no-extraneous-dependencies
    const SingleFile = (props) => {
        const { name, path, mimeType, width } = props;
        if (path && path.length) {
            if (mimeType && ImageMimeTypes.includes(mimeType)) {
                return (React__default.default.createElement("img", { src: path, style: { maxHeight: width, maxWidth: width }, alt: name }));
            }
            if (mimeType && AudioMimeTypes.includes(mimeType)) {
                return (React__default.default.createElement("audio", { controls: true, src: path },
                    "Your browser does not support the",
                    React__default.default.createElement("code", null, "audio"),
                    React__default.default.createElement("track", { kind: "captions" })));
            }
        }
        return (React__default.default.createElement(designSystem.Box, null,
            React__default.default.createElement(designSystem.Button, { as: "a", href: path, ml: "default", size: "sm", rounded: true, target: "_blank" },
                React__default.default.createElement(designSystem.Icon, { icon: "DocumentDownload", color: "white", mr: "default" }),
                name)));
    };
    const File = ({ width, record, property }) => {
        const { custom } = property;
        let path = adminjs.flat.get(record?.params, custom.filePathProperty);
        if (!path) {
            return null;
        }
        const name = adminjs.flat.get(record?.params, custom.fileNameProperty ? custom.fileNameProperty : custom.keyProperty);
        const mimeType = custom.mimeTypeProperty
            && adminjs.flat.get(record?.params, custom.mimeTypeProperty);
        if (!property.custom.multiple) {
            if (custom.opts && custom.opts.baseUrl) {
                path = `${custom.opts.baseUrl}/${name}`;
            }
            return (React__default.default.createElement(SingleFile, { path: path, name: name, width: width, mimeType: mimeType }));
        }
        if (custom.opts && custom.opts.baseUrl) {
            const baseUrl = custom.opts.baseUrl || '';
            path = path.map((singlePath, index) => `${baseUrl}/${name[index]}`);
        }
        return (React__default.default.createElement(React__default.default.Fragment, null, path.map((singlePath, index) => (React__default.default.createElement(SingleFile, { key: singlePath, path: singlePath, name: name[index], width: width, mimeType: mimeType[index] })))));
    };

    const List = (props) => (React__default.default.createElement(File, { width: 100, ...props }));

    const Show = (props) => {
        const { property } = props;
        const { translateProperty } = adminjs.useTranslation();
        return (React__default.default.createElement(designSystem.FormGroup, null,
            React__default.default.createElement(designSystem.Label, null, translateProperty(property.label, property.resourceId)),
            React__default.default.createElement(File, { width: "100%", ...props })));
    };

    AdminJS.UserComponents = {};
    AdminJS.UserComponents.Dashboard = Dashboard;
    AdminJS.UserComponents.VideoUploadEdit = VideoUploadEditComponent;
    AdminJS.UserComponents.OrganisationalDetail = OrganisationDetail;
    AdminJS.UserComponents.ExportOrganisationActivities = ExportActivities$1;
    AdminJS.UserComponents.DepartmentMove = DepartmentMove;
    AdminJS.UserComponents.ExportUserActivities = ExportActivities;
    AdminJS.UserComponents.UserDetail = UserDetail;
    AdminJS.UserComponents.UserEvents = UserEvent;
    AdminJS.UserComponents.ImportComponent = ImportComponent;
    AdminJS.UserComponents.ExportComponent = ExportComponent;
    AdminJS.UserComponents.UploadEditComponent = Edit;
    AdminJS.UserComponents.UploadListComponent = List;
    AdminJS.UserComponents.UploadShowComponent = Show;

})(React, AdminJSDesignSystem, PropTypes, ReactDOM, AdminJS);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
